import { TNew } from '../actions/model-constructor';
import { EntityComparer, IEntityOptions, IEntityTransformer } from './entity-options';
export declare const EMPTY_OBJECT: {};
export declare const getEntity: <TModel>(entityOrType: TNew<TModel> | TModel | TModel[]) => TNew<TModel> | TModel;
export declare const ensureObject: (value: any) => any;
export declare const getEntityOptions: <TModel>(entityOrType: TNew<TModel> | TModel | TModel[]) => IEntityOptions;
export declare const entityOptions: <TModel>(entityOrType: TNew<TModel> | TModel | TModel[]) => IEntityOptions;
export declare const entityStateName: (modelName: string) => string;
export declare const nameOfEntity: <TModel>(entityOrType: TNew<TModel> | TModel) => string | undefined;
export declare const uriNameOfEntity: <TModel>(entityOrType: TNew<TModel> | TModel) => string | null | undefined;
export declare const pluralNameOfEntity: <TModel>(entityOrType: TNew<TModel> | TModel) => string | null | undefined;
export declare const stateNameOfEntity: <TModel>(entityOrType: TNew<TModel> | TModel) => string | null | undefined;
export declare const mapComparer: (options: IEntityOptions, name: string) => EntityComparer;
export declare const defaultComparer: (options: IEntityOptions) => EntityComparer;
export declare const namedComparer: (options: IEntityOptions, name: string) => EntityComparer;
export declare const getComparer: (options: IEntityOptions, name?: string) => EntityComparer;
export declare const entityComparer: <TModel>(entityOrType: TNew<TModel> | TModel | TModel[], name?: string) => EntityComparer | null | undefined;
export declare const entityTransforms: <TModel>(entityOrType: TNew<TModel> | TModel) => IEntityTransformer[] | null | undefined;
export declare const entityMaxAge: <TModel>(entityOrType: TNew<TModel> | TModel | TModel[]) => number;
