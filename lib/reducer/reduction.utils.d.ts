import { IEntityAction } from '../actions/entity-action';
import { EntityIdentity } from '../types/entity-identity';
import { IEntityState } from '../util/entity-state';
export declare function stateNameFromAction(action: IEntityAction): string;
export declare function featureNameFromAction(action: IEntityAction): string;
export declare function setNewState(featureName: string, stateName: string, state: any, newState: IEntityState<any>): any;
export declare const safeGetKey: <TModel>(action: IEntityAction, entity: TModel) => EntityIdentity;
export declare const cloneEntities: (original: any | null) => any;
export declare const cloneIds: (ids: EntityIdentity[] | null) => EntityIdentity[];
export declare const mergeSingle: (currentEntities: any, entityKey: any, newEntity: any) => any;
export declare const mergeMany: (currentEntities: any, newEntities: any, action: any) => any;
export declare const deleteSingle: (currentEntities: any, entityKey: any) => any;
export declare const deleteMany: (currentEntities: any, entityKeys: any) => any;
export declare const pushSingle: (currentIds: any, entityKey: any) => any;
export declare const pushMany: (currentIds: any, newEntities: any, action: any) => any;
export declare const combineUnique: (currentIds: any, currentEntities: any, modifiedEntities: any, action: any) => any;
export declare const has: (array: any, value: any) => boolean;
export declare const pushIfMissing: (currentEntities: any, currentIds: any, entityKey: any) => any;
export declare const pushUnique: (currentEntities: any, currentIds: any, entityKey: any) => any;
export declare const pushManyUnique: (currentEntities: any, currentIds: any, entityKeys: any) => any;
export declare const warnMissingPageInfo: (action: IEntityAction) => void;
export declare const warnMissingRangeInfo: (action: IEntityAction) => void;
