import { InjectionToken } from '@angular/core';
import { of, pipe } from 'rxjs';
import { filter, mergeMap, tap } from 'rxjs/operators';
import { compose as fpipe } from '../../util/func';
import { entityStateName } from '../decorators/entity-util';
import { FEATURE_AFFINITY } from '../util/util-tokens';
export const NGRX_AUTO_ENTITY_APP_STORE = new InjectionToken('@briebug/ngrx-auto-entity App Store');
export const getEntityState = (info) => (state) => (info.modelType[FEATURE_AFFINITY]
    ? state[info.modelType[FEATURE_AFFINITY]][entityStateName(info.modelName)]
    : state[entityStateName(info.modelName)]);
export const getLoadedAt = (state) => state?.tracking?.loadedAt ?? undefined;
export const getIsLoading = (state) => !!state.tracking?.isLoading;
export const getCurrentPage = (state) => state.paging?.currentPage ?? undefined;
export const getCurrentRange = (state) => state.paging?.currentRange ?? undefined;
export const getEntityIds = (state) => state?.ids ?? [];
export const mapToHasEntities = (ids) => !!ids && !!ids.length;
export const entityLoadedAt = (info) => fpipe(getEntityState(info), getLoadedAt);
export const entityIsLoading = (info) => fpipe(getEntityState(info), getIsLoading);
export const entityCurrentPage = (info) => fpipe(getEntityState(info), getCurrentPage);
export const entityCurrentRange = (info) => fpipe(getEntityState(info), getCurrentRange);
export const entityIds = (info) => fpipe(getEntityState(info), getEntityIds);
export const hasEntitiesLoaded = (info) => fpipe(getEntityState(info), getEntityIds, mapToHasEntities);
export const addSeconds = (date, seconds) => new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds() + seconds, date.getMilliseconds());
export const nowAfterExpiry = (expiry) => expiry < new Date();
export const isSubsequentRange = (a, b) => (a.start || a.first || a.skip + a.take) > (b.end || b.last || b.skip + b.take);
export const warnIfMissingStore = () => !warnIfMissingStore.lastWarnTime || Math.abs(new Date(warnIfMissingStore.lastWarnTime).valueOf() - new Date(Date.now()).valueOf()) > 15000
    ? (console.warn(
    // eslint-disable-next-line max-len
    '[NGRX-AE] Warning! The NGRX_AUTO_ENTITY_APP_STORE provider has not been configured! *IfNecessary actions require accessing your store in order to function properly!'),
        (warnIfMissingStore.lastWarnTime = Date.now()),
        void 0)
    : void 0;
const warnMissingStore = () => pipe(tap(([, store]) => (!store ? warnIfMissingStore() : null)));
export const getAppStore = (injector) => pipe(mergeMap((action) => {
    try {
        const store = injector.get(NGRX_AUTO_ENTITY_APP_STORE);
        return of({ action, store });
    }
    catch {
        warnIfMissingStore();
        return of({ action, store: undefined });
    }
}), filter(({ store }) => !!store));
//# sourceMappingURL=data:application/json;base64,