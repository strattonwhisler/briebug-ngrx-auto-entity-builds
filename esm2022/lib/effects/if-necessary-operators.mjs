import { Injectable, Injector } from '@angular/core';
import { select } from '@ngrx/store';
import { combineLatest, of } from 'rxjs';
import { filter, map, mergeMap, take } from 'rxjs/operators';
import { Load } from '../actions/load-actions';
import { LoadAll } from '../actions/load-all-actions';
import { LoadMany } from '../actions/load-many-actions';
import { LoadPage } from '../actions/load-page-actions';
import { LoadRange } from '../actions/load-range-actions';
import { addSeconds, entityCurrentPage, entityCurrentRange, entityIds, entityIsLoading, entityLoadedAt, getAppStore, hasEntitiesLoaded, isSubsequentRange, nowAfterExpiry } from './if-necessary-operator-utils';
import * as i0 from "@angular/core";
export class EntityIfNecessaryOperators {
    constructor(injector) {
        this.injector = injector;
    }
    loadIfNecessary() {
        return (source) => source.pipe(getAppStore(this.injector), mergeMap(({ action: { info, keys, maxAge, criteria, correlationId }, store }) => combineLatest([
            store.pipe(select(entityLoadedAt(info)), take(1)),
            store.pipe(select(entityIsLoading(info)), take(1)),
            store.pipe(select(hasEntitiesLoaded(info)), take(1)),
            of(info.defaultMaxAge),
            store.pipe(select(entityIds(info)), take(1))
        ]).pipe(map(([loadedAt, isLoading, hasEntities, defaultMaxAge, ids]) => ({
            loadedAt,
            isLoading,
            hasEntities,
            defaultMaxAge,
            missing: !loadedAt || !hasEntities || (!!ids && ids.indexOf(keys) === -1),
            checkAge: !!defaultMaxAge || !!maxAge
        })), filter(({ isLoading, missing, checkAge, loadedAt, defaultMaxAge }) => !isLoading && (missing || (checkAge ? nowAfterExpiry(addSeconds(new Date(loadedAt), maxAge || defaultMaxAge)) : missing))), map(() => new Load(info.modelType, keys, criteria, correlationId)))));
    }
    loadAllIfNecessary() {
        return (source) => source.pipe(getAppStore(this.injector), mergeMap(({ action: { info, maxAge, criteria, correlationId }, store }) => combineLatest([
            store.pipe(select(entityLoadedAt(info)), take(1)),
            store.pipe(select(entityIsLoading(info)), take(1)),
            store.pipe(select(hasEntitiesLoaded(info)), take(1)),
            of(info.defaultMaxAge)
        ]).pipe(map(([loadedAt, isLoading, hasEntities, defaultMaxAge]) => ({
            loadedAt,
            isLoading,
            hasEntities,
            defaultMaxAge,
            missing: !loadedAt || !hasEntities,
            checkAge: !!defaultMaxAge || !!maxAge
        })), filter(({ isLoading, missing, checkAge, loadedAt, defaultMaxAge }) => !isLoading &&
            (missing || (checkAge ? nowAfterExpiry(addSeconds(new Date(loadedAt), maxAge || defaultMaxAge)) : missing))), map(() => new LoadAll(info.modelType, criteria, correlationId)))));
    }
    loadManyIfNecessary() {
        return (source) => source.pipe(getAppStore(this.injector), mergeMap(({ action: { info, maxAge, criteria, correlationId }, store }) => combineLatest([
            store.pipe(select(entityLoadedAt(info)), take(1)),
            store.pipe(select(entityIsLoading(info)), take(1)),
            store.pipe(select(hasEntitiesLoaded(info)), take(1)),
            of(info.defaultMaxAge)
        ]).pipe(map(([loadedAt, isLoading, hasEntities, defaultMaxAge]) => ({
            loadedAt,
            isLoading,
            hasEntities,
            defaultMaxAge,
            missing: !loadedAt || !hasEntities,
            checkAge: !!defaultMaxAge || !!maxAge
        })), filter(({ isLoading, missing, checkAge, loadedAt, defaultMaxAge }) => !isLoading && (missing || (checkAge ? nowAfterExpiry(addSeconds(new Date(loadedAt), maxAge || defaultMaxAge)) : missing))), map(() => new LoadMany(info.modelType, criteria, correlationId)))));
    }
    loadPageIfNecessary() {
        return (source) => source.pipe(getAppStore(this.injector), mergeMap(({ action: { info, page, maxAge, criteria, correlationId }, store }) => combineLatest([
            store.pipe(select(entityLoadedAt(info)), take(1)),
            store.pipe(select(entityIsLoading(info)), take(1)),
            store.pipe(select(hasEntitiesLoaded(info)), take(1)),
            of(info.defaultMaxAge),
            store.pipe(select(entityCurrentPage(info)), take(1))
        ]).pipe(map(([loadedAt, isLoading, hasEntities, defaultMaxAge, currentPage]) => ({
            loadedAt,
            isLoading,
            hasEntities,
            defaultMaxAge,
            missing: !loadedAt || !hasEntities,
            samePage: page.page === currentPage.page,
            checkAge: !!defaultMaxAge || !!maxAge
        })), filter(({ isLoading, missing, samePage, checkAge, loadedAt, defaultMaxAge }) => !isLoading &&
            (missing || !samePage || (checkAge ? nowAfterExpiry(addSeconds(new Date(loadedAt), maxAge || defaultMaxAge)) : missing))), map(() => new LoadPage(info.modelType, page, criteria, correlationId)))));
    }
    loadRangeIfNecessary() {
        return (source) => source.pipe(getAppStore(this.injector), mergeMap(({ action: { info, range, maxAge, criteria, correlationId }, store }) => combineLatest([
            store.pipe(select(entityLoadedAt(info)), take(1)),
            store.pipe(select(entityIsLoading(info)), take(1)),
            store.pipe(select(hasEntitiesLoaded(info)), take(1)),
            of(info.defaultMaxAge),
            store.pipe(select(entityCurrentRange(info)), take(1))
        ]).pipe(map(([loadedAt, isLoading, hasEntities, defaultMaxAge, currentRange]) => ({
            loadedAt,
            isLoading,
            hasEntities,
            defaultMaxAge,
            missing: !loadedAt || !hasEntities,
            nonFollowingRange: !isSubsequentRange(range, currentRange),
            checkAge: !!defaultMaxAge || !!maxAge
        })), filter(({ isLoading, missing, nonFollowingRange, checkAge, loadedAt, defaultMaxAge }) => !isLoading &&
            (missing ||
                !nonFollowingRange ||
                (checkAge ? nowAfterExpiry(addSeconds(new Date(loadedAt), maxAge || defaultMaxAge)) : missing))), map(() => new LoadRange(info.modelType, range, criteria, correlationId)))));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityIfNecessaryOperators, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityIfNecessaryOperators }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityIfNecessaryOperators, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,