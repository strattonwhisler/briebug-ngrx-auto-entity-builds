import { Injectable } from '@angular/core';
import { Actions, createEffect } from '@ngrx/effects';
import { ofEntityAction } from '../actions/action-operators';
import { EntityActionTypes } from '../actions/action-types';
import { EntityIfNecessaryOperators } from './if-necessary-operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "./if-necessary-operators";
export class LoadIfNecessaryEffects {
    constructor(actions$, ifnOps) {
        this.actions$ = actions$;
        this.ifnOps = ifnOps;
        this.loadIfNecessary$ = createEffect(() => this.actions$.pipe(ofEntityAction(EntityActionTypes.LoadIfNecessary), this.ifnOps.loadIfNecessary()));
        this.loadAllIfNecessary$ = createEffect(() => this.actions$.pipe(ofEntityAction(EntityActionTypes.LoadAllIfNecessary), this.ifnOps.loadAllIfNecessary()));
        this.loadManyIfNecessary$ = createEffect(() => this.actions$.pipe(ofEntityAction(EntityActionTypes.LoadManyIfNecessary), this.ifnOps.loadManyIfNecessary()));
        this.loadPageIfNecessary$ = createEffect(() => this.actions$.pipe(ofEntityAction(EntityActionTypes.LoadPageIfNecessary), this.ifnOps.loadPageIfNecessary()));
        this.loadRangeIfNecessary$ = createEffect(() => this.actions$.pipe(ofEntityAction(EntityActionTypes.LoadRangeIfNecessary), this.ifnOps.loadRangeIfNecessary()));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: LoadIfNecessaryEffects, deps: [{ token: i1.Actions }, { token: i2.EntityIfNecessaryOperators }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: LoadIfNecessaryEffects }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: LoadIfNecessaryEffects, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.Actions }, { type: i2.EntityIfNecessaryOperators }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtbmVjZXNzYXJ5LWxvYWRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL2VmZmVjdHMvaWYtbmVjZXNzYXJ5LWxvYWRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7O0FBR3RFLE1BQU0sT0FBTyxzQkFBc0I7SUFxQmpDLFlBQW9CLFFBQWlCLEVBQVUsTUFBa0M7UUFBN0QsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUFVLFdBQU0sR0FBTixNQUFNLENBQTRCO1FBcEJqRixxQkFBZ0IsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQ3JHLENBQUM7UUFFRix3QkFBbUIsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUMzRyxDQUFDO1FBRUYseUJBQW9CLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FDN0csQ0FBQztRQUVGLHlCQUFvQixHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQzdHLENBQUM7UUFFRiwwQkFBcUIsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUMvRyxDQUFDO0lBRWtGLENBQUM7aUlBckIxRSxzQkFBc0I7cUlBQXRCLHNCQUFzQjs7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIGNyZWF0ZUVmZmVjdCB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xuaW1wb3J0IHsgb2ZFbnRpdHlBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbi1vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9uVHlwZXMgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbi10eXBlcyc7XG5pbXBvcnQgeyBFbnRpdHlJZk5lY2Vzc2FyeU9wZXJhdG9ycyB9IGZyb20gJy4vaWYtbmVjZXNzYXJ5LW9wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2FkSWZOZWNlc3NhcnlFZmZlY3RzIHtcbiAgbG9hZElmTmVjZXNzYXJ5JCA9IGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShvZkVudGl0eUFjdGlvbihFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkSWZOZWNlc3NhcnkpLCB0aGlzLmlmbk9wcy5sb2FkSWZOZWNlc3NhcnkoKSlcbiAgKTtcblxuICBsb2FkQWxsSWZOZWNlc3NhcnkkID0gY3JlYXRlRWZmZWN0KCgpID0+XG4gICAgdGhpcy5hY3Rpb25zJC5waXBlKG9mRW50aXR5QWN0aW9uKEVudGl0eUFjdGlvblR5cGVzLkxvYWRBbGxJZk5lY2Vzc2FyeSksIHRoaXMuaWZuT3BzLmxvYWRBbGxJZk5lY2Vzc2FyeSgpKVxuICApO1xuXG4gIGxvYWRNYW55SWZOZWNlc3NhcnkkID0gY3JlYXRlRWZmZWN0KCgpID0+XG4gICAgdGhpcy5hY3Rpb25zJC5waXBlKG9mRW50aXR5QWN0aW9uKEVudGl0eUFjdGlvblR5cGVzLkxvYWRNYW55SWZOZWNlc3NhcnkpLCB0aGlzLmlmbk9wcy5sb2FkTWFueUlmTmVjZXNzYXJ5KCkpXG4gICk7XG5cbiAgbG9hZFBhZ2VJZk5lY2Vzc2FyeSQgPSBjcmVhdGVFZmZlY3QoKCkgPT5cbiAgICB0aGlzLmFjdGlvbnMkLnBpcGUob2ZFbnRpdHlBY3Rpb24oRW50aXR5QWN0aW9uVHlwZXMuTG9hZFBhZ2VJZk5lY2Vzc2FyeSksIHRoaXMuaWZuT3BzLmxvYWRQYWdlSWZOZWNlc3NhcnkoKSlcbiAgKTtcblxuICBsb2FkUmFuZ2VJZk5lY2Vzc2FyeSQgPSBjcmVhdGVFZmZlY3QoKCkgPT5cbiAgICB0aGlzLmFjdGlvbnMkLnBpcGUob2ZFbnRpdHlBY3Rpb24oRW50aXR5QWN0aW9uVHlwZXMuTG9hZFJhbmdlSWZOZWNlc3NhcnkpLCB0aGlzLmlmbk9wcy5sb2FkUmFuZ2VJZk5lY2Vzc2FyeSgpKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsIHByaXZhdGUgaWZuT3BzOiBFbnRpdHlJZk5lY2Vzc2FyeU9wZXJhdG9ycykge31cbn1cbiJdfQ==