import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import { CreateFailure, CreateManyFailure, CreateManySuccess, CreateSuccess } from '../actions/create-actions';
import { DeleteFailure, DeleteManyFailure, DeleteManySuccess, DeleteSuccess } from '../actions/delete-actions';
import { DeleteByKeyFailure, DeleteByKeySuccess, DeleteManyByKeysFailure, DeleteManyByKeysSuccess } from '../actions/delete-by-key-actions';
import { Deselected, DeselectedMany } from '../actions/deselection-actions';
import { Changed, Edited, EditedByKey, EditEnded } from '../actions/edit-actions';
import { LoadFailure, LoadSuccess } from '../actions/load-actions';
import { LoadAllFailure, LoadAllSuccess } from '../actions/load-all-actions';
import { LoadManyFailure, LoadManySuccess } from '../actions/load-many-actions';
import { LoadPageFailure, LoadPageSuccess } from '../actions/load-page-actions';
import { LoadRangeFailure, LoadRangeSuccess } from '../actions/load-range-actions';
import { ReplaceFailure, ReplaceManyFailure, ReplaceManySuccess, ReplaceSuccess } from '../actions/replace-actions';
import { Selected, SelectedMany, SelectedMore } from '../actions/selection-actions';
import { UpdateFailure, UpdateManyFailure, UpdateManySuccess, UpdateSuccess } from '../actions/update-actions';
import { UpsertFailure, UpsertManyFailure, UpsertManySuccess, UpsertSuccess } from '../actions/upsert-actions';
import { shouldApplyEffect } from '../decorators/entity-operators';
import { NgrxAutoEntityService } from '../service/service';
import * as i0 from "@angular/core";
import * as i1 from "../service/service";
export const handleError = (error, errorAction, methodName) => {
    if (error.err instanceof TypeError) {
        console.error(`[NGRX-AE] ! NgRxAutoEntityService Error: Unable to locate required method (${methodName}) on the entity service configured for the ${error.info.modelName} entity.`, error.err);
    }
    else if (error.info && error.message) {
        console.error(`[NGRX-AE] ! NgRxAutoEntityService Error: Unable to invoke required operations (${methodName}) on the entity service configured for the ${error.info.modelName} entity.`, error.message);
    }
    else if (error.message) {
        console.error(`[NGRX-AE] ! NgRxAutoEntityService Error: Unable to invoke required operations (${methodName}) on the entity service configured for the ${error.info.modelName} entity.`, error.message);
    }
    else {
        console.error(error);
    }
    return of(errorAction);
};
/**
 * Rxjs operators that are intended to be called by client-defined Effects class
 */
export class EntityOperators {
    constructor(entityService) {
        this.entityService = entityService;
    }
    load() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, keys, criteria, correlationId }) => {
            return this.entityService.load(info, keys, criteria).pipe(map((ref) => new LoadSuccess(ref.info.modelType, ref.entity, keys, criteria, correlationId)), catchError((error) => handleError(error, new LoadFailure(error.info.modelType, error.err, keys, criteria, correlationId), 'load')));
        }));
    }
    loadMany() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, criteria, correlationId }) => {
            return this.entityService.loadMany(info, criteria).pipe(map((ref) => new LoadManySuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new LoadManyFailure(error.info.modelType, error.err, criteria, correlationId), 'loadMany')));
        }));
    }
    loadAll() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, criteria, correlationId }) => {
            return this.entityService.loadAll(info, criteria).pipe(map((ref) => new LoadAllSuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new LoadAllFailure(error.info.modelType, error.err, criteria, correlationId), 'loadAll')));
        }));
    }
    loadPage() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, page, criteria, correlationId }) => {
            return this.entityService.loadPage(info, page, criteria).pipe(map((ref) => new LoadPageSuccess(ref.info.modelType, ref.entity, ref.pageInfo, criteria, correlationId)), catchError((error) => handleError(error, new LoadPageFailure(error.info.modelType, error.err, page, criteria, correlationId), 'loadPage')));
        }));
    }
    loadRange() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, range, criteria, correlationId }) => {
            return this.entityService.loadRange(info, range, criteria).pipe(map((ref) => new LoadRangeSuccess(ref.info.modelType, ref.entity, ref.rangeInfo, criteria, correlationId)), catchError((error) => handleError(error, new LoadRangeFailure(error.info.modelType, error.err, range, criteria, correlationId), 'loadRange')));
        }));
    }
    create() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entity, criteria, correlationId }) => {
            return this.entityService.create(info, entity, criteria).pipe(map((ref) => new CreateSuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new CreateFailure(error.info.modelType, error.err, entity, criteria, correlationId), 'create')));
        }));
    }
    createMany() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entities, criteria, correlationId }) => {
            return this.entityService.createMany(info, entities, criteria).pipe(map((ref) => new CreateManySuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new CreateManyFailure(error.info.modelType, error.err, entities, criteria, correlationId), 'createMany')));
        }));
    }
    update() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entity, criteria, correlationId }) => {
            return this.entityService.update(info, entity, criteria).pipe(map((ref) => new UpdateSuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new UpdateFailure(error.info.modelType, error.err, entity, criteria, correlationId), 'update')));
        }));
    }
    updateMany() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entities, criteria, correlationId }) => {
            return this.entityService.updateMany(info, entities, criteria).pipe(map((ref) => new UpdateManySuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new UpdateManyFailure(error.info.modelType, error.err, entities, criteria, correlationId), 'updateMany')));
        }));
    }
    upsert() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entity, criteria, correlationId }) => {
            return this.entityService.upsert(info, entity, criteria).pipe(map((ref) => new UpsertSuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new UpsertFailure(error.info.modelType, error.err, entity, criteria, correlationId), 'upsert')));
        }));
    }
    upsertMany() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entities, criteria, correlationId }) => {
            return this.entityService.upsertMany(info, entities, criteria).pipe(map((ref) => new UpsertManySuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new UpsertManyFailure(error.info.modelType, error.err, entities, criteria, correlationId), 'upsertMany')));
        }));
    }
    replace() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entity, criteria, correlationId }) => {
            return this.entityService.replace(info, entity, criteria).pipe(map((ref) => new ReplaceSuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new ReplaceFailure(error.info.modelType, error.err, entity, criteria, correlationId), 'replace')));
        }));
    }
    replaceMany() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entities, criteria, correlationId }) => {
            return this.entityService.replaceMany(info, entities, criteria).pipe(map((ref) => new ReplaceManySuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new ReplaceManyFailure(error.info.modelType, error.err, entities, criteria, correlationId), 'replaceMany')));
        }));
    }
    delete() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entity, criteria, correlationId }) => {
            return this.entityService.delete(info, entity, criteria).pipe(map((ref) => new DeleteSuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new DeleteFailure(error.info.modelType, error.err, entity, criteria, correlationId), 'delete')));
        }));
    }
    deleteMany() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, entities, criteria, correlationId }) => {
            return this.entityService.deleteMany(info, entities, criteria).pipe(map((ref) => new DeleteManySuccess(ref.info.modelType, ref.entity, criteria, correlationId)), catchError((error) => handleError(error, new DeleteManyFailure(error.info.modelType, error.err, entities, criteria, correlationId), 'deleteMany')));
        }));
    }
    deleteByKey() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, key, criteria, correlationId }) => {
            return this.entityService.deleteByKey(info, key, criteria).pipe(map((ref) => new DeleteByKeySuccess(ref.info.modelType, ref.entityIdentity, criteria, correlationId)), catchError((error) => handleError(error, new DeleteByKeyFailure(error.info.modelType, error.err, key, criteria, correlationId), 'deleteByKey')));
        }));
    }
    deleteManyByKey() {
        return (source) => source.pipe(shouldApplyEffect(), mergeMap(({ info, keys, criteria, correlationId }) => {
            return this.entityService.deleteManyByKey(info, keys, criteria).pipe(map((ref) => new DeleteManyByKeysSuccess(ref.info.modelType, ref.entityIdentities, criteria, correlationId)), catchError((error) => handleError(error, new DeleteManyByKeysFailure(error.info.modelType, error.err, keys, criteria, correlationId), 'deleteManyByKey')));
        }));
    }
    select() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entity, correlationId }) => new Selected(info.modelType, entity, correlationId)));
    }
    selectByKey() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entityKey, correlationId }) => new Selected(info.modelType, entityKey, correlationId)));
    }
    selectMany() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entities, correlationId }) => new SelectedMany(info.modelType, entities, correlationId)));
    }
    selectMore() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entities, correlationId }) => new SelectedMore(info.modelType, entities, correlationId)));
    }
    selectManyByKeys() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entitiesKeys, correlationId }) => new SelectedMany(info.modelType, entitiesKeys, correlationId)));
    }
    selectMoreByKeys() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entitiesKeys, correlationId }) => new SelectedMore(info.modelType, entitiesKeys, correlationId)));
    }
    deselect() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, correlationId }) => new Deselected(info.modelType, correlationId)));
    }
    deselectMany() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entities, correlationId }) => new DeselectedMany(info.modelType, entities, correlationId)));
    }
    deselectManyByKeys() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entitiesKeys, correlationId }) => new DeselectedMany(info.modelType, entitiesKeys, correlationId)));
    }
    deselectAll() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, correlationId }) => new DeselectedMany(info.modelType, null, correlationId)));
    }
    editNew() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entity, correlationId }) => new Edited(info.modelType, entity, correlationId)));
    }
    edit() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entity, correlationId }) => new Edited(info.modelType, entity, correlationId)));
    }
    editByKey() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, key, correlationId }) => new EditedByKey(info.modelType, key, correlationId)));
    }
    change() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, entity, correlationId }) => new Changed(info.modelType, entity, correlationId)));
    }
    endEdit() {
        return (source) => source.pipe(shouldApplyEffect(), map(({ info, correlationId }) => new EditEnded(info.modelType, correlationId)));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityOperators, deps: [{ token: i1.NgrxAutoEntityService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityOperators }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityOperators, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.NgrxAutoEntityService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL2VmZmVjdHMvb3BlcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQVUsYUFBYSxFQUFjLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25JLE9BQU8sRUFBVSxhQUFhLEVBQWMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbkksT0FBTyxFQUVMLGtCQUFrQixFQUNsQixrQkFBa0IsRUFFbEIsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN4QixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFBeUIsVUFBVSxFQUFFLGNBQWMsRUFBb0MsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNySSxPQUFPLEVBQVUsT0FBTyxFQUFtQixNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBb0IsTUFBTSx5QkFBeUIsQ0FBQztBQUM3SCxPQUFPLEVBQVEsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pFLE9BQU8sRUFBVyxjQUFjLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEYsT0FBTyxFQUFZLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRixPQUFPLEVBQVksZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFGLE9BQU8sRUFBYSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlGLE9BQU8sRUFBVyxjQUFjLEVBQWUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDMUksT0FBTyxFQUdMLFFBQVEsRUFDUixZQUFZLEVBQ1osWUFBWSxFQUtiLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUFVLGFBQWEsRUFBYyxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuSSxPQUFPLEVBQVUsYUFBYSxFQUFjLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25JLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRW5FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFHM0QsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3pCLEtBQW1CLEVBQ25CLFdBQXlCLEVBQ3pCLFVBQWtCLEVBQ1EsRUFBRTtJQUM1QixJQUFJLEtBQUssQ0FBQyxHQUFHLFlBQVksU0FBUyxFQUFFLENBQUM7UUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FDWCw4RUFBOEUsVUFBVSw4Q0FBOEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLFVBQVUsRUFDcEssS0FBSyxDQUFDLEdBQUcsQ0FDVixDQUFDO0lBQ0osQ0FBQztTQUFNLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkMsT0FBTyxDQUFDLEtBQUssQ0FDWCxrRkFBa0YsVUFBVSw4Q0FBOEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLFVBQVUsRUFDeEssS0FBSyxDQUFDLE9BQU8sQ0FDZCxDQUFDO0lBQ0osQ0FBQztTQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQ1gsa0ZBQWtGLFVBQVUsOENBQThDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxVQUFVLEVBQ3hLLEtBQUssQ0FBQyxPQUFPLENBQ2QsQ0FBQztJQUNKLENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFFSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixZQUFvQixhQUFvQztRQUFwQyxrQkFBYSxHQUFiLGFBQWEsQ0FBdUI7SUFBRyxDQUFDO0lBRTVELElBQUk7UUFDRixPQUFPLENBQUMsTUFBZ0MsRUFBRSxFQUFFLENBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQ25ELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ3ZELEdBQUcsQ0FBQyxDQUFDLEdBQXVCLEVBQUUsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUN4SCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLFdBQVcsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQ3BILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sQ0FBQyxNQUFvQyxFQUFFLEVBQUUsQ0FDOUMsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUM3QyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ3JELEdBQUcsQ0FBQyxDQUFDLEdBQXlCLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBZSxDQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDLEVBQ3hILFVBQVUsQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRSxDQUNqQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksZUFBZSxDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUN0SCxDQUNGLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLENBQUMsTUFBbUMsRUFBRSxFQUFFLENBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDN0MsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNwRCxHQUFHLENBQUMsQ0FBQyxHQUF5QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGNBQWMsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUN2SCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGNBQWMsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FDcEgsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxDQUFDLE1BQW9DLEVBQUUsRUFBRSxDQUM5QyxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUMzRCxHQUFHLENBQ0QsQ0FBQyxHQUEyQixFQUFFLEVBQUUsQ0FDOUIsSUFBSSxlQUFlLENBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDckcsRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGVBQWUsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQzVILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sQ0FBQyxNQUFxQyxFQUFFLEVBQUUsQ0FDL0MsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDcEQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDN0QsR0FBRyxDQUNELENBQUMsR0FBNEIsRUFBRSxFQUFFLENBQy9CLElBQUksZ0JBQWdCLENBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDdkcsRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGdCQUFnQixDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FDL0gsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLE1BQWtDLEVBQUUsRUFBRSxDQUM1QyxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNuRSxHQUFHLENBQUMsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGFBQWEsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUNwSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGFBQWEsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQzFILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxNQUFzQyxFQUFFLEVBQUUsQ0FDaEQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBUyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsR0FBeUIsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBaUIsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUMxSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUNULEtBQUssRUFDTCxJQUFJLGlCQUFpQixDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDakcsWUFBWSxDQUNiLENBQ0YsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLE1BQWtDLEVBQUUsRUFBRSxDQUM1QyxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNuRSxHQUFHLENBQUMsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGFBQWEsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUNwSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGFBQWEsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQzFILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxNQUFzQyxFQUFFLEVBQUUsQ0FDaEQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBUyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsR0FBeUIsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBaUIsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUMxSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUNULEtBQUssRUFDTCxJQUFJLGlCQUFpQixDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDakcsWUFBWSxDQUNiLENBQ0YsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLE1BQWtDLEVBQUUsRUFBRSxDQUM1QyxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNuRSxHQUFHLENBQUMsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGFBQWEsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUNwSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGFBQWEsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQzFILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxNQUFzQyxFQUFFLEVBQUUsQ0FDaEQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBUyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsR0FBeUIsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBaUIsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUMxSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUNULEtBQUssRUFDTCxJQUFJLGlCQUFpQixDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDakcsWUFBWSxDQUNiLENBQ0YsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxDQUFDLE1BQW1DLEVBQUUsRUFBRSxDQUM3QyxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNwRSxHQUFHLENBQUMsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGNBQWMsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUNySCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGNBQWMsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQzVILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sQ0FBQyxNQUF1QyxFQUFFLEVBQUUsQ0FDakQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBUyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDMUUsR0FBRyxDQUFDLENBQUMsR0FBeUIsRUFBRSxFQUFFLENBQUMsSUFBSSxrQkFBa0IsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUMzSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUNULEtBQUssRUFDTCxJQUFJLGtCQUFrQixDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDbEcsYUFBYSxDQUNkLENBQ0YsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLE1BQWtDLEVBQUUsRUFBRSxDQUM1QyxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUMzRCxHQUFHLENBQUMsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGFBQWEsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUNwSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLGFBQWEsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQzFILENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxNQUFzQyxFQUFFLEVBQUUsQ0FDaEQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBUyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsR0FBeUIsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBaUIsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUMxSCxVQUFVLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDakMsV0FBVyxDQUNULEtBQUssRUFDTCxJQUFJLGlCQUFpQixDQUFTLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsRUFDakcsWUFBWSxDQUNiLENBQ0YsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxDQUFDLE1BQXVDLEVBQUUsRUFBRSxDQUNqRCxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtZQUNsRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFTLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNyRSxHQUFHLENBQ0QsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLGtCQUFrQixDQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUM3SCxFQUNELFVBQVUsQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRSxDQUNqQyxXQUFXLENBQ1QsS0FBSyxFQUNMLElBQUksa0JBQWtCLENBQVMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxFQUM3RixhQUFhLENBQ2QsQ0FDRixDQUNGLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLENBQUMsTUFBNEMsRUFBRSxFQUFFLENBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQ25ELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQVMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQzFFLEdBQUcsQ0FDRCxDQUFDLEdBQXlCLEVBQUUsRUFBRSxDQUM1QixJQUFJLHVCQUF1QixDQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQ3pHLEVBQ0QsVUFBVSxDQUFDLENBQUMsS0FBbUIsRUFBRSxFQUFFLENBQ2pDLFdBQVcsQ0FDVCxLQUFLLEVBQ0wsSUFBSSx1QkFBdUIsQ0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQ25HLGlCQUFpQixDQUNsQixDQUNGLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sQ0FBQyxNQUFrQyxFQUFFLEVBQUUsQ0FDNUMsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQ3RHLENBQUM7SUFDTixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sQ0FBQyxNQUF1QyxFQUFFLEVBQUUsQ0FDakQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQzVHLENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxNQUFzQyxFQUFFLEVBQUUsQ0FDaEQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQzlHLENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxNQUFzQyxFQUFFLEVBQUUsQ0FDaEQsTUFBTSxDQUFDLElBQUksQ0FDVCxpQkFBaUIsRUFBRSxFQUNuQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQzlHLENBQUM7SUFDTixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxDQUFDLE1BQTRDLEVBQUUsRUFBRSxDQUN0RCxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxZQUFZLENBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FDdEgsQ0FBQztJQUNOLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLENBQUMsTUFBNEMsRUFBRSxFQUFFLENBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBUyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUN0SCxDQUFDO0lBQ04sQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLENBQUMsTUFBb0MsRUFBRSxFQUFFLENBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksVUFBVSxDQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FDeEYsQ0FBQztJQUNOLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxDQUFDLE1BQXdDLEVBQUUsRUFBRSxDQUNsRCxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxjQUFjLENBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FDaEgsQ0FBQztJQUNOLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsT0FBTyxDQUFDLE1BQThDLEVBQUUsRUFBRSxDQUN4RCxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxjQUFjLENBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FDeEgsQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxDQUFDLE1BQXVDLEVBQUUsRUFBRSxDQUNqRCxNQUFNLENBQUMsSUFBSSxDQUNULGlCQUFpQixFQUFFLEVBQ25CLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGNBQWMsQ0FBUyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUNsRyxDQUFDO0lBQ04sQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLENBQUMsTUFBbUMsRUFBRSxFQUFFLENBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBUyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUNwRyxDQUFDO0lBQ04sQ0FBQztJQUVELElBQUk7UUFDRixPQUFPLENBQUMsTUFBZ0MsRUFBRSxFQUFFLENBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBUyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUNwRyxDQUFDO0lBQ04sQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLENBQUMsTUFBcUMsRUFBRSxFQUFFLENBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLFdBQVcsQ0FBUyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUNuRyxDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLENBQUMsTUFBa0MsRUFBRSxFQUFFLENBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBUyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUNyRyxDQUFDO0lBQ04sQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLENBQUMsTUFBbUMsRUFBRSxFQUFFLENBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsaUJBQWlCLEVBQUUsRUFDbkIsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksU0FBUyxDQUFTLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FDdkYsQ0FBQztJQUNOLENBQUM7aUlBL1pVLGVBQWU7cUlBQWYsZUFBZTs7MkZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ3JlYXRlLCBDcmVhdGVGYWlsdXJlLCBDcmVhdGVNYW55LCBDcmVhdGVNYW55RmFpbHVyZSwgQ3JlYXRlTWFueVN1Y2Nlc3MsIENyZWF0ZVN1Y2Nlc3MgfSBmcm9tICcuLi9hY3Rpb25zL2NyZWF0ZS1hY3Rpb25zJztcbmltcG9ydCB7IERlbGV0ZSwgRGVsZXRlRmFpbHVyZSwgRGVsZXRlTWFueSwgRGVsZXRlTWFueUZhaWx1cmUsIERlbGV0ZU1hbnlTdWNjZXNzLCBEZWxldGVTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9kZWxldGUtYWN0aW9ucyc7XG5pbXBvcnQge1xuICBEZWxldGVCeUtleSxcbiAgRGVsZXRlQnlLZXlGYWlsdXJlLFxuICBEZWxldGVCeUtleVN1Y2Nlc3MsXG4gIERlbGV0ZU1hbnlCeUtleXMsXG4gIERlbGV0ZU1hbnlCeUtleXNGYWlsdXJlLFxuICBEZWxldGVNYW55QnlLZXlzU3VjY2Vzc1xufSBmcm9tICcuLi9hY3Rpb25zL2RlbGV0ZS1ieS1rZXktYWN0aW9ucyc7XG5pbXBvcnQgeyBEZXNlbGVjdCwgRGVzZWxlY3RBbGwsIERlc2VsZWN0ZWQsIERlc2VsZWN0ZWRNYW55LCBEZXNlbGVjdE1hbnksIERlc2VsZWN0TWFueUJ5S2V5cyB9IGZyb20gJy4uL2FjdGlvbnMvZGVzZWxlY3Rpb24tYWN0aW9ucyc7XG5pbXBvcnQgeyBDaGFuZ2UsIENoYW5nZWQsIEVkaXQsIEVkaXRCeUtleSwgRWRpdGVkLCBFZGl0ZWRCeUtleSwgRWRpdEVuZGVkLCBFZGl0TmV3LCBFbmRFZGl0IH0gZnJvbSAnLi4vYWN0aW9ucy9lZGl0LWFjdGlvbnMnO1xuaW1wb3J0IHsgTG9hZCwgTG9hZEZhaWx1cmUsIExvYWRTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLWFjdGlvbnMnO1xuaW1wb3J0IHsgTG9hZEFsbCwgTG9hZEFsbEZhaWx1cmUsIExvYWRBbGxTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLWFsbC1hY3Rpb25zJztcbmltcG9ydCB7IExvYWRNYW55LCBMb2FkTWFueUZhaWx1cmUsIExvYWRNYW55U3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvbG9hZC1tYW55LWFjdGlvbnMnO1xuaW1wb3J0IHsgTG9hZFBhZ2UsIExvYWRQYWdlRmFpbHVyZSwgTG9hZFBhZ2VTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLXBhZ2UtYWN0aW9ucyc7XG5pbXBvcnQgeyBMb2FkUmFuZ2UsIExvYWRSYW5nZUZhaWx1cmUsIExvYWRSYW5nZVN1Y2Nlc3MgfSBmcm9tICcuLi9hY3Rpb25zL2xvYWQtcmFuZ2UtYWN0aW9ucyc7XG5pbXBvcnQgeyBSZXBsYWNlLCBSZXBsYWNlRmFpbHVyZSwgUmVwbGFjZU1hbnksIFJlcGxhY2VNYW55RmFpbHVyZSwgUmVwbGFjZU1hbnlTdWNjZXNzLCBSZXBsYWNlU3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvcmVwbGFjZS1hY3Rpb25zJztcbmltcG9ydCB7XG4gIFNlbGVjdCxcbiAgU2VsZWN0QnlLZXksXG4gIFNlbGVjdGVkLFxuICBTZWxlY3RlZE1hbnksXG4gIFNlbGVjdGVkTW9yZSxcbiAgU2VsZWN0TWFueSxcbiAgU2VsZWN0TWFueUJ5S2V5cyxcbiAgU2VsZWN0TW9yZSxcbiAgU2VsZWN0TW9yZUJ5S2V5c1xufSBmcm9tICcuLi9hY3Rpb25zL3NlbGVjdGlvbi1hY3Rpb25zJztcbmltcG9ydCB7IFVwZGF0ZSwgVXBkYXRlRmFpbHVyZSwgVXBkYXRlTWFueSwgVXBkYXRlTWFueUZhaWx1cmUsIFVwZGF0ZU1hbnlTdWNjZXNzLCBVcGRhdGVTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy91cGRhdGUtYWN0aW9ucyc7XG5pbXBvcnQgeyBVcHNlcnQsIFVwc2VydEZhaWx1cmUsIFVwc2VydE1hbnksIFVwc2VydE1hbnlGYWlsdXJlLCBVcHNlcnRNYW55U3VjY2VzcywgVXBzZXJ0U3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvdXBzZXJ0LWFjdGlvbnMnO1xuaW1wb3J0IHsgc2hvdWxkQXBwbHlFZmZlY3QgfSBmcm9tICcuLi9kZWNvcmF0b3JzL2VudGl0eS1vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSUVudGl0eUlkZW50aXRpZXNSZWYsIElFbnRpdHlJZGVudGl0eVJlZiwgSUVudGl0eVBhZ2VSZWYsIElFbnRpdHlSYW5nZVJlZiwgSUVudGl0eVJlZiB9IGZyb20gJy4uL3NlcnZpY2UvcmVmcyc7XG5pbXBvcnQgeyBOZ3J4QXV0b0VudGl0eVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3NlcnZpY2UnO1xuaW1wb3J0IHsgSUVudGl0eUVycm9yIH0gZnJvbSAnLi4vc2VydmljZS93cmFwcGVyLW1vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVFcnJvciA9IDxUTW9kZWwsIFRFcnJvckFjdGlvbj4oXG4gIGVycm9yOiBJRW50aXR5RXJyb3IsXG4gIGVycm9yQWN0aW9uOiBURXJyb3JBY3Rpb24sXG4gIG1ldGhvZE5hbWU6IHN0cmluZ1xuKTogT2JzZXJ2YWJsZTxURXJyb3JBY3Rpb24+ID0+IHtcbiAgaWYgKGVycm9yLmVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgW05HUlgtQUVdICEgTmdSeEF1dG9FbnRpdHlTZXJ2aWNlIEVycm9yOiBVbmFibGUgdG8gbG9jYXRlIHJlcXVpcmVkIG1ldGhvZCAoJHttZXRob2ROYW1lfSkgb24gdGhlIGVudGl0eSBzZXJ2aWNlIGNvbmZpZ3VyZWQgZm9yIHRoZSAke2Vycm9yLmluZm8ubW9kZWxOYW1lfSBlbnRpdHkuYCxcbiAgICAgIGVycm9yLmVyclxuICAgICk7XG4gIH0gZWxzZSBpZiAoZXJyb3IuaW5mbyAmJiBlcnJvci5tZXNzYWdlKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGBbTkdSWC1BRV0gISBOZ1J4QXV0b0VudGl0eVNlcnZpY2UgRXJyb3I6IFVuYWJsZSB0byBpbnZva2UgcmVxdWlyZWQgb3BlcmF0aW9ucyAoJHttZXRob2ROYW1lfSkgb24gdGhlIGVudGl0eSBzZXJ2aWNlIGNvbmZpZ3VyZWQgZm9yIHRoZSAke2Vycm9yLmluZm8ubW9kZWxOYW1lfSBlbnRpdHkuYCxcbiAgICAgIGVycm9yLm1lc3NhZ2VcbiAgICApO1xuICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYFtOR1JYLUFFXSAhIE5nUnhBdXRvRW50aXR5U2VydmljZSBFcnJvcjogVW5hYmxlIHRvIGludm9rZSByZXF1aXJlZCBvcGVyYXRpb25zICgke21ldGhvZE5hbWV9KSBvbiB0aGUgZW50aXR5IHNlcnZpY2UgY29uZmlndXJlZCBmb3IgdGhlICR7ZXJyb3IuaW5mby5tb2RlbE5hbWV9IGVudGl0eS5gLFxuICAgICAgZXJyb3IubWVzc2FnZVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cbiAgcmV0dXJuIG9mKGVycm9yQWN0aW9uKTtcbn07XG5cbi8qKlxuICogUnhqcyBvcGVyYXRvcnMgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGJ5IGNsaWVudC1kZWZpbmVkIEVmZmVjdHMgY2xhc3NcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVudGl0eU9wZXJhdG9ycyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZW50aXR5U2VydmljZTogTmdyeEF1dG9FbnRpdHlTZXJ2aWNlKSB7fVxuXG4gIGxvYWQ8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxMb2FkPFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIGtleXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmxvYWQoaW5mbywga2V5cywgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlZjogSUVudGl0eVJlZjxUTW9kZWw+KSA9PiBuZXcgTG9hZFN1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHksIGtleXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgbmV3IExvYWRGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwga2V5cywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpLCAnbG9hZCcpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBsb2FkTWFueTxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPExvYWRNYW55PFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmxvYWRNYW55KGluZm8sIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZWY6IElFbnRpdHlSZWY8VE1vZGVsW10+KSA9PiBuZXcgTG9hZE1hbnlTdWNjZXNzPFRNb2RlbD4ocmVmLmluZm8ubW9kZWxUeXBlLCByZWYuZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCkpLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IElFbnRpdHlFcnJvcikgPT5cbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIG5ldyBMb2FkTWFueUZhaWx1cmU8VE1vZGVsPihlcnJvci5pbmZvLm1vZGVsVHlwZSwgZXJyb3IuZXJyLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksICdsb2FkTWFueScpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBsb2FkQWxsPFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8TG9hZEFsbDxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtZXJnZU1hcCgoeyBpbmZvLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5U2VydmljZS5sb2FkQWxsKGluZm8sIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZWY6IElFbnRpdHlSZWY8VE1vZGVsW10+KSA9PiBuZXcgTG9hZEFsbFN1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHksIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgbmV3IExvYWRBbGxGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpLCAnbG9hZEFsbCcpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBsb2FkUGFnZTxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPExvYWRQYWdlPFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIHBhZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmxvYWRQYWdlKGluZm8sIHBhZ2UsIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAocmVmOiBJRW50aXR5UGFnZVJlZjxUTW9kZWw+KSA9PlxuICAgICAgICAgICAgICAgIG5ldyBMb2FkUGFnZVN1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHksIHJlZi5wYWdlSW5mbywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IElFbnRpdHlFcnJvcikgPT5cbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIG5ldyBMb2FkUGFnZUZhaWx1cmU8VE1vZGVsPihlcnJvci5pbmZvLm1vZGVsVHlwZSwgZXJyb3IuZXJyLCBwYWdlLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksICdsb2FkUGFnZScpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBsb2FkUmFuZ2U8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxMb2FkUmFuZ2U8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywgcmFuZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmxvYWRSYW5nZShpbmZvLCByYW5nZSwgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgIChyZWY6IElFbnRpdHlSYW5nZVJlZjxUTW9kZWw+KSA9PlxuICAgICAgICAgICAgICAgIG5ldyBMb2FkUmFuZ2VTdWNjZXNzPFRNb2RlbD4ocmVmLmluZm8ubW9kZWxUeXBlLCByZWYuZW50aXR5LCByZWYucmFuZ2VJbmZvLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgbmV3IExvYWRSYW5nZUZhaWx1cmU8VE1vZGVsPihlcnJvci5pbmZvLm1vZGVsVHlwZSwgZXJyb3IuZXJyLCByYW5nZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpLCAnbG9hZFJhbmdlJylcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIGNyZWF0ZTxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPENyZWF0ZTxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtZXJnZU1hcCgoeyBpbmZvLCBlbnRpdHksIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmNyZWF0ZTxUTW9kZWw+KGluZm8sIGVudGl0eSwgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlZjogSUVudGl0eVJlZjxUTW9kZWw+KSA9PiBuZXcgQ3JlYXRlU3VjY2VzczxUTW9kZWw+KHJlZi5pbmZvLm1vZGVsVHlwZSwgcmVmLmVudGl0eSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBJRW50aXR5RXJyb3IpID0+XG4gICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCBuZXcgQ3JlYXRlRmFpbHVyZTxUTW9kZWw+KGVycm9yLmluZm8ubW9kZWxUeXBlLCBlcnJvci5lcnIsIGVudGl0eSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpLCAnY3JlYXRlJylcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIGNyZWF0ZU1hbnk8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxDcmVhdGVNYW55PFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5U2VydmljZS5jcmVhdGVNYW55PFRNb2RlbD4oaW5mbywgZW50aXRpZXMsIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZWY6IElFbnRpdHlSZWY8VE1vZGVsW10+KSA9PiBuZXcgQ3JlYXRlTWFueVN1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHksIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBuZXcgQ3JlYXRlTWFueUZhaWx1cmU8VE1vZGVsPihlcnJvci5pbmZvLm1vZGVsVHlwZSwgZXJyb3IuZXJyLCBlbnRpdGllcywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpLFxuICAgICAgICAgICAgICAgICdjcmVhdGVNYW55J1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICB1cGRhdGU8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxVcGRhdGU8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywgZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5U2VydmljZS51cGRhdGU8VE1vZGVsPihpbmZvLCBlbnRpdHksIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZWY6IElFbnRpdHlSZWY8VE1vZGVsPikgPT4gbmV3IFVwZGF0ZVN1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHksIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgbmV3IFVwZGF0ZUZhaWx1cmU8VE1vZGVsPihlcnJvci5pbmZvLm1vZGVsVHlwZSwgZXJyb3IuZXJyLCBlbnRpdHksIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSwgJ3VwZGF0ZScpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICB1cGRhdGVNYW55PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8VXBkYXRlTWFueTxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtZXJnZU1hcCgoeyBpbmZvLCBlbnRpdGllcywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eVNlcnZpY2UudXBkYXRlTWFueTxUTW9kZWw+KGluZm8sIGVudGl0aWVzLCBjcml0ZXJpYSkucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVmOiBJRW50aXR5UmVmPFRNb2RlbFtdPikgPT4gbmV3IFVwZGF0ZU1hbnlTdWNjZXNzPFRNb2RlbD4ocmVmLmluZm8ubW9kZWxUeXBlLCByZWYuZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCkpLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IElFbnRpdHlFcnJvcikgPT5cbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgbmV3IFVwZGF0ZU1hbnlGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwgZW50aXRpZXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSxcbiAgICAgICAgICAgICAgICAndXBkYXRlTWFueSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgdXBzZXJ0PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8VXBzZXJ0PFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIGVudGl0eSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eVNlcnZpY2UudXBzZXJ0PFRNb2RlbD4oaW5mbywgZW50aXR5LCBjcml0ZXJpYSkucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVmOiBJRW50aXR5UmVmPFRNb2RlbD4pID0+IG5ldyBVcHNlcnRTdWNjZXNzPFRNb2RlbD4ocmVmLmluZm8ubW9kZWxUeXBlLCByZWYuZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCkpLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IElFbnRpdHlFcnJvcikgPT5cbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIG5ldyBVcHNlcnRGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwgZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksICd1cHNlcnQnKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgdXBzZXJ0TWFueTxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPFVwc2VydE1hbnk8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywgZW50aXRpZXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLnVwc2VydE1hbnk8VE1vZGVsPihpbmZvLCBlbnRpdGllcywgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlZjogSUVudGl0eVJlZjxUTW9kZWxbXT4pID0+IG5ldyBVcHNlcnRNYW55U3VjY2VzczxUTW9kZWw+KHJlZi5pbmZvLm1vZGVsVHlwZSwgcmVmLmVudGl0eSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBJRW50aXR5RXJyb3IpID0+XG4gICAgICAgICAgICAgIGhhbmRsZUVycm9yKFxuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIG5ldyBVcHNlcnRNYW55RmFpbHVyZTxUTW9kZWw+KGVycm9yLmluZm8ubW9kZWxUeXBlLCBlcnJvci5lcnIsIGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksXG4gICAgICAgICAgICAgICAgJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHJlcGxhY2U8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxSZXBsYWNlPFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIGVudGl0eSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eVNlcnZpY2UucmVwbGFjZTxUTW9kZWw+KGluZm8sIGVudGl0eSwgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlZjogSUVudGl0eVJlZjxUTW9kZWw+KSA9PiBuZXcgUmVwbGFjZVN1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHksIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgbmV3IFJlcGxhY2VGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwgZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksICdyZXBsYWNlJylcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHJlcGxhY2VNYW55PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8UmVwbGFjZU1hbnk8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywgZW50aXRpZXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLnJlcGxhY2VNYW55PFRNb2RlbD4oaW5mbywgZW50aXRpZXMsIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZWY6IElFbnRpdHlSZWY8VE1vZGVsW10+KSA9PiBuZXcgUmVwbGFjZU1hbnlTdWNjZXNzPFRNb2RlbD4ocmVmLmluZm8ubW9kZWxUeXBlLCByZWYuZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCkpLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IElFbnRpdHlFcnJvcikgPT5cbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgbmV3IFJlcGxhY2VNYW55RmFpbHVyZTxUTW9kZWw+KGVycm9yLmluZm8ubW9kZWxUeXBlLCBlcnJvci5lcnIsIGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksXG4gICAgICAgICAgICAgICAgJ3JlcGxhY2VNYW55J1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBkZWxldGU8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxEZWxldGU8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywgZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5U2VydmljZS5kZWxldGUoaW5mbywgZW50aXR5LCBjcml0ZXJpYSkucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVmOiBJRW50aXR5UmVmPFRNb2RlbD4pID0+IG5ldyBEZWxldGVTdWNjZXNzPFRNb2RlbD4ocmVmLmluZm8ubW9kZWxUeXBlLCByZWYuZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCkpLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IElFbnRpdHlFcnJvcikgPT5cbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIG5ldyBEZWxldGVGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwgZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksICdkZWxldGUnKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgZGVsZXRlTWFueTxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPERlbGV0ZU1hbnk8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywgZW50aXRpZXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmRlbGV0ZU1hbnk8VE1vZGVsPihpbmZvLCBlbnRpdGllcywgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlZjogSUVudGl0eVJlZjxUTW9kZWxbXT4pID0+IG5ldyBEZWxldGVNYW55U3VjY2VzczxUTW9kZWw+KHJlZi5pbmZvLm1vZGVsVHlwZSwgcmVmLmVudGl0eSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBJRW50aXR5RXJyb3IpID0+XG4gICAgICAgICAgICAgIGhhbmRsZUVycm9yKFxuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIG5ldyBEZWxldGVNYW55RmFpbHVyZTxUTW9kZWw+KGVycm9yLmluZm8ubW9kZWxUeXBlLCBlcnJvci5lcnIsIGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksXG4gICAgICAgICAgICAgICAgJ2RlbGV0ZU1hbnknXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIGRlbGV0ZUJ5S2V5PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8RGVsZXRlQnlLZXk8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWVyZ2VNYXAoKHsgaW5mbywga2V5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5U2VydmljZS5kZWxldGVCeUtleTxUTW9kZWw+KGluZm8sIGtleSwgY3JpdGVyaWEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgIChyZWY6IElFbnRpdHlJZGVudGl0eVJlZikgPT4gbmV3IERlbGV0ZUJ5S2V5U3VjY2VzczxUTW9kZWw+KHJlZi5pbmZvLm1vZGVsVHlwZSwgcmVmLmVudGl0eUlkZW50aXR5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBuZXcgRGVsZXRlQnlLZXlGYWlsdXJlPFRNb2RlbD4oZXJyb3IuaW5mby5tb2RlbFR5cGUsIGVycm9yLmVyciwga2V5LCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksXG4gICAgICAgICAgICAgICAgJ2RlbGV0ZUJ5S2V5J1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBkZWxldGVNYW55QnlLZXk8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxEZWxldGVNYW55QnlLZXlzPFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1lcmdlTWFwKCh7IGluZm8sIGtleXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmRlbGV0ZU1hbnlCeUtleTxUTW9kZWw+KGluZm8sIGtleXMsIGNyaXRlcmlhKS5waXBlKFxuICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAocmVmOiBJRW50aXR5SWRlbnRpdGllc1JlZikgPT5cbiAgICAgICAgICAgICAgICBuZXcgRGVsZXRlTWFueUJ5S2V5c1N1Y2Nlc3M8VE1vZGVsPihyZWYuaW5mby5tb2RlbFR5cGUsIHJlZi5lbnRpdHlJZGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSUVudGl0eUVycm9yKSA9PlxuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBuZXcgRGVsZXRlTWFueUJ5S2V5c0ZhaWx1cmU8VE1vZGVsPihlcnJvci5pbmZvLm1vZGVsVHlwZSwgZXJyb3IuZXJyLCBrZXlzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCksXG4gICAgICAgICAgICAgICAgJ2RlbGV0ZU1hbnlCeUtleSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgc2VsZWN0PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8U2VsZWN0PFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1hcCgoeyBpbmZvLCBlbnRpdHksIGNvcnJlbGF0aW9uSWQgfSkgPT4gbmV3IFNlbGVjdGVkPFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0eSwgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgc2VsZWN0QnlLZXk8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxTZWxlY3RCeUtleTxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtYXAoKHsgaW5mbywgZW50aXR5S2V5LCBjb3JyZWxhdGlvbklkIH0pID0+IG5ldyBTZWxlY3RlZDxUTW9kZWw+KGluZm8ubW9kZWxUeXBlLCBlbnRpdHlLZXksIGNvcnJlbGF0aW9uSWQpKVxuICAgICAgKTtcbiAgfVxuXG4gIHNlbGVjdE1hbnk8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxTZWxlY3RNYW55PFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1hcCgoeyBpbmZvLCBlbnRpdGllcywgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgU2VsZWN0ZWRNYW55PFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0aWVzLCBjb3JyZWxhdGlvbklkKSlcbiAgICAgICk7XG4gIH1cblxuICBzZWxlY3RNb3JlPFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8U2VsZWN0TW9yZTxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtYXAoKHsgaW5mbywgZW50aXRpZXMsIGNvcnJlbGF0aW9uSWQgfSkgPT4gbmV3IFNlbGVjdGVkTW9yZTxUTW9kZWw+KGluZm8ubW9kZWxUeXBlLCBlbnRpdGllcywgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgc2VsZWN0TWFueUJ5S2V5czxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPFNlbGVjdE1hbnlCeUtleXM8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWFwKCh7IGluZm8sIGVudGl0aWVzS2V5cywgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgU2VsZWN0ZWRNYW55PFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0aWVzS2V5cywgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgc2VsZWN0TW9yZUJ5S2V5czxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPFNlbGVjdE1vcmVCeUtleXM8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWFwKCh7IGluZm8sIGVudGl0aWVzS2V5cywgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgU2VsZWN0ZWRNb3JlPFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0aWVzS2V5cywgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgZGVzZWxlY3Q8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxEZXNlbGVjdDxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtYXAoKHsgaW5mbywgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgRGVzZWxlY3RlZDxUTW9kZWw+KGluZm8ubW9kZWxUeXBlLCBjb3JyZWxhdGlvbklkKSlcbiAgICAgICk7XG4gIH1cblxuICBkZXNlbGVjdE1hbnk8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxEZXNlbGVjdE1hbnk8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWFwKCh7IGluZm8sIGVudGl0aWVzLCBjb3JyZWxhdGlvbklkIH0pID0+IG5ldyBEZXNlbGVjdGVkTWFueTxUTW9kZWw+KGluZm8ubW9kZWxUeXBlLCBlbnRpdGllcywgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgZGVzZWxlY3RNYW55QnlLZXlzPFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8RGVzZWxlY3RNYW55QnlLZXlzPFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1hcCgoeyBpbmZvLCBlbnRpdGllc0tleXMsIGNvcnJlbGF0aW9uSWQgfSkgPT4gbmV3IERlc2VsZWN0ZWRNYW55PFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0aWVzS2V5cywgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgZGVzZWxlY3RBbGw8VE1vZGVsPigpIHtcbiAgICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxEZXNlbGVjdEFsbDxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtYXAoKHsgaW5mbywgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgRGVzZWxlY3RlZE1hbnk8VE1vZGVsPihpbmZvLm1vZGVsVHlwZSwgbnVsbCwgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgZWRpdE5ldzxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPEVkaXROZXc8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWFwKCh7IGluZm8sIGVudGl0eSwgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgRWRpdGVkPFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0eSwgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgZWRpdDxUTW9kZWw+KCkge1xuICAgIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPEVkaXQ8VE1vZGVsPj4pID0+XG4gICAgICBzb3VyY2UucGlwZShcbiAgICAgICAgc2hvdWxkQXBwbHlFZmZlY3QoKSxcbiAgICAgICAgbWFwKCh7IGluZm8sIGVudGl0eSwgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgRWRpdGVkPFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGVudGl0eSwgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgZWRpdEJ5S2V5PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8RWRpdEJ5S2V5PFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1hcCgoeyBpbmZvLCBrZXksIGNvcnJlbGF0aW9uSWQgfSkgPT4gbmV3IEVkaXRlZEJ5S2V5PFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGtleSwgY29ycmVsYXRpb25JZCkpXG4gICAgICApO1xuICB9XG5cbiAgY2hhbmdlPFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8Q2hhbmdlPFRNb2RlbD4+KSA9PlxuICAgICAgc291cmNlLnBpcGUoXG4gICAgICAgIHNob3VsZEFwcGx5RWZmZWN0KCksXG4gICAgICAgIG1hcCgoeyBpbmZvLCBlbnRpdHksIGNvcnJlbGF0aW9uSWQgfSkgPT4gbmV3IENoYW5nZWQ8VE1vZGVsPihpbmZvLm1vZGVsVHlwZSwgZW50aXR5LCBjb3JyZWxhdGlvbklkKSlcbiAgICAgICk7XG4gIH1cblxuICBlbmRFZGl0PFRNb2RlbD4oKSB7XG4gICAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8RW5kRWRpdDxUTW9kZWw+PikgPT5cbiAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICBzaG91bGRBcHBseUVmZmVjdCgpLFxuICAgICAgICBtYXAoKHsgaW5mbywgY29ycmVsYXRpb25JZCB9KSA9PiBuZXcgRWRpdEVuZGVkPFRNb2RlbD4oaW5mby5tb2RlbFR5cGUsIGNvcnJlbGF0aW9uSWQpKVxuICAgICAgKTtcbiAgfVxufVxuIl19