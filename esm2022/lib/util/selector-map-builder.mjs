import { createSelector } from '@ngrx/store';
import { mapToEditedEntity, mapToIsDirty } from '../selectors/edits.selectors';
import { mapToCustomSortedEntityArray, mapToEntityArray, mapToHasEntities, mapToHasNoEntities, mapToSortedEntityArray, mapToTotal } from '../selectors/entity.selectors';
import { mapToCurrentPage, mapToCurrentRange, mapToTotalPageable } from '../selectors/paging.selectors';
import { mapToEdits, mapToEntities, mapToIds, mapToPaging, mapToSelections, mapToTracking } from '../selectors/root.selectors';
import { mapToCurrentEntities, mapToCurrentEntitiesKeys, mapToCurrentEntity, mapToCurrentEntityKey } from '../selectors/selections.selectors';
import { mapToCreatedAt, mapToDeletedAt, mapToHasBeenLoaded, mapToIsDeleting, mapToIsLoading, mapToIsSaving, mapToLoadedAt, mapToLoadWasAttempted, mapToReplacedAt, mapToSavedAt, mapToUpdatedAt } from '../selectors/tracking.selectors';
// prettier-ignore
export const buildSelectorMap = (getState, type) => {
    class SelectorResolver {
        // State Roots:
        get selectEntities() {
            return createSelector(getState, mapToEntities);
        }
        get selectIds() {
            return createSelector(getState, mapToIds);
        }
        get selectSelections() {
            return createSelector(getState, mapToSelections);
        }
        get selectEdits() {
            return createSelector(getState, mapToEdits);
        }
        get selectPaging() {
            return createSelector(getState, mapToPaging);
        }
        get selectTracking() {
            return createSelector(getState, mapToTracking);
        }
        // Entity:
        get selectAll() {
            return createSelector(this.selectEntities, this.selectIds, mapToEntityArray);
        }
        get selectAllSorted() {
            return createSelector(this.selectAll, mapToSortedEntityArray(type));
        }
        get selectCustomSorted() {
            return createSelector(this.selectAll, mapToCustomSortedEntityArray(type));
        }
        get selectTotal() {
            return createSelector(this.selectIds, mapToTotal);
        }
        get selectHasEntities() {
            return createSelector(this.selectIds, mapToHasEntities);
        }
        get selectHasNoEntities() {
            return createSelector(this.selectIds, mapToHasNoEntities);
        }
        // Selections:
        get selectCurrentEntity() {
            return createSelector(this.selectSelections, this.selectEntities, mapToCurrentEntity);
        }
        get selectCurrentEntityKey() {
            return createSelector(this.selectSelections, mapToCurrentEntityKey);
        }
        get selectCurrentEntities() {
            return createSelector(this.selectSelections, this.selectEntities, mapToCurrentEntities);
        }
        get selectCurrentEntitiesKeys() {
            return createSelector(this.selectSelections, mapToCurrentEntitiesKeys);
        }
        // Edits:
        get selectEditedEntity() {
            return createSelector(this.selectEdits, mapToEditedEntity);
        }
        get selectIsDirty() {
            return createSelector(this.selectEdits, mapToIsDirty);
        }
        // Paging:
        get selectCurrentPage() {
            return createSelector(this.selectPaging, mapToCurrentPage);
        }
        get selectCurrentRange() {
            return createSelector(this.selectPaging, mapToCurrentRange);
        }
        get selectTotalPageable() {
            return createSelector(this.selectPaging, mapToTotalPageable);
        }
        // Tracking:
        get selectHasBeenLoaded() {
            return createSelector(this.selectTracking, mapToHasBeenLoaded);
        }
        get selectLoadWasAttempted() {
            return createSelector(this.selectTracking, mapToLoadWasAttempted);
        }
        get selectIsLoading() {
            return createSelector(this.selectTracking, mapToIsLoading);
        }
        get selectIsSaving() {
            return createSelector(this.selectTracking, mapToIsSaving);
        }
        get selectIsDeleting() {
            return createSelector(this.selectTracking, mapToIsDeleting);
        }
        get selectLoadedAt() {
            return createSelector(this.selectTracking, mapToLoadedAt);
        }
        get selectSavedAt() {
            return createSelector(this.selectTracking, mapToSavedAt);
        }
        get selectCreatedAt() {
            return createSelector(this.selectTracking, mapToCreatedAt);
        }
        get selectUpdatedAt() {
            return createSelector(this.selectTracking, mapToUpdatedAt);
        }
        get selectReplacedAt() {
            return createSelector(this.selectTracking, mapToReplacedAt);
        }
        get selectDeletedAt() {
            return createSelector(this.selectTracking, mapToDeletedAt);
        }
    }
    const resolver = new SelectorResolver();
    return resolver;
};
//# sourceMappingURL=data:application/json;base64,