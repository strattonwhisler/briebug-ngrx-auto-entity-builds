import { Clear } from '../actions/actions';
import { Create, CreateMany } from '../actions/create-actions';
import { Delete, DeleteMany } from '../actions/delete-actions';
import { DeleteByKey, DeleteManyByKeys } from '../actions/delete-by-key-actions';
import { Deselect, DeselectAll, DeselectMany, DeselectManyByKeys } from '../actions/deselection-actions';
import { Change, Edit, EditByKey, EditNew, EndEdit } from '../actions/edit-actions';
import { Load, LoadIfNecessary } from '../actions/load-actions';
import { LoadAll, LoadAllIfNecessary } from '../actions/load-all-actions';
import { LoadMany, LoadManyIfNecessary } from '../actions/load-many-actions';
import { LoadPage, LoadPageIfNecessary } from '../actions/load-page-actions';
import { LoadRange, LoadRangeIfNecessary } from '../actions/load-range-actions';
import { Replace, ReplaceMany } from '../actions/replace-actions';
import { Select, SelectByKey, SelectMany, SelectManyByKeys, SelectMore, SelectMoreByKeys } from '../actions/selection-actions';
import { Update, UpdateMany } from '../actions/update-actions';
import { Upsert, UpsertMany } from '../actions/upsert-actions';
/**
 * Builds a new facade class for the specified entity model and parent state.
 * @param selectors - the selector map for the specified entity
 */
export const buildFacade = (selectors) => {
    const BaseFacade = class Facade {
        constructor(modelType, store) {
            this.modelType = modelType;
            this.store = store;
            this.all$ = this.store.select(selectors.selectAll);
            this.sorted$ = this.store.select(selectors.selectAllSorted);
            this.entities$ = this.store.select(selectors.selectEntities);
            this.ids$ = this.store.select(selectors.selectIds);
            this.total$ = this.store.select(selectors.selectTotal);
            this.hasEntities$ = this.store.select(selectors.selectHasEntities);
            this.hasNoEntities$ = this.store.select(selectors.selectHasNoEntities);
            this.total$ = this.store.select(selectors.selectTotal);
            this.current$ = this.store.select(selectors.selectCurrentEntity);
            this.currentKey$ = this.store.select(selectors.selectCurrentEntityKey);
            this.currentSet$ = this.store.select(selectors.selectCurrentEntities);
            this.currentSetKeys$ = this.store.select(selectors.selectCurrentEntitiesKeys);
            this.edited$ = this.store.select(selectors.selectEditedEntity);
            this.isDirty$ = this.store.select(selectors.selectIsDirty);
            this.currentPage$ = this.store.select(selectors.selectCurrentPage);
            this.currentRange$ = this.store.select(selectors.selectCurrentRange);
            this.totalPageable$ = this.store.select(selectors.selectTotalPageable);
            this.hasBeenLoaded$ = this.store.select(selectors.selectHasBeenLoaded);
            this.loadWasAttempted$ = this.store.select(selectors.selectLoadWasAttempted);
            this.isLoading$ = this.store.select(selectors.selectIsLoading);
            this.isSaving$ = this.store.select(selectors.selectIsSaving);
            this.isDeleting$ = this.store.select(selectors.selectIsDeleting);
            this.loadedAt$ = this.store.select(selectors.selectLoadedAt);
            this.savedAt$ = this.store.select(selectors.selectSavedAt);
            this.createdAt$ = this.store.select(selectors.selectCreatedAt);
            this.updatedAt$ = this.store.select(selectors.selectUpdatedAt);
            this.replacedAt$ = this.store.select(selectors.selectReplacedAt);
            this.deletedAt$ = this.store.select(selectors.selectDeletedAt);
        }
        /**
         * @deprecated customSorted$ relies on selectors with props, which has fallen out of practice. Will be removed
         * in the next version of auto-entity.
         */
        customSorted$(name) {
            return this.store.select(selectors.selectCustomSorted, { name });
        }
        // endregion
        // region Activities
        select(entity, correlationId) {
            const action = new Select(this.modelType, entity, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        selectByKey(key, correlationId) {
            const action = new SelectByKey(this.modelType, key, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        selectMany(entities, correlationId) {
            const action = new SelectMany(this.modelType, entities, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        selectMore(entities, correlationId) {
            const action = new SelectMore(this.modelType, entities, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        selectManyByKeys(keys, correlationId) {
            const action = new SelectManyByKeys(this.modelType, keys, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        selectMoreByKeys(keys, correlationId) {
            const action = new SelectMoreByKeys(this.modelType, keys, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deselect(correlationId) {
            const action = new Deselect(this.modelType, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deselectMany(entities, correlationId) {
            const action = new DeselectMany(this.modelType, entities, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deselectManyByKeys(keys, correlationId) {
            const action = new DeselectManyByKeys(this.modelType, keys, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deselectAll(correlationId) {
            const action = new DeselectAll(this.modelType, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        edit(entity, correlationId) {
            const action = new Edit(this.modelType, entity, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        editNew(entity, correlationId) {
            const action = new EditNew(this.modelType, entity, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        editByKey(key, correlationId) {
            const action = new EditByKey(this.modelType, key, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        change(entity, correlationId) {
            const action = new Change(this.modelType, entity, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        endEdit(correlationId) {
            const action = new EndEdit(this.modelType, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        load(keys, criteria, correlationId) {
            const action = new Load(this.modelType, keys, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadIfNecessary(keys, criteria, maxAge, correlationId) {
            const action = new LoadIfNecessary(this.modelType, keys, maxAge, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadMany(criteria, correlationId) {
            const action = new LoadMany(this.modelType, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadManyIfNecessary(criteria, maxAge, correlationId) {
            const action = new LoadManyIfNecessary(this.modelType, maxAge, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadAll(criteria, correlationId) {
            const action = new LoadAll(this.modelType, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadAllIfNecessary(criteria, maxAge, correlationId) {
            const action = new LoadAllIfNecessary(this.modelType, maxAge, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadPage(page, criteria, correlationId) {
            const action = new LoadPage(this.modelType, page, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadPageIfNecessary(page, criteria, maxAge, correlationId) {
            const action = new LoadPageIfNecessary(this.modelType, page, maxAge, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadRange(range, criteria, correlationId) {
            const action = new LoadRange(this.modelType, range, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        loadRangeIfNecessary(range, criteria, maxAge, correlationId) {
            const action = new LoadRangeIfNecessary(this.modelType, range, maxAge, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        create(entity, criteria, correlationId) {
            const action = new Create(this.modelType, entity, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        createMany(entities, criteria, correlationId) {
            const action = new CreateMany(this.modelType, entities, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        update(entity, criteria, correlationId) {
            const action = new Update(this.modelType, entity, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        updateMany(entities, criteria, correlationId) {
            const action = new UpdateMany(this.modelType, entities, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        upsert(entity, criteria, correlationId) {
            const action = new Upsert(this.modelType, entity, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        upsertMany(entities, criteria, correlationId) {
            const action = new UpsertMany(this.modelType, entities, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        replace(entity, criteria, correlationId) {
            const action = new Replace(this.modelType, entity, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        replaceMany(entities, criteria, correlationId) {
            const action = new ReplaceMany(this.modelType, entities, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        delete(entity, criteria, correlationId) {
            const action = new Delete(this.modelType, entity, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deleteMany(entities, criteria, correlationId) {
            const action = new DeleteMany(this.modelType, entities, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deleteByKey(key, criteria, correlationId) {
            const action = new DeleteByKey(this.modelType, key, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        deleteManyByKeys(keys, criteria, correlationId) {
            const action = new DeleteManyByKeys(this.modelType, keys, criteria, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
        clear(correlationId) {
            const action = new Clear(this.modelType, correlationId);
            this.store.dispatch(action);
            return action.correlationId;
        }
    };
    return BaseFacade;
};
//# sourceMappingURL=data:application/json;base64,