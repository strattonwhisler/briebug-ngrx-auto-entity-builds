import { EntityActionTypes } from '../actions/action-types';
import { getKey } from '../decorators/key-util';
import { safeGetKey, setNewState } from './reduction.utils';
export const editsReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.EditNew: {
            const editEntity = action.entity || {};
            if (!editEntity) {
                return state;
            }
            const newState = {
                ...entityState,
                edits: {
                    editedEntity: { ...editEntity }, // TODO: Figure out a deep clone option here!!
                    isDirty: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.Edit: {
            const editEntity = action.entity;
            if (!editEntity) {
                return state;
            }
            const editedKey = safeGetKey(action, editEntity);
            const prevEditedKey = entityState.edits?.editedEntity && getKey(action, entityState.edits.editedEntity);
            if (editedKey === prevEditedKey) {
                return state;
            }
            const newState = {
                ...entityState,
                edits: {
                    editedEntity: { ...editEntity }, // TODO: Figure out a deep clone option here!!
                    isDirty: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.EditByKey: {
            const editedKey = action.key;
            const prevEditedKey = entityState.edits?.editedEntity && getKey(action, entityState.edits.editedEntity);
            if (!editedKey || editedKey === prevEditedKey) {
                return state;
            }
            const editEntity = entityState.entities[editedKey];
            if (!editEntity) {
                return state;
            }
            const newState = {
                ...entityState,
                edits: {
                    editedEntity: { ...editEntity }, // TODO: Figure out a deep clone option here!!
                    isDirty: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.Change: {
            const changeEntity = action.entity;
            if (!changeEntity || !entityState.edits?.editedEntity) {
                return state;
            }
            const newState = {
                ...entityState,
                edits: {
                    editedEntity: { ...changeEntity }, // TODO: Figure out a deep clone option here!!
                    isDirty: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.EndEdit: {
            if (entityState.edits?.editedEntity === undefined) {
                return state;
            }
            const newState = {
                ...entityState,
                edits: {
                    editedEntity: undefined,
                    isDirty: undefined
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,