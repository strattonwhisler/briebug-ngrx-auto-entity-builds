import { EntityActionTypes } from '../actions/action-types';
import { cloneEntities, cloneIds, mergeSingle, pushSingle, safeGetKey, setNewState } from './reduction.utils';
export const createReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.Create: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isSaving: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.CreateFailure: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isSaving: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.CreateSuccess: {
            const createEntity = action.entity;
            const createKey = safeGetKey(action, createEntity);
            const entities = cloneEntities(entityState.entities);
            const ids = cloneIds(entityState.ids);
            const newState = {
                ...entityState,
                entities: mergeSingle(entities, createKey, createEntity),
                ids: pushSingle(ids, createKey),
                tracking: {
                    ...entityState.tracking,
                    isSaving: false,
                    createdAt: Date.now()
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvcmVkdWNlci9jcmVhdGUucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUk1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU5RyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWtCLEVBQUUsRUFBRTtJQUN0RyxRQUFRLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixLQUFLLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxJQUFJO2lCQUNmO2FBQ0YsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxLQUFLLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sWUFBWSxHQUFJLE1BQTZCLENBQUMsTUFBTSxDQUFDO1lBQzNELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDbkQsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLFFBQVEsRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUM7Z0JBQ3hELEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQztnQkFDL0IsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxLQUFLO29CQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2lCQUN0QjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgQ3JlYXRlU3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvY3JlYXRlLWFjdGlvbnMnO1xuaW1wb3J0IHsgSUVudGl0eVN0YXRlIH0gZnJvbSAnLi4vdXRpbC9lbnRpdHktc3RhdGUnO1xuaW1wb3J0IHsgUmVkdWN0aW9uQmFzaXMgfSBmcm9tICcuL3JlZHVjZXInO1xuaW1wb3J0IHsgY2xvbmVFbnRpdGllcywgY2xvbmVJZHMsIG1lcmdlU2luZ2xlLCBwdXNoU2luZ2xlLCBzYWZlR2V0S2V5LCBzZXROZXdTdGF0ZSB9IGZyb20gJy4vcmVkdWN0aW9uLnV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJlZHVjZXIgPSAoeyBzdGF0ZSwgYWN0aW9uLCBzdGF0ZU5hbWUsIGZlYXR1cmVOYW1lLCBlbnRpdHlTdGF0ZSB9OiBSZWR1Y3Rpb25CYXNpcykgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5DcmVhdGU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNTYXZpbmc6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV4dCA9IHNldE5ld1N0YXRlKGZlYXR1cmVOYW1lLCBzdGF0ZU5hbWUsIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5DcmVhdGVGYWlsdXJlOiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZTogSUVudGl0eVN0YXRlPGFueT4gPSB7XG4gICAgICAgIC4uLmVudGl0eVN0YXRlLFxuICAgICAgICB0cmFja2luZzoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnRyYWNraW5nLFxuICAgICAgICAgIGlzU2F2aW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXh0ID0gc2V0TmV3U3RhdGUoZmVhdHVyZU5hbWUsIHN0YXRlTmFtZSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgICBjYXNlIEVudGl0eUFjdGlvblR5cGVzLkNyZWF0ZVN1Y2Nlc3M6IHtcbiAgICAgIGNvbnN0IGNyZWF0ZUVudGl0eSA9IChhY3Rpb24gYXMgQ3JlYXRlU3VjY2Vzczxhbnk+KS5lbnRpdHk7XG4gICAgICBjb25zdCBjcmVhdGVLZXkgPSBzYWZlR2V0S2V5KGFjdGlvbiwgY3JlYXRlRW50aXR5KTtcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gY2xvbmVFbnRpdGllcyhlbnRpdHlTdGF0ZS5lbnRpdGllcyk7XG4gICAgICBjb25zdCBpZHMgPSBjbG9uZUlkcyhlbnRpdHlTdGF0ZS5pZHMpO1xuXG4gICAgICBjb25zdCBuZXdTdGF0ZTogSUVudGl0eVN0YXRlPGFueT4gPSB7XG4gICAgICAgIC4uLmVudGl0eVN0YXRlLFxuICAgICAgICBlbnRpdGllczogbWVyZ2VTaW5nbGUoZW50aXRpZXMsIGNyZWF0ZUtleSwgY3JlYXRlRW50aXR5KSxcbiAgICAgICAgaWRzOiBwdXNoU2luZ2xlKGlkcywgY3JlYXRlS2V5KSxcbiAgICAgICAgdHJhY2tpbmc6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS50cmFja2luZyxcbiAgICAgICAgICBpc1NhdmluZzogZmFsc2UsXG4gICAgICAgICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICB9XG59O1xuIl19