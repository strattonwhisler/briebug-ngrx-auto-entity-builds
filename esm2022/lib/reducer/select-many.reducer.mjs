import { EntityActionTypes } from '../actions/action-types';
import { safeGetKey, setNewState } from './reduction.utils';
export const selectManyReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.SelectMany: {
            const selectManyEntities = action.entities || [];
            const selectingEntities = Array.isArray(selectManyEntities) ? selectManyEntities : [];
            const selectManyKeys = selectingEntities.map(entity => safeGetKey(action, entity));
            const newState = {
                ...entityState,
                selections: {
                    ...(entityState.selections ?? {}),
                    currentEntitiesKeys: selectManyKeys
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.SelectMore: {
            const selectMoreEntities = action.entities || [];
            const selectingEntities = Array.isArray(selectMoreEntities) ? selectMoreEntities : [];
            const selectMoreKeys = selectingEntities.map(entity => safeGetKey(action, entity));
            const selectMoreCurrentKeys = entityState.selections?.currentEntitiesKeys || [];
            const selectMoreCombinedKeys = new Set([...selectMoreCurrentKeys, ...selectMoreKeys]);
            const newState = {
                ...entityState,
                selections: {
                    ...(entityState.selections ?? {}),
                    currentEntitiesKeys: [...selectMoreCombinedKeys]
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.SelectManyByKeys: {
            const selectManyByKeysKeys = action.entitiesKeys || [];
            const selectManyByKeysGuaranteedKeys = Array.isArray(selectManyByKeysKeys) ? selectManyByKeysKeys : [];
            const newState = {
                ...entityState,
                selections: {
                    ...(entityState.selections ?? {}),
                    currentEntitiesKeys: selectManyByKeysGuaranteedKeys
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.SelectMoreByKeys: {
            const selectMoreByKeysKeys = action.entitiesKeys || [];
            const selectMoreByKeysGuaranteedKeys = Array.isArray(selectMoreByKeysKeys) ? selectMoreByKeysKeys : [];
            const selectMoreByKeysCurrentKeys = entityState.selections?.currentEntitiesKeys || [];
            const selectMoreByKeysCombinedKeys = new Set([...selectMoreByKeysCurrentKeys, ...selectMoreByKeysGuaranteedKeys]);
            const newState = {
                ...entityState,
                selections: {
                    ...(entityState.selections ?? {}),
                    currentEntitiesKeys: [...selectMoreByKeysCombinedKeys]
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,