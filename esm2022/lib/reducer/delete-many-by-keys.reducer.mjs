import { EntityActionTypes } from '../actions/action-types';
import { cloneEntities, deleteMany, setNewState } from './reduction.utils';
export const deleteManyByKeysReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.DeleteManyByKeys: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isDeleting: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.DeleteManyByKeysFailure: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isDeleting: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.DeleteManyByKeysSuccess: {
            const deleteKeys = action.keys;
            const clonedEntities = cloneEntities(entityState.entities);
            const entities = deleteMany(clonedEntities, deleteKeys);
            const ids = entityState.ids.filter(eid => eid in entities);
            const newState = {
                ...entityState,
                entities,
                ids,
                tracking: {
                    ...entityState.tracking,
                    isDeleting: false,
                    deletedAt: Date.now()
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLW1hbnktYnkta2V5cy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL3JlZHVjZXIvZGVsZXRlLW1hbnktYnkta2V5cy5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTNFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFrQixFQUFFLEVBQUU7SUFDaEgsUUFBUSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDeEMsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFVBQVUsRUFBRSxLQUFLO2lCQUNsQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxVQUFVLEdBQUksTUFBdUMsQ0FBQyxJQUFJLENBQUM7WUFDakUsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDO1lBRTNELE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLFFBQVE7Z0JBQ1IsR0FBRztnQkFDSCxRQUFRLEVBQUU7b0JBQ1IsR0FBRyxXQUFXLENBQUMsUUFBUTtvQkFDdkIsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2lCQUN0QjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgRGVsZXRlTWFueUJ5S2V5c1N1Y2Nlc3MgfSBmcm9tICcuLi9hY3Rpb25zL2RlbGV0ZS1ieS1rZXktYWN0aW9ucyc7XG5pbXBvcnQgeyBJRW50aXR5U3RhdGUgfSBmcm9tICcuLi91dGlsL2VudGl0eS1zdGF0ZSc7XG5pbXBvcnQgeyBSZWR1Y3Rpb25CYXNpcyB9IGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQgeyBjbG9uZUVudGl0aWVzLCBkZWxldGVNYW55LCBzZXROZXdTdGF0ZSB9IGZyb20gJy4vcmVkdWN0aW9uLnV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZU1hbnlCeUtleXNSZWR1Y2VyID0gKHsgc3RhdGUsIGFjdGlvbiwgc3RhdGVOYW1lLCBmZWF0dXJlTmFtZSwgZW50aXR5U3RhdGUgfTogUmVkdWN0aW9uQmFzaXMpID0+IHtcbiAgc3dpdGNoIChhY3Rpb24uYWN0aW9uVHlwZSkge1xuICAgIGNhc2UgRW50aXR5QWN0aW9uVHlwZXMuRGVsZXRlTWFueUJ5S2V5czoge1xuICAgICAgY29uc3QgbmV3U3RhdGU6IElFbnRpdHlTdGF0ZTxhbnk+ID0ge1xuICAgICAgICAuLi5lbnRpdHlTdGF0ZSxcbiAgICAgICAgdHJhY2tpbmc6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS50cmFja2luZyxcbiAgICAgICAgICBpc0RlbGV0aW5nOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIGNhc2UgRW50aXR5QWN0aW9uVHlwZXMuRGVsZXRlTWFueUJ5S2V5c0ZhaWx1cmU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNEZWxldGluZzogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV4dCA9IHNldE5ld1N0YXRlKGZlYXR1cmVOYW1lLCBzdGF0ZU5hbWUsIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5EZWxldGVNYW55QnlLZXlzU3VjY2Vzczoge1xuICAgICAgY29uc3QgZGVsZXRlS2V5cyA9IChhY3Rpb24gYXMgRGVsZXRlTWFueUJ5S2V5c1N1Y2Nlc3M8YW55Pikua2V5cztcbiAgICAgIGNvbnN0IGNsb25lZEVudGl0aWVzID0gY2xvbmVFbnRpdGllcyhlbnRpdHlTdGF0ZS5lbnRpdGllcyk7XG4gICAgICBjb25zdCBlbnRpdGllcyA9IGRlbGV0ZU1hbnkoY2xvbmVkRW50aXRpZXMsIGRlbGV0ZUtleXMpO1xuICAgICAgY29uc3QgaWRzID0gZW50aXR5U3RhdGUuaWRzLmZpbHRlcihlaWQgPT4gZWlkIGluIGVudGl0aWVzKTtcblxuICAgICAgY29uc3QgbmV3U3RhdGU6IElFbnRpdHlTdGF0ZTxhbnk+ID0ge1xuICAgICAgICAuLi5lbnRpdHlTdGF0ZSxcbiAgICAgICAgZW50aXRpZXMsXG4gICAgICAgIGlkcyxcbiAgICAgICAgdHJhY2tpbmc6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS50cmFja2luZyxcbiAgICAgICAgICBpc0RlbGV0aW5nOiBmYWxzZSxcbiAgICAgICAgICBkZWxldGVkQXQ6IERhdGUubm93KClcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV4dCA9IHNldE5ld1N0YXRlKGZlYXR1cmVOYW1lLCBzdGF0ZU5hbWUsIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gIH1cbn07XG4iXX0=