import { compose } from '../../util/func';
import { EntityActionTypes } from '../actions/action-types';
import { ENTITY_ACTION_REDUCER_MAP } from './entity-action-reducer.map';
import { featureNameFromAction, stateNameFromAction } from './reduction.utils';
export const runReducer = (reducer) => (basis) => {
    try {
        return reducer(basis);
    }
    catch (err) {
        if (err.message && err.message.startsWith('[NGRX-AE]')) {
            console.error(err.message);
            return basis.state;
        }
        throw err;
    }
};
export const buildReducerParams = () => (params) => ({
    ...params,
    stateName: stateNameFromAction(params.action),
    featureName: featureNameFromAction(params.action)
});
export const findEntityState = () => ({ state, action, stateName, featureName }) => ({
    state,
    action,
    stateName,
    featureName,
    entityState: featureName ? state[featureName][stateName] : state[stateName]
});
export const defaultReducer = ({ state }) => state;
export const findEntityReducer = (action) => ENTITY_ACTION_REDUCER_MAP[action.actionType] ?? defaultReducer;
export const applyEntityReducer = () => (params) => runReducer(findEntityReducer(params.action))(params);
export const autoEntityReducer = (reducer, state, action) => {
    const nextState = Object.values(EntityActionTypes).includes(action.actionType)
        ? compose(buildReducerParams(), findEntityState(), applyEntityReducer())({ state, action })
        : state;
    return reducer(nextState, action);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncngtYXV0by1lbnRpdHkvc3JjL2xpYi9yZWR1Y2VyL3JlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRzVELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBWS9FLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQXNCLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBcUIsRUFBRSxFQUFFO0lBQzlFLElBQUksQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDdkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0IsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3JCLENBQUM7UUFDRCxNQUFNLEdBQUcsQ0FBQztJQUNaLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkUsR0FBRyxNQUFNO0lBQ1QsU0FBUyxFQUFFLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDN0MsV0FBVyxFQUFFLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7Q0FDbEQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUMxQixHQUFHLEVBQUUsQ0FDTCxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlELEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7Q0FDNUUsQ0FBQyxDQUFDO0FBRUwsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsTUFBMEIsRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGNBQWMsQ0FBQztBQUVoSSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQXNCLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUV6SCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE9BQTJCLEVBQUUsS0FBVSxFQUFFLE1BQTBCLEVBQUUsRUFBRTtJQUN2RyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDNUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUMzRixDQUFDLENBQUMsS0FBSyxDQUFDO0lBRVYsT0FBTyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvblJlZHVjZXIgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnLi4vLi4vdXRpbC9mdW5jJztcbmltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvZW50aXR5LWFjdGlvbnMtdW5pb24nO1xuaW1wb3J0IHsgSUVudGl0eVN0YXRlIH0gZnJvbSAnLi4vdXRpbC9lbnRpdHktc3RhdGUnO1xuaW1wb3J0IHsgRU5USVRZX0FDVElPTl9SRURVQ0VSX01BUCB9IGZyb20gJy4vZW50aXR5LWFjdGlvbi1yZWR1Y2VyLm1hcCc7XG5pbXBvcnQgeyBmZWF0dXJlTmFtZUZyb21BY3Rpb24sIHN0YXRlTmFtZUZyb21BY3Rpb24gfSBmcm9tICcuL3JlZHVjdGlvbi51dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVkdWN0aW9uQmFzaXMge1xuICBzdGF0ZTogYW55O1xuICBhY3Rpb246IEVudGl0eUFjdGlvbnM8YW55PjtcbiAgc3RhdGVOYW1lPzogc3RyaW5nO1xuICBmZWF0dXJlTmFtZT86IHN0cmluZztcbiAgZW50aXR5U3RhdGU/OiBJRW50aXR5U3RhdGU8YW55Pjtcbn1cblxuZXhwb3J0IHR5cGUgZW50aXR5UmVkdWNlciA9IChiYXNpczogUmVkdWN0aW9uQmFzaXMpID0+IGFueTtcblxuZXhwb3J0IGNvbnN0IHJ1blJlZHVjZXIgPSAocmVkdWNlcjogZW50aXR5UmVkdWNlcikgPT4gKGJhc2lzOiBSZWR1Y3Rpb25CYXNpcykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiByZWR1Y2VyKGJhc2lzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5tZXNzYWdlICYmIGVyci5tZXNzYWdlLnN0YXJ0c1dpdGgoJ1tOR1JYLUFFXScpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBiYXNpcy5zdGF0ZTtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYnVpbGRSZWR1Y2VyUGFyYW1zID0gKCkgPT4gKHBhcmFtczogUmVkdWN0aW9uQmFzaXMpID0+ICh7XG4gIC4uLnBhcmFtcyxcbiAgc3RhdGVOYW1lOiBzdGF0ZU5hbWVGcm9tQWN0aW9uKHBhcmFtcy5hY3Rpb24pLFxuICBmZWF0dXJlTmFtZTogZmVhdHVyZU5hbWVGcm9tQWN0aW9uKHBhcmFtcy5hY3Rpb24pXG59KTtcblxuZXhwb3J0IGNvbnN0IGZpbmRFbnRpdHlTdGF0ZSA9XG4gICgpID0+XG4gICh7IHN0YXRlLCBhY3Rpb24sIHN0YXRlTmFtZSwgZmVhdHVyZU5hbWUgfTogUmVkdWN0aW9uQmFzaXMpID0+ICh7XG4gICAgc3RhdGUsXG4gICAgYWN0aW9uLFxuICAgIHN0YXRlTmFtZSxcbiAgICBmZWF0dXJlTmFtZSxcbiAgICBlbnRpdHlTdGF0ZTogZmVhdHVyZU5hbWUgPyBzdGF0ZVtmZWF0dXJlTmFtZV1bc3RhdGVOYW1lXSA6IHN0YXRlW3N0YXRlTmFtZV1cbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UmVkdWNlciA9ICh7IHN0YXRlIH0pID0+IHN0YXRlO1xuXG5leHBvcnQgY29uc3QgZmluZEVudGl0eVJlZHVjZXIgPSAoYWN0aW9uOiBFbnRpdHlBY3Rpb25zPGFueT4pID0+IEVOVElUWV9BQ1RJT05fUkVEVUNFUl9NQVBbYWN0aW9uLmFjdGlvblR5cGVdID8/IGRlZmF1bHRSZWR1Y2VyO1xuXG5leHBvcnQgY29uc3QgYXBwbHlFbnRpdHlSZWR1Y2VyID0gKCkgPT4gKHBhcmFtczogUmVkdWN0aW9uQmFzaXMpID0+IHJ1blJlZHVjZXIoZmluZEVudGl0eVJlZHVjZXIocGFyYW1zLmFjdGlvbikpKHBhcmFtcyk7XG5cbmV4cG9ydCBjb25zdCBhdXRvRW50aXR5UmVkdWNlciA9IChyZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPGFueT4sIHN0YXRlOiBhbnksIGFjdGlvbjogRW50aXR5QWN0aW9uczxhbnk+KSA9PiB7XG4gIGNvbnN0IG5leHRTdGF0ZSA9IE9iamVjdC52YWx1ZXMoRW50aXR5QWN0aW9uVHlwZXMpLmluY2x1ZGVzKGFjdGlvbi5hY3Rpb25UeXBlKVxuICAgID8gY29tcG9zZShidWlsZFJlZHVjZXJQYXJhbXMoKSwgZmluZEVudGl0eVN0YXRlKCksIGFwcGx5RW50aXR5UmVkdWNlcigpKSh7IHN0YXRlLCBhY3Rpb24gfSlcbiAgICA6IHN0YXRlO1xuXG4gIHJldHVybiByZWR1Y2VyKG5leHRTdGF0ZSwgYWN0aW9uKTtcbn07XG4iXX0=