import { EntityActionTypes } from '../actions/action-types';
import { cloneEntities, cloneIds, mergeSingle, pushUnique, safeGetKey, setNewState } from './reduction.utils';
export const loadReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.Load: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isLoading: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.LoadFailure: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isLoading: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.LoadSuccess: {
            const loadEntity = action.entity;
            const loadKey = safeGetKey(action, loadEntity);
            const entities = cloneEntities(entityState.entities);
            const ids = cloneIds(entityState.ids);
            const newState = {
                ...entityState,
                ids: pushUnique(entities, ids, loadKey), // ALERT: IDS FIRST!!!
                entities: mergeSingle(entities, loadKey, loadEntity), // ALERT: Then entities!
                tracking: {
                    ...entityState.tracking,
                    isLoading: false,
                    loadedAt: Date.now()
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL3JlZHVjZXIvbG9hZC5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTlHLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBa0IsRUFBRSxFQUFFO0lBQ3BHLFFBQVEsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzFCLEtBQUssaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLFFBQVEsR0FBc0I7Z0JBQ2xDLEdBQUcsV0FBVztnQkFDZCxRQUFRLEVBQUU7b0JBQ1IsR0FBRyxXQUFXLENBQUMsUUFBUTtvQkFDdkIsU0FBUyxFQUFFLElBQUk7aUJBQ2hCO2FBQ0YsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxLQUFLLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFNBQVMsRUFBRSxLQUFLO2lCQUNqQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sVUFBVSxHQUFJLE1BQTJCLENBQUMsTUFBTSxDQUFDO1lBQ3ZELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDL0MsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLEdBQUcsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxzQkFBc0I7Z0JBQy9ELFFBQVEsRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRSx3QkFBd0I7Z0JBQzlFLFFBQVEsRUFBRTtvQkFDUixHQUFHLFdBQVcsQ0FBQyxRQUFRO29CQUN2QixTQUFTLEVBQUUsS0FBSztvQkFDaEIsUUFBUSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7aUJBQ3JCO2FBQ0YsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5QWN0aW9uVHlwZXMgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbi10eXBlcyc7XG5pbXBvcnQgeyBMb2FkU3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvbG9hZC1hY3Rpb25zJztcbmltcG9ydCB7IElFbnRpdHlTdGF0ZSB9IGZyb20gJy4uL3V0aWwvZW50aXR5LXN0YXRlJztcbmltcG9ydCB7IFJlZHVjdGlvbkJhc2lzIH0gZnJvbSAnLi9yZWR1Y2VyJztcbmltcG9ydCB7IGNsb25lRW50aXRpZXMsIGNsb25lSWRzLCBtZXJnZVNpbmdsZSwgcHVzaFVuaXF1ZSwgc2FmZUdldEtleSwgc2V0TmV3U3RhdGUgfSBmcm9tICcuL3JlZHVjdGlvbi51dGlscyc7XG5cbmV4cG9ydCBjb25zdCBsb2FkUmVkdWNlciA9ICh7IHN0YXRlLCBhY3Rpb24sIHN0YXRlTmFtZSwgZmVhdHVyZU5hbWUsIGVudGl0eVN0YXRlIH06IFJlZHVjdGlvbkJhc2lzKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLmFjdGlvblR5cGUpIHtcbiAgICBjYXNlIEVudGl0eUFjdGlvblR5cGVzLkxvYWQ6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNMb2FkaW5nOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIGNhc2UgRW50aXR5QWN0aW9uVHlwZXMuTG9hZEZhaWx1cmU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXh0ID0gc2V0TmV3U3RhdGUoZmVhdHVyZU5hbWUsIHN0YXRlTmFtZSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgICBjYXNlIEVudGl0eUFjdGlvblR5cGVzLkxvYWRTdWNjZXNzOiB7XG4gICAgICBjb25zdCBsb2FkRW50aXR5ID0gKGFjdGlvbiBhcyBMb2FkU3VjY2Vzczxhbnk+KS5lbnRpdHk7XG4gICAgICBjb25zdCBsb2FkS2V5ID0gc2FmZUdldEtleShhY3Rpb24sIGxvYWRFbnRpdHkpO1xuICAgICAgY29uc3QgZW50aXRpZXMgPSBjbG9uZUVudGl0aWVzKGVudGl0eVN0YXRlLmVudGl0aWVzKTtcbiAgICAgIGNvbnN0IGlkcyA9IGNsb25lSWRzKGVudGl0eVN0YXRlLmlkcyk7XG5cbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIGlkczogcHVzaFVuaXF1ZShlbnRpdGllcywgaWRzLCBsb2FkS2V5KSwgLy8gQUxFUlQ6IElEUyBGSVJTVCEhIVxuICAgICAgICBlbnRpdGllczogbWVyZ2VTaW5nbGUoZW50aXRpZXMsIGxvYWRLZXksIGxvYWRFbnRpdHkpLCAvLyBBTEVSVDogVGhlbiBlbnRpdGllcyFcbiAgICAgICAgdHJhY2tpbmc6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS50cmFja2luZyxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGxvYWRlZEF0OiBEYXRlLm5vdygpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICB9XG59O1xuIl19