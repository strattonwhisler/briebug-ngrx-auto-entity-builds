import { EntityActionTypes } from '../actions/action-types';
import { safeGetKey, setNewState } from './reduction.utils';
export const deselectManyReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.DeselectMany: {
            const deselectManyEntities = action.entities || [];
            const deselectingEntities = Array.isArray(deselectManyEntities) ? deselectManyEntities : [];
            const deselectManyEntityKeys = deselectingEntities.map(entity => safeGetKey(action, entity));
            const deselectManyCurrentKeys = entityState.selections.currentEntitiesKeys || [];
            const newState = {
                ...entityState,
                selections: {
                    ...entityState.selections,
                    currentEntitiesKeys: deselectManyCurrentKeys.filter(key => !deselectManyEntityKeys.some(k => k === key))
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.DeselectManyByKeys: {
            const deselectManyByKeysKeys = action.entitiesKeys || [];
            const deselectManyByKeysGuaranteedKeys = Array.isArray(deselectManyByKeysKeys) ? deselectManyByKeysKeys : [];
            const deselectManyByKeysCurrentKeys = entityState.selections.currentEntitiesKeys || [];
            const newState = {
                ...entityState,
                selections: {
                    ...entityState.selections,
                    currentEntitiesKeys: deselectManyByKeysCurrentKeys.filter(key => !deselectManyByKeysGuaranteedKeys.some(k => k === key))
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.DeselectAll: {
            const newState = {
                ...entityState,
                selections: {
                    ...entityState.selections,
                    currentEntitiesKeys: undefined
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzZWxlY3QtbWFueS5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL3JlZHVjZXIvZGVzZWxlY3QtbWFueS5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSTVELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFNUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWtCLEVBQUUsRUFBRTtJQUM1RyxRQUFRLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixLQUFLLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDcEMsTUFBTSxvQkFBb0IsR0FBSSxNQUE0QixDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDMUUsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDNUYsTUFBTSxzQkFBc0IsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDN0YsTUFBTSx1QkFBdUIsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLG1CQUFtQixJQUFJLEVBQUUsQ0FBQztZQUNqRixNQUFNLFFBQVEsR0FBc0I7Z0JBQ2xDLEdBQUcsV0FBVztnQkFDZCxVQUFVLEVBQUU7b0JBQ1YsR0FBRyxXQUFXLENBQUMsVUFBVTtvQkFDekIsbUJBQW1CLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7aUJBQ3pHO2FBQ0YsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxLQUFLLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFJLE1BQWtDLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQztZQUN0RixNQUFNLGdDQUFnQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM3RyxNQUFNLDZCQUE2QixHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFDO1lBRXZGLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLFVBQVUsRUFBRTtvQkFDVixHQUFHLFdBQVcsQ0FBQyxVQUFVO29CQUN6QixtQkFBbUIsRUFBRSw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDekg7YUFDRixDQUFDO1lBRUYsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELEtBQUssaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNuQyxNQUFNLFFBQVEsR0FBc0I7Z0JBQ2xDLEdBQUcsV0FBVztnQkFDZCxVQUFVLEVBQUU7b0JBQ1YsR0FBRyxXQUFXLENBQUMsVUFBVTtvQkFDekIsbUJBQW1CLEVBQUUsU0FBUztpQkFDL0I7YUFDRixDQUFDO1lBRUYsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7IERlc2VsZWN0TWFueSwgRGVzZWxlY3RNYW55QnlLZXlzIH0gZnJvbSAnLi4vYWN0aW9ucy9kZXNlbGVjdGlvbi1hY3Rpb25zJztcbmltcG9ydCB7IElFbnRpdHlTdGF0ZSB9IGZyb20gJy4uL3V0aWwvZW50aXR5LXN0YXRlJztcbmltcG9ydCB7IFJlZHVjdGlvbkJhc2lzIH0gZnJvbSAnLi9yZWR1Y2VyJztcbmltcG9ydCB7IHNhZmVHZXRLZXksIHNldE5ld1N0YXRlIH0gZnJvbSAnLi9yZWR1Y3Rpb24udXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZGVzZWxlY3RNYW55UmVkdWNlciA9ICh7IHN0YXRlLCBhY3Rpb24sIHN0YXRlTmFtZSwgZmVhdHVyZU5hbWUsIGVudGl0eVN0YXRlIH06IFJlZHVjdGlvbkJhc2lzKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLmFjdGlvblR5cGUpIHtcbiAgICBjYXNlIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0TWFueToge1xuICAgICAgY29uc3QgZGVzZWxlY3RNYW55RW50aXRpZXMgPSAoYWN0aW9uIGFzIERlc2VsZWN0TWFueTxhbnk+KS5lbnRpdGllcyB8fCBbXTtcbiAgICAgIGNvbnN0IGRlc2VsZWN0aW5nRW50aXRpZXMgPSBBcnJheS5pc0FycmF5KGRlc2VsZWN0TWFueUVudGl0aWVzKSA/IGRlc2VsZWN0TWFueUVudGl0aWVzIDogW107XG4gICAgICBjb25zdCBkZXNlbGVjdE1hbnlFbnRpdHlLZXlzID0gZGVzZWxlY3RpbmdFbnRpdGllcy5tYXAoZW50aXR5ID0+IHNhZmVHZXRLZXkoYWN0aW9uLCBlbnRpdHkpKTtcbiAgICAgIGNvbnN0IGRlc2VsZWN0TWFueUN1cnJlbnRLZXlzID0gZW50aXR5U3RhdGUuc2VsZWN0aW9ucy5jdXJyZW50RW50aXRpZXNLZXlzIHx8IFtdO1xuICAgICAgY29uc3QgbmV3U3RhdGU6IElFbnRpdHlTdGF0ZTxhbnk+ID0ge1xuICAgICAgICAuLi5lbnRpdHlTdGF0ZSxcbiAgICAgICAgc2VsZWN0aW9uczoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnNlbGVjdGlvbnMsXG4gICAgICAgICAgY3VycmVudEVudGl0aWVzS2V5czogZGVzZWxlY3RNYW55Q3VycmVudEtleXMuZmlsdGVyKGtleSA9PiAhZGVzZWxlY3RNYW55RW50aXR5S2V5cy5zb21lKGsgPT4gayA9PT0ga2V5KSlcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV4dCA9IHNldE5ld1N0YXRlKGZlYXR1cmVOYW1lLCBzdGF0ZU5hbWUsIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5EZXNlbGVjdE1hbnlCeUtleXM6IHtcbiAgICAgIGNvbnN0IGRlc2VsZWN0TWFueUJ5S2V5c0tleXMgPSAoYWN0aW9uIGFzIERlc2VsZWN0TWFueUJ5S2V5czxhbnk+KS5lbnRpdGllc0tleXMgfHwgW107XG4gICAgICBjb25zdCBkZXNlbGVjdE1hbnlCeUtleXNHdWFyYW50ZWVkS2V5cyA9IEFycmF5LmlzQXJyYXkoZGVzZWxlY3RNYW55QnlLZXlzS2V5cykgPyBkZXNlbGVjdE1hbnlCeUtleXNLZXlzIDogW107XG4gICAgICBjb25zdCBkZXNlbGVjdE1hbnlCeUtleXNDdXJyZW50S2V5cyA9IGVudGl0eVN0YXRlLnNlbGVjdGlvbnMuY3VycmVudEVudGl0aWVzS2V5cyB8fCBbXTtcblxuICAgICAgY29uc3QgbmV3U3RhdGU6IElFbnRpdHlTdGF0ZTxhbnk+ID0ge1xuICAgICAgICAuLi5lbnRpdHlTdGF0ZSxcbiAgICAgICAgc2VsZWN0aW9uczoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnNlbGVjdGlvbnMsXG4gICAgICAgICAgY3VycmVudEVudGl0aWVzS2V5czogZGVzZWxlY3RNYW55QnlLZXlzQ3VycmVudEtleXMuZmlsdGVyKGtleSA9PiAhZGVzZWxlY3RNYW55QnlLZXlzR3VhcmFudGVlZEtleXMuc29tZShrID0+IGsgPT09IGtleSkpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIGNhc2UgRW50aXR5QWN0aW9uVHlwZXMuRGVzZWxlY3RBbGw6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHNlbGVjdGlvbnM6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS5zZWxlY3Rpb25zLFxuICAgICAgICAgIGN1cnJlbnRFbnRpdGllc0tleXM6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXh0ID0gc2V0TmV3U3RhdGUoZmVhdHVyZU5hbWUsIHN0YXRlTmFtZSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgfVxufTtcbiJdfQ==