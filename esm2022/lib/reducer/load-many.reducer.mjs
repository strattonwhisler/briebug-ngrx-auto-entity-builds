import { EntityActionTypes } from '../actions/action-types';
import { cloneEntities, cloneIds, mergeMany, pushManyUnique, safeGetKey, setNewState } from './reduction.utils';
export const loadManyReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.LoadMany: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isLoading: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.LoadManyFailure: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isLoading: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.LoadManySuccess: {
            const loadManyEntities = action.entities;
            const loadedIds = loadManyEntities.map(entity => safeGetKey(action, entity));
            const entities = cloneEntities(entityState.entities);
            const ids = cloneIds(entityState.ids);
            const newState = {
                ...entityState,
                ids: pushManyUnique(entities, ids, loadedIds), // ALERT: IDS FIRST!!
                entities: mergeMany(entities, loadManyEntities, action), // ALERT: Then entities!
                tracking: {
                    ...entityState.tracking,
                    isLoading: false,
                    loadedAt: Date.now()
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1tYW55LnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvcmVkdWNlci9sb2FkLW1hbnkucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUk1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVoSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWtCLEVBQUUsRUFBRTtJQUN4RyxRQUFRLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixLQUFLLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFNBQVMsRUFBRSxJQUFJO2lCQUNoQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLFFBQVEsRUFBRTtvQkFDUixHQUFHLFdBQVcsQ0FBQyxRQUFRO29CQUN2QixTQUFTLEVBQUUsS0FBSztpQkFDakI7YUFDRixDQUFDO1lBRUYsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELEtBQUssaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLGdCQUFnQixHQUFJLE1BQStCLENBQUMsUUFBUSxDQUFDO1lBQ25FLE1BQU0sU0FBUyxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM3RSxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFdEMsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsR0FBRyxFQUFFLGNBQWMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxFQUFFLHFCQUFxQjtnQkFDcEUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLEVBQUUsd0JBQXdCO2dCQUNqRixRQUFRLEVBQUU7b0JBQ1IsR0FBRyxXQUFXLENBQUMsUUFBUTtvQkFDdkIsU0FBUyxFQUFFLEtBQUs7b0JBQ2hCLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2lCQUNyQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgTG9hZE1hbnlTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLW1hbnktYWN0aW9ucyc7XG5pbXBvcnQgeyBJRW50aXR5U3RhdGUgfSBmcm9tICcuLi91dGlsL2VudGl0eS1zdGF0ZSc7XG5pbXBvcnQgeyBSZWR1Y3Rpb25CYXNpcyB9IGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQgeyBjbG9uZUVudGl0aWVzLCBjbG9uZUlkcywgbWVyZ2VNYW55LCBwdXNoTWFueVVuaXF1ZSwgc2FmZUdldEtleSwgc2V0TmV3U3RhdGUgfSBmcm9tICcuL3JlZHVjdGlvbi51dGlscyc7XG5cbmV4cG9ydCBjb25zdCBsb2FkTWFueVJlZHVjZXIgPSAoeyBzdGF0ZSwgYWN0aW9uLCBzdGF0ZU5hbWUsIGZlYXR1cmVOYW1lLCBlbnRpdHlTdGF0ZSB9OiBSZWR1Y3Rpb25CYXNpcykgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkTWFueToge1xuICAgICAgY29uc3QgbmV3U3RhdGU6IElFbnRpdHlTdGF0ZTxhbnk+ID0ge1xuICAgICAgICAuLi5lbnRpdHlTdGF0ZSxcbiAgICAgICAgdHJhY2tpbmc6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS50cmFja2luZyxcbiAgICAgICAgICBpc0xvYWRpbmc6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV4dCA9IHNldE5ld1N0YXRlKGZlYXR1cmVOYW1lLCBzdGF0ZU5hbWUsIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkTWFueUZhaWx1cmU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXh0ID0gc2V0TmV3U3RhdGUoZmVhdHVyZU5hbWUsIHN0YXRlTmFtZSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgICBjYXNlIEVudGl0eUFjdGlvblR5cGVzLkxvYWRNYW55U3VjY2Vzczoge1xuICAgICAgY29uc3QgbG9hZE1hbnlFbnRpdGllcyA9IChhY3Rpb24gYXMgTG9hZE1hbnlTdWNjZXNzPGFueT4pLmVudGl0aWVzO1xuICAgICAgY29uc3QgbG9hZGVkSWRzID0gbG9hZE1hbnlFbnRpdGllcy5tYXAoZW50aXR5ID0+IHNhZmVHZXRLZXkoYWN0aW9uLCBlbnRpdHkpKTtcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gY2xvbmVFbnRpdGllcyhlbnRpdHlTdGF0ZS5lbnRpdGllcyk7XG4gICAgICBjb25zdCBpZHMgPSBjbG9uZUlkcyhlbnRpdHlTdGF0ZS5pZHMpO1xuXG4gICAgICBjb25zdCBuZXdTdGF0ZTogSUVudGl0eVN0YXRlPGFueT4gPSB7XG4gICAgICAgIC4uLmVudGl0eVN0YXRlLFxuICAgICAgICBpZHM6IHB1c2hNYW55VW5pcXVlKGVudGl0aWVzLCBpZHMsIGxvYWRlZElkcyksIC8vIEFMRVJUOiBJRFMgRklSU1QhIVxuICAgICAgICBlbnRpdGllczogbWVyZ2VNYW55KGVudGl0aWVzLCBsb2FkTWFueUVudGl0aWVzLCBhY3Rpb24pLCAvLyBBTEVSVDogVGhlbiBlbnRpdGllcyFcbiAgICAgICAgdHJhY2tpbmc6IHtcbiAgICAgICAgICAuLi5lbnRpdHlTdGF0ZS50cmFja2luZyxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGxvYWRlZEF0OiBEYXRlLm5vdygpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICB9XG59O1xuIl19