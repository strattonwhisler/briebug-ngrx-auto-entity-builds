import { EntityActionTypes } from '../actions/action-types';
import { cloneEntities, cloneIds, combineUnique, mergeMany, setNewState } from './reduction.utils';
export const upsertManyReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.UpsertMany: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isSaving: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.UpsertManyFailure: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isSaving: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.UpsertManySuccess: {
            const upsertManyEntities = action.entities;
            const entities = cloneEntities(entityState.entities);
            const ids = cloneIds(entityState.ids);
            const newState = {
                ...entityState,
                ids: combineUnique(ids, entities, upsertManyEntities, action),
                entities: mergeMany(entities, upsertManyEntities, action),
                tracking: {
                    ...entityState.tracking,
                    isSaving: false,
                    savedAt: Date.now()
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBzZXJ0LW1hbnkucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncngtYXV0by1lbnRpdHkvc3JjL2xpYi9yZWR1Y2VyL3Vwc2VydC1tYW55LnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFJNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBa0IsRUFBRSxFQUFFO0lBQzFHLFFBQVEsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzFCLEtBQUssaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNsQyxNQUFNLFFBQVEsR0FBc0I7Z0JBQ2xDLEdBQUcsV0FBVztnQkFDZCxRQUFRLEVBQUU7b0JBQ1IsR0FBRyxXQUFXLENBQUMsUUFBUTtvQkFDdkIsUUFBUSxFQUFFLElBQUk7aUJBQ2Y7YUFDRixDQUFDO1lBRUYsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELEtBQUssaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLFFBQVEsRUFBRTtvQkFDUixHQUFHLFdBQVcsQ0FBQyxRQUFRO29CQUN2QixRQUFRLEVBQUUsS0FBSztpQkFDaEI7YUFDRixDQUFDO1lBRUYsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELEtBQUssaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sa0JBQWtCLEdBQUksTUFBaUMsQ0FBQyxRQUFRLENBQUM7WUFDdkUsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLEdBQUcsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUM7Z0JBQzdELFFBQVEsRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQztnQkFDekQsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxLQUFLO29CQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2lCQUNwQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgVXBzZXJ0TWFueVN1Y2Nlc3MgfSBmcm9tICcuLi9hY3Rpb25zL3Vwc2VydC1hY3Rpb25zJztcbmltcG9ydCB7IElFbnRpdHlTdGF0ZSB9IGZyb20gJy4uL3V0aWwvZW50aXR5LXN0YXRlJztcbmltcG9ydCB7IFJlZHVjdGlvbkJhc2lzIH0gZnJvbSAnLi9yZWR1Y2VyJztcbmltcG9ydCB7IGNsb25lRW50aXRpZXMsIGNsb25lSWRzLCBjb21iaW5lVW5pcXVlLCBtZXJnZU1hbnksIHNldE5ld1N0YXRlIH0gZnJvbSAnLi9yZWR1Y3Rpb24udXRpbHMnO1xuXG5leHBvcnQgY29uc3QgdXBzZXJ0TWFueVJlZHVjZXIgPSAoeyBzdGF0ZSwgYWN0aW9uLCBzdGF0ZU5hbWUsIGZlYXR1cmVOYW1lLCBlbnRpdHlTdGF0ZSB9OiBSZWR1Y3Rpb25CYXNpcykgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5VcHNlcnRNYW55OiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZTogSUVudGl0eVN0YXRlPGFueT4gPSB7XG4gICAgICAgIC4uLmVudGl0eVN0YXRlLFxuICAgICAgICB0cmFja2luZzoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnRyYWNraW5nLFxuICAgICAgICAgIGlzU2F2aW5nOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIGNhc2UgRW50aXR5QWN0aW9uVHlwZXMuVXBzZXJ0TWFueUZhaWx1cmU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNTYXZpbmc6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIGNhc2UgRW50aXR5QWN0aW9uVHlwZXMuVXBzZXJ0TWFueVN1Y2Nlc3M6IHtcbiAgICAgIGNvbnN0IHVwc2VydE1hbnlFbnRpdGllcyA9IChhY3Rpb24gYXMgVXBzZXJ0TWFueVN1Y2Nlc3M8YW55PikuZW50aXRpZXM7XG4gICAgICBjb25zdCBlbnRpdGllcyA9IGNsb25lRW50aXRpZXMoZW50aXR5U3RhdGUuZW50aXRpZXMpO1xuICAgICAgY29uc3QgaWRzID0gY2xvbmVJZHMoZW50aXR5U3RhdGUuaWRzKTtcblxuICAgICAgY29uc3QgbmV3U3RhdGU6IElFbnRpdHlTdGF0ZTxhbnk+ID0ge1xuICAgICAgICAuLi5lbnRpdHlTdGF0ZSxcbiAgICAgICAgaWRzOiBjb21iaW5lVW5pcXVlKGlkcywgZW50aXRpZXMsIHVwc2VydE1hbnlFbnRpdGllcywgYWN0aW9uKSxcbiAgICAgICAgZW50aXRpZXM6IG1lcmdlTWFueShlbnRpdGllcywgdXBzZXJ0TWFueUVudGl0aWVzLCBhY3Rpb24pLFxuICAgICAgICB0cmFja2luZzoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnRyYWNraW5nLFxuICAgICAgICAgIGlzU2F2aW5nOiBmYWxzZSxcbiAgICAgICAgICBzYXZlZEF0OiBEYXRlLm5vdygpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICB9XG59O1xuIl19