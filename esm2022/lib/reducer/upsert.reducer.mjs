import { EntityActionTypes } from '../actions/action-types';
import { cloneEntities, cloneIds, combineUnique, mergeSingle, safeGetKey, setNewState } from './reduction.utils';
export const upsertReducer = ({ state, action, stateName, featureName, entityState }) => {
    switch (action.actionType) {
        case EntityActionTypes.Upsert: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isSaving: true
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.UpsertFailure: {
            const newState = {
                ...entityState,
                tracking: {
                    ...entityState.tracking,
                    isSaving: false
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
        case EntityActionTypes.UpsertSuccess: {
            const upsertEntity = action.entity;
            const upsertKey = safeGetKey(action, upsertEntity);
            const entities = cloneEntities(entityState.entities);
            const ids = cloneIds(entityState.ids);
            const newState = {
                ...entityState,
                ids: combineUnique(ids, entities, [upsertEntity], action),
                entities: mergeSingle(entities, upsertKey, upsertEntity),
                tracking: {
                    ...entityState.tracking,
                    isSaving: false,
                    savedAt: Date.now()
                }
            };
            const next = setNewState(featureName, stateName, state, newState);
            return next;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBzZXJ0LnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvcmVkdWNlci91cHNlcnQucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUk1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWtCLEVBQUUsRUFBRTtJQUN0RyxRQUFRLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixLQUFLLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxJQUFJO2lCQUNmO2FBQ0YsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxLQUFLLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxRQUFRLEdBQXNCO2dCQUNsQyxHQUFHLFdBQVc7Z0JBQ2QsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sWUFBWSxHQUFJLE1BQTZCLENBQUMsTUFBTSxDQUFDO1lBQzNELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDbkQsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLE1BQU0sUUFBUSxHQUFzQjtnQkFDbEMsR0FBRyxXQUFXO2dCQUNkLEdBQUcsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLE1BQU0sQ0FBQztnQkFDekQsUUFBUSxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQztnQkFDeEQsUUFBUSxFQUFFO29CQUNSLEdBQUcsV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxLQUFLO29CQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO2lCQUNwQjthQUNGLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgVXBzZXJ0U3VjY2VzcyB9IGZyb20gJy4uL2FjdGlvbnMvdXBzZXJ0LWFjdGlvbnMnO1xuaW1wb3J0IHsgSUVudGl0eVN0YXRlIH0gZnJvbSAnLi4vdXRpbC9lbnRpdHktc3RhdGUnO1xuaW1wb3J0IHsgUmVkdWN0aW9uQmFzaXMgfSBmcm9tICcuL3JlZHVjZXInO1xuaW1wb3J0IHsgY2xvbmVFbnRpdGllcywgY2xvbmVJZHMsIGNvbWJpbmVVbmlxdWUsIG1lcmdlU2luZ2xlLCBzYWZlR2V0S2V5LCBzZXROZXdTdGF0ZSB9IGZyb20gJy4vcmVkdWN0aW9uLnV0aWxzJztcblxuZXhwb3J0IGNvbnN0IHVwc2VydFJlZHVjZXIgPSAoeyBzdGF0ZSwgYWN0aW9uLCBzdGF0ZU5hbWUsIGZlYXR1cmVOYW1lLCBlbnRpdHlTdGF0ZSB9OiBSZWR1Y3Rpb25CYXNpcykgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5VcHNlcnQ6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBJRW50aXR5U3RhdGU8YW55PiA9IHtcbiAgICAgICAgLi4uZW50aXR5U3RhdGUsXG4gICAgICAgIHRyYWNraW5nOiB7XG4gICAgICAgICAgLi4uZW50aXR5U3RhdGUudHJhY2tpbmcsXG4gICAgICAgICAgaXNTYXZpbmc6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV4dCA9IHNldE5ld1N0YXRlKGZlYXR1cmVOYW1lLCBzdGF0ZU5hbWUsIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gICAgY2FzZSBFbnRpdHlBY3Rpb25UeXBlcy5VcHNlcnRGYWlsdXJlOiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZTogSUVudGl0eVN0YXRlPGFueT4gPSB7XG4gICAgICAgIC4uLmVudGl0eVN0YXRlLFxuICAgICAgICB0cmFja2luZzoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnRyYWNraW5nLFxuICAgICAgICAgIGlzU2F2aW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXh0ID0gc2V0TmV3U3RhdGUoZmVhdHVyZU5hbWUsIHN0YXRlTmFtZSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgICBjYXNlIEVudGl0eUFjdGlvblR5cGVzLlVwc2VydFN1Y2Nlc3M6IHtcbiAgICAgIGNvbnN0IHVwc2VydEVudGl0eSA9IChhY3Rpb24gYXMgVXBzZXJ0U3VjY2Vzczxhbnk+KS5lbnRpdHk7XG4gICAgICBjb25zdCB1cHNlcnRLZXkgPSBzYWZlR2V0S2V5KGFjdGlvbiwgdXBzZXJ0RW50aXR5KTtcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gY2xvbmVFbnRpdGllcyhlbnRpdHlTdGF0ZS5lbnRpdGllcyk7XG4gICAgICBjb25zdCBpZHMgPSBjbG9uZUlkcyhlbnRpdHlTdGF0ZS5pZHMpO1xuXG4gICAgICBjb25zdCBuZXdTdGF0ZTogSUVudGl0eVN0YXRlPGFueT4gPSB7XG4gICAgICAgIC4uLmVudGl0eVN0YXRlLFxuICAgICAgICBpZHM6IGNvbWJpbmVVbmlxdWUoaWRzLCBlbnRpdGllcywgW3Vwc2VydEVudGl0eV0sIGFjdGlvbiksXG4gICAgICAgIGVudGl0aWVzOiBtZXJnZVNpbmdsZShlbnRpdGllcywgdXBzZXJ0S2V5LCB1cHNlcnRFbnRpdHkpLFxuICAgICAgICB0cmFja2luZzoge1xuICAgICAgICAgIC4uLmVudGl0eVN0YXRlLnRyYWNraW5nLFxuICAgICAgICAgIGlzU2F2aW5nOiBmYWxzZSxcbiAgICAgICAgICBzYXZlZEF0OiBEYXRlLm5vdygpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG5leHQgPSBzZXROZXdTdGF0ZShmZWF0dXJlTmFtZSwgc3RhdGVOYW1lLCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICB9XG59O1xuIl19