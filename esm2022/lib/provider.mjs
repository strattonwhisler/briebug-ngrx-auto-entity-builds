import { ENVIRONMENT_INITIALIZER, inject, InjectionToken, Injector, makeEnvironmentProviders } from '@angular/core';
import { META_REDUCERS, Store } from '@ngrx/store';
import { EffectSources } from '@ngrx/effects';
import { EntityEffects } from './effects/effects-all';
import { ExtraEffects } from './effects/effects-extra';
import { EntityIfNecessaryOperators } from './effects/if-necessary-operators';
import { EntityOperators } from './effects/operators';
import { autoEntityMetaReducer } from './reducer/meta-reducer';
import { NgrxAutoEntityService } from './service/service';
import { addInjector } from './service/service-injection';
import { NGRX_AUTO_ENTITY_APP_STORE } from './effects/if-necessary-operator-utils';
function isAutoEntityFeature(value) {
    return value && value.ɵkind != null && value.ɵproviders != null;
}
function includesFeature(features, featureKind) {
    return features.some(feature => feature.ɵkind === featureKind);
}
function autoEntityFeature(kind, providers) {
    return { ɵkind: kind, ɵproviders: providers };
}
export const NGRX_AUTO_ENTITY_CONFIG = new InjectionToken('@briebug/ngrx-auto-entity Config');
const defaultConfig = {};
export function getNgRxAutoEntityMetaReducer() {
    return autoEntityMetaReducer;
}
export function addNgRxAutoEntityEffects() {
    const config = inject(NGRX_AUTO_ENTITY_CONFIG);
    return () => {
        // NOTE: The following trick learned from @ngrx/data!
        // Warning: this alternative approach relies on an undocumented API
        // to add effect directly rather than through `provideEffects`.
        // The danger is that provideEffects evolves and we no longer perform a crucial step.
        const effectSources = inject(EffectSources);
        const entityEffects = inject(EntityEffects, { optional: config.withoutEntityEffects });
        const extraEffects = inject(ExtraEffects, { optional: config.withoutExtraEffects });
        entityEffects && effectSources.addEffects(entityEffects);
        extraEffects && effectSources.addEffects(extraEffects);
    };
}
/** @internal */
export function _provideAutoEntityStore(config = defaultConfig, features = []) {
    const effects = [];
    if (!config.withoutEntityEffects) {
        effects.push(EntityEffects);
    }
    if (!config.withoutExtraEffects) {
        effects.push(ExtraEffects);
    }
    if (!includesFeature(features, 0 /* NgRxAutoEntityFeatureKind.CustomStoreFeature */)) {
        features.push(withCustomStore(() => inject(Store)));
    }
    return [
        NgrxAutoEntityService,
        EntityOperators,
        EntityIfNecessaryOperators,
        ...effects,
        { provide: META_REDUCERS, useFactory: getNgRxAutoEntityMetaReducer, multi: true },
        { provide: NGRX_AUTO_ENTITY_CONFIG, useValue: config },
        { provide: ENVIRONMENT_INITIALIZER, useFactory: addNgRxAutoEntityEffects, multi: true },
        ...features.map((feature) => feature.ɵproviders),
    ];
}
export function provideAutoEntityStore(...args) {
    const config = isAutoEntityFeature(args[0]) ? undefined : args.shift();
    const features = args;
    return makeEnvironmentProviders(_provideAutoEntityStore(config, features));
}
let INJECTOR_DEPTH = 0;
export function addNgRxAutoEntityInjector() {
    const injector = inject(Injector);
    // Update the core NgRxAutoEntityService INJECTORS to include the current injector
    // This creates a list of injectors that should eventually encompass the entire application
    // as +feature loaded modules are subsequently created, to be evaluated in reverse order
    INJECTOR_DEPTH = INJECTOR_DEPTH + 1;
    addInjector(Injector.create({
        providers: [],
        parent: injector,
        name: 'AutoEntityInjector' + INJECTOR_DEPTH
    }));
}
/** @internal */
export function _provideAutoEntityState() {
    return [
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue: addNgRxAutoEntityInjector
        }
    ];
}
/**
 * Provides the feature level Auto-Entity providers.
 *
 * @usageNotes
 *
 * ### Providing an Auto-Entity Feature State
 *
 * ```
 * provideState(featureState),
 * provideAutoEntityState()
 * ```
 *
 * @publicApi
 * @returns A set of providers to set up an Auto-Entity feature state.
 */
export function provideAutoEntityState() {
    return makeEnvironmentProviders(_provideAutoEntityState());
}
const PROVIDED_SERVICES = [];
/**
 * Provides an entity's service.
 *
 * This will reuse existing services when possible.
 *
 * @usageNotes
 *
 * ### Providing an Entity's Service
 *
 * ```
 * provideEntityService(Products, ProductsService)
 * ```
 *
 * @publicApi
 * @param modelType The entity model to provide a service for.
 * @param service The service to provide.
 * @returns A set of providers to set up an entity's service.
 */
export function provideEntityService(modelType, service) {
    const providers = [
        { provide: modelType, useExisting: service }
    ];
    if (!PROVIDED_SERVICES.includes(service)) {
        providers.unshift(service);
        PROVIDED_SERVICES.push(service);
    }
    return makeEnvironmentProviders(providers);
}
export function withCustomStore(getStore, deps) {
    const providers = [
        { provide: NGRX_AUTO_ENTITY_APP_STORE, useFactory: getStore, deps },
    ];
    return autoEntityFeature(0 /* NgRxAutoEntityFeatureKind.CustomStoreFeature */, providers);
}
/**
 * Disables automatic providing of the Auto-Entity Store.
 * @internal
 */
export function _withNoStore() {
    return autoEntityFeature(0 /* NgRxAutoEntityFeatureKind.CustomStoreFeature */, []);
}
//# sourceMappingURL=data:application/json;base64,