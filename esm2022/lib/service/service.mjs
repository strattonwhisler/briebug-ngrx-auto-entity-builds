import { Injectable, Injector } from '@angular/core';
import { callService } from './service-invocation';
import { transformArrayFromServer, transformArrayToServer, transformSingleFromServer, transformSingleToServer } from './transformation';
import * as i0 from "@angular/core";
/**
 * Looks up client-provided entity service class using Angular's injector and this package's naming
 * conventions.  Then calls client's service and provides success/failure handling.
 */
export class NgrxAutoEntityService {
    constructor(injector) {
        this.injector = injector;
    }
    load(entityInfo, keys, criteria) {
        return callService('load', entityInfo, this.injector, service => service.load(entityInfo, keys, criteria), entity => ({ info: entityInfo, entity: transformSingleFromServer(entityInfo, criteria)(entity) }));
    }
    loadAll(entityInfo, criteria) {
        return callService('loadAll', entityInfo, this.injector, service => service.loadAll(entityInfo, criteria), entities => ({ info: entityInfo, entity: transformArrayFromServer(entityInfo, criteria)(entities) }));
    }
    loadMany(entityInfo, criteria) {
        return callService('loadMany', entityInfo, this.injector, service => service.loadMany(entityInfo, criteria), entities => ({ info: entityInfo, entity: transformArrayFromServer(entityInfo, criteria)(entities) }));
    }
    loadPage(entityInfo, page, criteria) {
        return callService('loadPage', entityInfo, this.injector, service => service.loadPage(entityInfo, page, criteria), result => ({
            info: entityInfo,
            pageInfo: result.pageInfo,
            entity: transformArrayFromServer(entityInfo, criteria)(result.entities)
        }));
    }
    loadRange(entityInfo, range, criteria) {
        return callService('loadRange', entityInfo, this.injector, service => service.loadRange(entityInfo, range, criteria), result => ({
            info: entityInfo,
            rangeInfo: result.rangeInfo,
            entity: transformArrayFromServer(entityInfo, criteria)(result.entities)
        }));
    }
    create(entityInfo, entity, criteria) {
        const transformed = transformSingleToServer(entityInfo, criteria)(entity);
        return callService('create', entityInfo, this.injector, service => service.create(entityInfo, transformed, criteria, entity), created => ({ info: entityInfo, entity: transformSingleFromServer(entityInfo, criteria)(created) }));
    }
    createMany(entityInfo, entities, criteria) {
        const transformed = transformArrayToServer(entityInfo, criteria)(entities);
        return callService('createMany', entityInfo, this.injector, service => service.createMany(entityInfo, transformed, criteria, entities), created => ({ info: entityInfo, entity: transformArrayFromServer(entityInfo, criteria)(created) }));
    }
    update(entityInfo, entity, criteria) {
        const transformed = transformSingleToServer(entityInfo, criteria)(entity);
        return callService('update', entityInfo, this.injector, service => service.update(entityInfo, transformed, criteria, entity), updated => ({ info: entityInfo, entity: transformSingleFromServer(entityInfo, criteria)(updated) }));
    }
    updateMany(entityInfo, entities, criteria) {
        const transformed = transformArrayToServer(entityInfo, criteria)(entities);
        return callService('updateMany', entityInfo, this.injector, service => service.updateMany(entityInfo, transformed, criteria, entities), updatedEntities => ({
            info: entityInfo,
            entity: transformArrayFromServer(entityInfo, criteria)(updatedEntities)
        }));
    }
    upsert(entityInfo, entity, criteria) {
        const transformed = transformSingleToServer(entityInfo, criteria)(entity);
        return callService('upsert', entityInfo, this.injector, service => service.upsert(entityInfo, transformed, criteria, entity), upserted => ({ info: entityInfo, entity: transformSingleFromServer(entityInfo, criteria)(upserted) }));
    }
    upsertMany(entityInfo, entities, criteria) {
        const transformed = transformArrayToServer(entityInfo, criteria)(entities);
        return callService('upsertMany', entityInfo, this.injector, service => service.upsertMany(entityInfo, transformed, criteria, entities), upsertedEntities => ({
            info: entityInfo,
            entity: transformArrayFromServer(entityInfo, criteria)(upsertedEntities)
        }));
    }
    replace(entityInfo, entity, criteria) {
        const transformed = transformSingleToServer(entityInfo, criteria)(entity);
        return callService('replace', entityInfo, this.injector, service => service.replace(entityInfo, transformed, criteria, entity), replaced => ({ info: entityInfo, entity: transformSingleFromServer(entityInfo, criteria)(replaced) }));
    }
    replaceMany(entityInfo, entities, criteria) {
        const transformed = transformArrayToServer(entityInfo, criteria)(entities);
        return callService('replaceMany', entityInfo, this.injector, service => service.replaceMany(entityInfo, transformed, criteria, entities), replaced => ({ info: entityInfo, entity: transformArrayFromServer(entityInfo, criteria)(replaced) }));
    }
    delete(entityInfo, entity, criteria) {
        const transformed = transformSingleToServer(entityInfo, criteria)(entity);
        return callService('delete', entityInfo, this.injector, service => service.delete(entityInfo, transformed, criteria, entity), deleted => ({ info: entityInfo, entity: transformSingleFromServer(entityInfo, criteria)(deleted) }));
    }
    deleteMany(entityInfo, entities, criteria) {
        const transformed = transformArrayToServer(entityInfo, criteria)(entities);
        return callService('deleteMany', entityInfo, this.injector, service => service.deleteMany(entityInfo, transformed, criteria, entities), deleted => ({ info: entityInfo, entity: transformArrayFromServer(entityInfo, criteria)(deleted) }));
    }
    deleteByKey(entityInfo, key, criteria) {
        return callService('deleteByKey', entityInfo, this.injector, service => service.deleteByKey(entityInfo, key, criteria), deletedKey => ({ info: entityInfo, entityIdentity: deletedKey }));
    }
    deleteManyByKey(entityInfo, keys, criteria) {
        return callService('deleteManyByKeys', entityInfo, this.injector, service => service.deleteManyByKeys(entityInfo, keys, criteria), deletedKeys => ({ info: entityInfo, entityIdentities: deletedKeys }));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: NgrxAutoEntityService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: NgrxAutoEntityService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: NgrxAutoEntityService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.Injector }] });
//# sourceMappingURL=data:application/json;base64,