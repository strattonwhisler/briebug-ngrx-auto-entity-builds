const FROM = 'fromServer';
const TO = 'toServer';
const identity = value => value;
export const getTransforms = (transform, prop) => !!transform && !!transform.length
    ? transform.filter(tx => !!tx[prop]).map(tx => tx[prop]) // select custom transformations
    : [identity]; // provide identity transformation as default
export const applyTransforms = (transforms, criteria) => (originalEntity) => transforms.reduce((entity, transform) => transform(entity, criteria), { ...originalEntity });
export const transformSingleFromServer = (entityInfo, criteria) => (entity) => {
    const transforms = getTransforms(entityInfo.transform, FROM);
    return applyTransforms(transforms, criteria)(entity);
};
export const transformArrayFromServer = (entityInfo, criteria) => (entities) => {
    const transforms = getTransforms(entityInfo.transform, FROM);
    return entities.map(applyTransforms(transforms, criteria));
};
export const transformSingleToServer = (entityInfo, criteria) => (originalEntity) => {
    const transforms = getTransforms(entityInfo.transform, TO).reverse();
    return applyTransforms(transforms, criteria)(originalEntity);
};
export const transformArrayToServer = (entityInfo, criteria) => (entities) => {
    const transforms = getTransforms(entityInfo.transform, TO).reverse();
    return entities.map(applyTransforms(transforms, criteria));
};
// User utilities
export const transformEntityFromServer = (entityInfo, entity, criteria) => transformSingleFromServer(entityInfo, criteria)(entity);
export const transformEntitiesFromServer = (entityInfo, entities, criteria) => transformArrayFromServer(entityInfo, criteria)(entities);
export const transformEntityToServer = (entityInfo, entity, criteria) => transformSingleToServer(entityInfo, criteria)(entity);
export const transformEntitiesToServer = (entityInfo, entities, criteria) => transformArrayToServer(entityInfo, criteria)(entities);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvc2VydmljZS90cmFuc2Zvcm1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLElBQUksR0FBRyxZQUFZLENBQUM7QUFDMUIsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDO0FBR3RCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBRWhDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLFNBQStCLEVBQUUsSUFBWSxFQUFpQixFQUFFLENBQzVGLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNO0lBQy9CLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdDQUFnQztJQUN6RixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLDZDQUE2QztBQUUvRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQzFCLENBQUMsVUFBeUIsRUFBRSxRQUFjLEVBQUUsRUFBRSxDQUM5QyxDQUFDLGNBQW1CLEVBQU8sRUFBRSxDQUMzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFLEdBQUcsY0FBYyxFQUFFLENBQUMsQ0FBQztBQUVqRyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FDcEMsQ0FBUyxVQUF1QixFQUFFLFFBQWMsRUFBRSxFQUFFLENBQ3BELENBQUMsTUFBVyxFQUFVLEVBQUU7SUFDdEIsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsT0FBTyxlQUFlLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUNuQyxDQUFTLFVBQXVCLEVBQUUsUUFBYyxFQUFFLEVBQUUsQ0FDcEQsQ0FBQyxRQUFrQixFQUFZLEVBQUU7SUFDL0IsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FDbEMsQ0FBUyxVQUF1QixFQUFFLFFBQWMsRUFBRSxFQUFFLENBQ3BELENBQUMsY0FBc0IsRUFBTyxFQUFFO0lBQzlCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JFLE9BQU8sZUFBZSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FDakMsQ0FBUyxVQUF1QixFQUFFLFFBQWMsRUFBRSxFQUFFLENBQ3BELENBQUMsUUFBa0IsRUFBUyxFQUFFO0lBQzVCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JFLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQ0FBQyxDQUFDO0FBRUosaUJBQWlCO0FBRWpCLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQVMsVUFBdUIsRUFBRSxNQUFXLEVBQUUsUUFBYyxFQUFVLEVBQUUsQ0FDaEgseUJBQXlCLENBQVMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQVMsVUFBdUIsRUFBRSxRQUFlLEVBQUUsUUFBYyxFQUFZLEVBQUUsQ0FDeEgsd0JBQXdCLENBQVMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRW5FLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQVMsVUFBdUIsRUFBRSxNQUFjLEVBQUUsUUFBYyxFQUFPLEVBQUUsQ0FDOUcsdUJBQXVCLENBQVMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRWhFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQVMsVUFBdUIsRUFBRSxRQUFlLEVBQUUsUUFBYyxFQUFZLEVBQUUsQ0FDdEgsc0JBQXNCLENBQVMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUVudGl0eUluZm8gfSBmcm9tICcuLi9hY3Rpb25zL2VudGl0eS1pbmZvJztcbmltcG9ydCB7IElFbnRpdHlUcmFuc2Zvcm1lciB9IGZyb20gJy4uL2RlY29yYXRvcnMvZW50aXR5LW9wdGlvbnMnO1xuXG5jb25zdCBGUk9NID0gJ2Zyb21TZXJ2ZXInO1xuY29uc3QgVE8gPSAndG9TZXJ2ZXInO1xuXG50eXBlIFRyYW5zZm9ybUZuID0gKHZhbHVlOiBhbnksIGNyaXRlcmlhPzogYW55KSA9PiBhbnk7XG5jb25zdCBpZGVudGl0eSA9IHZhbHVlID0+IHZhbHVlO1xuXG5leHBvcnQgY29uc3QgZ2V0VHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm06IElFbnRpdHlUcmFuc2Zvcm1lcltdLCBwcm9wOiBzdHJpbmcpOiBUcmFuc2Zvcm1GbltdID0+XG4gICEhdHJhbnNmb3JtICYmICEhdHJhbnNmb3JtLmxlbmd0aFxuICAgID8gdHJhbnNmb3JtLmZpbHRlcih0eCA9PiAhIXR4W3Byb3BdKS5tYXAodHggPT4gdHhbcHJvcF0pIC8vIHNlbGVjdCBjdXN0b20gdHJhbnNmb3JtYXRpb25zXG4gICAgOiBbaWRlbnRpdHldOyAvLyBwcm92aWRlIGlkZW50aXR5IHRyYW5zZm9ybWF0aW9uIGFzIGRlZmF1bHRcblxuZXhwb3J0IGNvbnN0IGFwcGx5VHJhbnNmb3JtcyA9XG4gICh0cmFuc2Zvcm1zOiBUcmFuc2Zvcm1GbltdLCBjcml0ZXJpYT86IGFueSkgPT5cbiAgKG9yaWdpbmFsRW50aXR5OiBhbnkpOiBhbnkgPT5cbiAgICB0cmFuc2Zvcm1zLnJlZHVjZSgoZW50aXR5LCB0cmFuc2Zvcm0pID0+IHRyYW5zZm9ybShlbnRpdHksIGNyaXRlcmlhKSwgeyAuLi5vcmlnaW5hbEVudGl0eSB9KTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybVNpbmdsZUZyb21TZXJ2ZXIgPVxuICA8VE1vZGVsPihlbnRpdHlJbmZvOiBJRW50aXR5SW5mbywgY3JpdGVyaWE/OiBhbnkpID0+XG4gIChlbnRpdHk6IGFueSk6IFRNb2RlbCA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtcyA9IGdldFRyYW5zZm9ybXMoZW50aXR5SW5mby50cmFuc2Zvcm0sIEZST00pO1xuICAgIHJldHVybiBhcHBseVRyYW5zZm9ybXModHJhbnNmb3JtcywgY3JpdGVyaWEpKGVudGl0eSk7XG4gIH07XG5cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1BcnJheUZyb21TZXJ2ZXIgPVxuICA8VE1vZGVsPihlbnRpdHlJbmZvOiBJRW50aXR5SW5mbywgY3JpdGVyaWE/OiBhbnkpID0+XG4gIChlbnRpdGllczogVE1vZGVsW10pOiBUTW9kZWxbXSA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtcyA9IGdldFRyYW5zZm9ybXMoZW50aXR5SW5mby50cmFuc2Zvcm0sIEZST00pO1xuICAgIHJldHVybiBlbnRpdGllcy5tYXAoYXBwbHlUcmFuc2Zvcm1zKHRyYW5zZm9ybXMsIGNyaXRlcmlhKSk7XG4gIH07XG5cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1TaW5nbGVUb1NlcnZlciA9XG4gIDxUTW9kZWw+KGVudGl0eUluZm86IElFbnRpdHlJbmZvLCBjcml0ZXJpYT86IGFueSkgPT5cbiAgKG9yaWdpbmFsRW50aXR5OiBUTW9kZWwpOiBhbnkgPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybXMgPSBnZXRUcmFuc2Zvcm1zKGVudGl0eUluZm8udHJhbnNmb3JtLCBUTykucmV2ZXJzZSgpO1xuICAgIHJldHVybiBhcHBseVRyYW5zZm9ybXModHJhbnNmb3JtcywgY3JpdGVyaWEpKG9yaWdpbmFsRW50aXR5KTtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybUFycmF5VG9TZXJ2ZXIgPVxuICA8VE1vZGVsPihlbnRpdHlJbmZvOiBJRW50aXR5SW5mbywgY3JpdGVyaWE/OiBhbnkpID0+XG4gIChlbnRpdGllczogVE1vZGVsW10pOiBhbnlbXSA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtcyA9IGdldFRyYW5zZm9ybXMoZW50aXR5SW5mby50cmFuc2Zvcm0sIFRPKS5yZXZlcnNlKCk7XG4gICAgcmV0dXJuIGVudGl0aWVzLm1hcChhcHBseVRyYW5zZm9ybXModHJhbnNmb3JtcywgY3JpdGVyaWEpKTtcbiAgfTtcblxuLy8gVXNlciB1dGlsaXRpZXNcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybUVudGl0eUZyb21TZXJ2ZXIgPSA8VE1vZGVsPihlbnRpdHlJbmZvOiBJRW50aXR5SW5mbywgZW50aXR5OiBhbnksIGNyaXRlcmlhPzogYW55KTogVE1vZGVsID0+XG4gIHRyYW5zZm9ybVNpbmdsZUZyb21TZXJ2ZXI8VE1vZGVsPihlbnRpdHlJbmZvLCBjcml0ZXJpYSkoZW50aXR5KTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybUVudGl0aWVzRnJvbVNlcnZlciA9IDxUTW9kZWw+KGVudGl0eUluZm86IElFbnRpdHlJbmZvLCBlbnRpdGllczogYW55W10sIGNyaXRlcmlhPzogYW55KTogVE1vZGVsW10gPT5cbiAgdHJhbnNmb3JtQXJyYXlGcm9tU2VydmVyPFRNb2RlbD4oZW50aXR5SW5mbywgY3JpdGVyaWEpKGVudGl0aWVzKTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybUVudGl0eVRvU2VydmVyID0gPFRNb2RlbD4oZW50aXR5SW5mbzogSUVudGl0eUluZm8sIGVudGl0eTogVE1vZGVsLCBjcml0ZXJpYT86IGFueSk6IGFueSA9PlxuICB0cmFuc2Zvcm1TaW5nbGVUb1NlcnZlcjxUTW9kZWw+KGVudGl0eUluZm8sIGNyaXRlcmlhKShlbnRpdHkpO1xuXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtRW50aXRpZXNUb1NlcnZlciA9IDxUTW9kZWw+KGVudGl0eUluZm86IElFbnRpdHlJbmZvLCBlbnRpdGllczogYW55W10sIGNyaXRlcmlhPzogYW55KTogVE1vZGVsW10gPT5cbiAgdHJhbnNmb3JtQXJyYXlUb1NlcnZlcjxUTW9kZWw+KGVudGl0eUluZm8sIGNyaXRlcmlhKShlbnRpdGllcyk7XG4iXX0=