import { EntityActionTypes } from '../actions/action-types';
import { Replace, ReplaceFailure, ReplaceMany, ReplaceManyFailure, ReplaceManySuccess, ReplaceSuccess } from '../actions/replace-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createReplaceAction = (Type) => cacheOnType(Type, EntityActionTypes.Replace, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Replace, Type), ({ entity, criteria, correlationId }) => new Replace(Type, entity, criteria, correlationId)));
export const createReplaceSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.ReplaceSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.ReplaceSuccess, Type), ({ entity, criteria, correlationId }) => new ReplaceSuccess(Type, entity, criteria, correlationId)));
export const createReplaceFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.ReplaceFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.ReplaceFailure, Type), ({ error, entity, criteria, correlationId }) => new ReplaceFailure(Type, error, entity, criteria, correlationId)));
export const createReplaceManyAction = (Type) => cacheOnType(Type, EntityActionTypes.ReplaceMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.ReplaceMany, Type), ({ entities, criteria, correlationId }) => new ReplaceMany(Type, entities, criteria, correlationId)));
export const createReplaceManySuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.ReplaceManySuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.ReplaceManySuccess, Type), ({ entities, criteria, correlationId }) => new ReplaceManySuccess(Type, entities, criteria, correlationId)));
export const createReplaceManyFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.ReplaceManyFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.ReplaceManyFailure, Type), ({ error, entities, criteria, correlationId }) => new ReplaceManyFailure(Type, error, entities, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,