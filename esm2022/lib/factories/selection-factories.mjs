import { EntityActionTypes } from '../actions/action-types';
import { Select, Selected, SelectedMany, SelectedMore, SelectMany, SelectManyByKeys, SelectMore, SelectMoreByKeys, SelectByKey } from '../actions/selection-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createSelectAction = (Type) => cacheOnType(Type, EntityActionTypes.Select, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Select, Type), ({ entity, correlationId }) => new Select(Type, entity, correlationId)));
export const createSelectByKeyAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectByKey, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectByKey, Type), ({ key, correlationId }) => new SelectByKey(Type, key, correlationId)));
export const createSelectManyAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectMany, Type), ({ entities, correlationId }) => new SelectMany(Type, entities, correlationId)));
export const createSelectMoreAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectMore, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectMore, Type), ({ entities, correlationId }) => new SelectMore(Type, entities, correlationId)));
export const createSelectManyByKeysAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectManyByKeys, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectManyByKeys, Type), ({ keys, correlationId }) => new SelectManyByKeys(Type, keys, correlationId)));
export const createSelectMoreByKeysAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectMoreByKeys, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectMoreByKeys, Type), ({ keys, correlationId }) => new SelectMoreByKeys(Type, keys, correlationId)));
export const createSelectedAction = (Type) => cacheOnType(Type, EntityActionTypes.Selected, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Selected, Type), ({ entity, correlationId }) => new Selected(Type, entity, correlationId)));
export const createSelectedManyAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectedMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectedMany, Type), ({ entities, correlationId }) => new SelectedMany(Type, entities, correlationId)));
export const createSelectedMoreAction = (Type) => cacheOnType(Type, EntityActionTypes.SelectedMore, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.SelectedMore, Type), ({ entities, correlationId }) => new SelectedMore(Type, entities, correlationId)));
//# sourceMappingURL=data:application/json;base64,