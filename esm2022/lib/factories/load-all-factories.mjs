import { EntityActionTypes } from '../actions/action-types';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
import { LoadAll, LoadAllFailure, LoadAllIfNecessary, LoadAllSuccess } from '../actions/load-all-actions';
export const createLoadAllAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadAll, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadAll, Type), ({ criteria, correlationId } = {}) => new LoadAll(Type, criteria, correlationId)));
export const createLoadAllIfNecessaryAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadAllIfNecessary, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadAllIfNecessary, Type), ({ maxAge, criteria, correlationId } = {}) => new LoadAllIfNecessary(Type, maxAge, criteria, correlationId)));
export const createLoadAllSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadAllSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadAllSuccess, Type), ({ entities, criteria, correlationId }) => new LoadAllSuccess(Type, entities, criteria, correlationId)));
export const createLoadAllFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadAllFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadAllFailure, Type), ({ error, criteria, correlationId }) => new LoadAllFailure(Type, error, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1hbGwtZmFjdG9yaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL2ZhY3Rvcmllcy9sb2FkLWFsbC1mYWN0b3JpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsMEJBQTBCLEVBQWlCLE1BQU0sUUFBUSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTFHLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLElBQWtCLEVBQzJDLEVBQUUsQ0FDL0QsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ2hELDBCQUEwQixDQUN4QixhQUFhLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUM5QyxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsS0FBb0IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUNoRyxDQUNGLENBQUM7QUFNSixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUM1QyxJQUFrQixFQUNnRSxFQUFFLENBQ3BGLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQzNELDBCQUEwQixDQUN4QixhQUFhLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEVBQ3pELENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsS0FBOEIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUNySSxDQUNGLENBQUM7QUFNSixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUN4QyxJQUFrQixFQUNnRSxFQUFFLENBQ3BGLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUN2RCwwQkFBMEIsQ0FDeEIsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFDckQsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUErQixFQUFFLEVBQUUsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDcEksQ0FDRixDQUFDO0FBTUosTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FDeEMsSUFBa0IsRUFDZ0UsRUFBRSxDQUNwRixXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FDdkQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQ3JELENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBK0IsRUFBRSxFQUFFLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQzlILENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbkNyZWF0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBFbnRpdHlBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7IFROZXcgfSBmcm9tICcuLi9hY3Rpb25zL21vZGVsLWNvbnN0cnVjdG9yJztcbmltcG9ydCB7IHNldEFjdGlvblR5cGUgfSBmcm9tICcuLi9hY3Rpb25zL3V0aWwnO1xuaW1wb3J0IHsgY2FjaGVPblR5cGUsIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uLCBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IExvYWRBbGwsIExvYWRBbGxGYWlsdXJlLCBMb2FkQWxsSWZOZWNlc3NhcnksIExvYWRBbGxTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLWFsbC1hY3Rpb25zJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvYWRBbGxBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgU3RhbmRhcmRQcm9wcz4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IFN0YW5kYXJkUHJvcHMpID0+IExvYWRBbGw8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuTG9hZEFsbCwgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZEFsbCwgVHlwZSksXG4gICAgICAoeyBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9OiBTdGFuZGFyZFByb3BzID0ge30pID0+IG5ldyBMb2FkQWxsKFR5cGUsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkQWxsSWZOZWNlc3NhcnlQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICBtYXhBZ2U/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkQWxsSWZOZWNlc3NhcnlBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgTG9hZEFsbElmTmVjZXNzYXJ5UHJvcHM+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkQWxsSWZOZWNlc3NhcnlQcm9wcykgPT4gTG9hZEFsbElmTmVjZXNzYXJ5PFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRBbGxJZk5lY2Vzc2FyeSwgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZEFsbElmTmVjZXNzYXJ5LCBUeXBlKSxcbiAgICAgICh7IG1heEFnZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZEFsbElmTmVjZXNzYXJ5UHJvcHMgPSB7fSkgPT4gbmV3IExvYWRBbGxJZk5lY2Vzc2FyeShUeXBlLCBtYXhBZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkQWxsU3VjY2Vzc1Byb3BzPFRNb2RlbD4gZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgZW50aXRpZXM6IFRNb2RlbFtdO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZEFsbFN1Y2Nlc3NBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgTG9hZEFsbFN1Y2Nlc3NQcm9wczxUTW9kZWw+PihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogTG9hZEFsbFN1Y2Nlc3NQcm9wczxUTW9kZWw+KSA9PiBMb2FkQWxsU3VjY2VzczxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkQWxsU3VjY2VzcywgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZEFsbFN1Y2Nlc3MsIFR5cGUpLFxuICAgICAgKHsgZW50aXRpZXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRBbGxTdWNjZXNzUHJvcHM8VE1vZGVsPikgPT4gbmV3IExvYWRBbGxTdWNjZXNzKFR5cGUsIGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZEFsbEZhaWx1cmVQcm9wczxUTW9kZWw+IGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gIGVycm9yOiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkQWxsRmFpbHVyZUFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkQWxsRmFpbHVyZVByb3BzPFRNb2RlbD4+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkQWxsRmFpbHVyZVByb3BzPFRNb2RlbD4pID0+IExvYWRBbGxGYWlsdXJlPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRBbGxGYWlsdXJlLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkQWxsRmFpbHVyZSwgVHlwZSksXG4gICAgICAoeyBlcnJvciwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZEFsbEZhaWx1cmVQcm9wczxUTW9kZWw+KSA9PiBuZXcgTG9hZEFsbEZhaWx1cmUoVHlwZSwgZXJyb3IsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcbiJdfQ==