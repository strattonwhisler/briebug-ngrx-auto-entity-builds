import { EntityActionTypes } from '../actions/action-types';
import { Upsert, UpsertFailure, UpsertMany, UpsertManyFailure, UpsertManySuccess, UpsertSuccess } from '../actions/upsert-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createUpsertAction = (Type) => cacheOnType(Type, EntityActionTypes.Upsert, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Upsert, Type), ({ entity, criteria, correlationId }) => new Upsert(Type, entity, criteria, correlationId)));
export const createUpsertSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.UpsertSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpsertSuccess, Type), ({ entity, criteria, correlationId }) => new UpsertSuccess(Type, entity, criteria, correlationId)));
export const createUpsertFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.UpsertFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpsertFailure, Type), ({ error, entity, criteria, correlationId }) => new UpsertFailure(Type, error, entity, criteria, correlationId)));
export const createUpsertManyAction = (Type) => cacheOnType(Type, EntityActionTypes.UpsertMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpsertMany, Type), ({ entities, criteria, correlationId }) => new UpsertMany(Type, entities, criteria, correlationId)));
export const createUpsertManySuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.UpsertManySuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpsertManySuccess, Type), ({ entities, criteria, correlationId }) => new UpsertManySuccess(Type, entities, criteria, correlationId)));
export const createUpsertManyFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.UpsertManyFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpsertManyFailure, Type), ({ error, entities, criteria, correlationId }) => new UpsertManyFailure(Type, error, entities, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,