import { EntityActionTypes } from '../actions/action-types';
import { Delete, DeleteFailure, DeleteMany, DeleteManyFailure, DeleteManySuccess, DeleteSuccess } from '../actions/delete-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createDeleteAction = (Type) => cacheOnType(Type, EntityActionTypes.Delete, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Delete, Type), ({ entity, criteria, correlationId }) => new Delete(Type, entity, criteria, correlationId)));
export const createDeleteSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteSuccess, Type), ({ entity, criteria, correlationId }) => new DeleteSuccess(Type, entity, criteria, correlationId)));
export const createDeleteFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteFailure, Type), ({ error, entity, criteria, correlationId }) => new DeleteFailure(Type, error, entity, criteria, correlationId)));
export const createDeleteManyAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteMany, Type), ({ entities, criteria, correlationId }) => new DeleteMany(Type, entities, criteria, correlationId)));
export const createDeleteManySuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteManySuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteManySuccess, Type), ({ entities, criteria, correlationId }) => new DeleteManySuccess(Type, entities, criteria, correlationId)));
export const createDeleteManyFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteManyFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteManyFailure, Type), ({ error, entities, criteria, correlationId }) => new DeleteManyFailure(Type, error, entities, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,