import { EntityActionTypes } from '../actions/action-types';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
import { LoadRange, LoadRangeFailure, LoadRangeIfNecessary, LoadRangeSuccess } from '../actions/load-range-actions';
export const createLoadRangeAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadRange, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadRange, Type), ({ range, criteria, correlationId }) => new LoadRange(Type, range, criteria, correlationId)));
export const createLoadRangeIfNecessaryAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadRangeIfNecessary, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadRangeIfNecessary, Type), ({ range, maxAge, criteria, correlationId }) => new LoadRangeIfNecessary(Type, range, maxAge, criteria, correlationId)));
export const createLoadRangeSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadRangeSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadRangeSuccess, Type), ({ entities, rangeInfo, criteria, correlationId }) => new LoadRangeSuccess(Type, entities, rangeInfo, criteria, correlationId)));
export const createLoadRangeFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadRangeFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadRangeFailure, Type), ({ error, range, criteria, correlationId }) => new LoadRangeFailure(Type, error, range, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1yYW5nZS1mYWN0b3JpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvZmFjdG9yaWVzL2xvYWQtcmFuZ2UtZmFjdG9yaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLDBCQUEwQixFQUFpQixNQUFNLFFBQVEsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFNcEgsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FDbkMsSUFBa0IsRUFDOEMsRUFBRSxDQUNsRSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FDbEQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQ2hELENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQzVHLENBQ0YsQ0FBQztBQU1KLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLENBQzlDLElBQWtCLEVBQ29FLEVBQUUsQ0FDeEYsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsQ0FDN0QsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsRUFDM0QsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBNkIsRUFBRSxFQUFFLENBQ3hFLElBQUksb0JBQW9CLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUN6RSxDQUNGLENBQUM7QUFPSixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUMxQyxJQUFrQixFQUNvRSxFQUFFLENBQ3hGLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQ3pELDBCQUEwQixDQUN4QixhQUFhLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEVBQ3ZELENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWlDLEVBQUUsRUFBRSxDQUNsRixJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDM0UsQ0FDRixDQUFDO0FBT0osTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsQ0FDMUMsSUFBa0IsRUFDb0UsRUFBRSxDQUN4RixXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUN6RCwwQkFBMEIsQ0FDeEIsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxFQUN2RCxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFpQyxFQUFFLEVBQUUsQ0FDM0UsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQ3BFLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbkNyZWF0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBFbnRpdHlBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7IFROZXcgfSBmcm9tICcuLi9hY3Rpb25zL21vZGVsLWNvbnN0cnVjdG9yJztcbmltcG9ydCB7IHNldEFjdGlvblR5cGUgfSBmcm9tICcuLi9hY3Rpb25zL3V0aWwnO1xuaW1wb3J0IHsgSVJhbmdlSW5mbywgUmFuZ2UgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgY2FjaGVPblR5cGUsIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uLCBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IExvYWRSYW5nZSwgTG9hZFJhbmdlRmFpbHVyZSwgTG9hZFJhbmdlSWZOZWNlc3NhcnksIExvYWRSYW5nZVN1Y2Nlc3MgfSBmcm9tICcuLi9hY3Rpb25zL2xvYWQtcmFuZ2UtYWN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZFJhbmdlUHJvcHMgZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgcmFuZ2U6IFJhbmdlO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZFJhbmdlQWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIFN0YW5kYXJkUHJvcHM+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkUmFuZ2VQcm9wcykgPT4gTG9hZFJhbmdlPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRSYW5nZSwgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZFJhbmdlLCBUeXBlKSxcbiAgICAgICh7IHJhbmdlLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9OiBMb2FkUmFuZ2VQcm9wcykgPT4gbmV3IExvYWRSYW5nZShUeXBlLCByYW5nZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpXG4gICAgKVxuICApO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRSYW5nZUlmTmVjZXNzYXJ5UHJvcHMgZXh0ZW5kcyBMb2FkUmFuZ2VQcm9wcyB7XG4gIG1heEFnZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvYWRSYW5nZUlmTmVjZXNzYXJ5QWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIExvYWRSYW5nZUlmTmVjZXNzYXJ5UHJvcHM+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkUmFuZ2VJZk5lY2Vzc2FyeVByb3BzKSA9PiBMb2FkUmFuZ2VJZk5lY2Vzc2FyeTxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUmFuZ2VJZk5lY2Vzc2FyeSwgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZFJhbmdlSWZOZWNlc3NhcnksIFR5cGUpLFxuICAgICAgKHsgcmFuZ2UsIG1heEFnZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZFJhbmdlSWZOZWNlc3NhcnlQcm9wcykgPT5cbiAgICAgICAgbmV3IExvYWRSYW5nZUlmTmVjZXNzYXJ5KFR5cGUsIHJhbmdlLCBtYXhBZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkUmFuZ2VTdWNjZXNzUHJvcHM8VE1vZGVsPiBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICBlbnRpdGllczogVE1vZGVsW107XG4gIHJhbmdlSW5mbzogSVJhbmdlSW5mbztcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvYWRSYW5nZVN1Y2Nlc3NBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgTG9hZFJhbmdlU3VjY2Vzc1Byb3BzPFRNb2RlbD4+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkUmFuZ2VTdWNjZXNzUHJvcHM8VE1vZGVsPikgPT4gTG9hZFJhbmdlU3VjY2VzczxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUmFuZ2VTdWNjZXNzLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUmFuZ2VTdWNjZXNzLCBUeXBlKSxcbiAgICAgICh7IGVudGl0aWVzLCByYW5nZUluZm8sIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRSYW5nZVN1Y2Nlc3NQcm9wczxUTW9kZWw+KSA9PlxuICAgICAgICBuZXcgTG9hZFJhbmdlU3VjY2VzcyhUeXBlLCBlbnRpdGllcywgcmFuZ2VJbmZvLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZFJhbmdlRmFpbHVyZVByb3BzPFRNb2RlbD4gZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgZXJyb3I6IGFueTtcbiAgcmFuZ2U6IFJhbmdlO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZFJhbmdlRmFpbHVyZUFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkUmFuZ2VGYWlsdXJlUHJvcHM8VE1vZGVsPj4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IExvYWRSYW5nZUZhaWx1cmVQcm9wczxUTW9kZWw+KSA9PiBMb2FkUmFuZ2VGYWlsdXJlPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRSYW5nZUZhaWx1cmUsICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkxvYWRSYW5nZUZhaWx1cmUsIFR5cGUpLFxuICAgICAgKHsgZXJyb3IsIHJhbmdlLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9OiBMb2FkUmFuZ2VGYWlsdXJlUHJvcHM8VE1vZGVsPikgPT5cbiAgICAgICAgbmV3IExvYWRSYW5nZUZhaWx1cmUoVHlwZSwgZXJyb3IsIHJhbmdlLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG4iXX0=