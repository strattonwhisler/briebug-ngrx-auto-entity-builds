import { EntityActionTypes } from '../actions/action-types';
import { Load, LoadFailure, LoadIfNecessary, LoadSuccess } from '../actions/load-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createLoadAction = (Type) => cacheOnType(Type, EntityActionTypes.Load, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Load, Type), ({ keys, criteria, correlationId }) => new Load(Type, keys, criteria, correlationId)));
export const createLoadIfNecessaryAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadIfNecessary, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadIfNecessary, Type), ({ keys, maxAge, criteria, correlationId } = {}) => new LoadIfNecessary(Type, keys, maxAge, criteria, correlationId)));
export const createLoadSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadSuccess, Type), ({ entity, keys, criteria, correlationId }) => new LoadSuccess(Type, entity, keys, criteria, correlationId)));
export const createLoadFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadFailure, Type), ({ error, keys, criteria, correlationId }) => new LoadFailure(Type, error, keys, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1mYWN0b3JpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvZmFjdG9yaWVzL2xvYWQtZmFjdG9yaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUUxRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBaUIsTUFBTSxRQUFRLENBQUM7QUFNaEYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDOUIsSUFBa0IsRUFDb0MsRUFBRSxDQUN4RCxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FDN0MsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQzNDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDaEcsQ0FDRixDQUFDO0FBTUosTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsQ0FDekMsSUFBa0IsRUFDMEQsRUFBRSxDQUM5RSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FDeEQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEVBQ3RELENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLEtBQTJCLEVBQUUsRUFBRSxFQUFFLENBQ3ZFLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDbkUsQ0FDRixDQUFDO0FBTUosTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDckMsSUFBa0IsRUFDMEQsRUFBRSxDQUM5RSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FDcEQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQ2xELENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQTRCLEVBQUUsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDdEksQ0FDRixDQUFDO0FBTUosTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDckMsSUFBa0IsRUFDMEQsRUFBRSxDQUM5RSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FDcEQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQ2xELENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQTRCLEVBQUUsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDcEksQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uQ3JlYXRvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgTG9hZCwgTG9hZEZhaWx1cmUsIExvYWRJZk5lY2Vzc2FyeSwgTG9hZFN1Y2Nlc3MgfSBmcm9tICcuLi9hY3Rpb25zL2xvYWQtYWN0aW9ucyc7XG5pbXBvcnQgeyBUTmV3IH0gZnJvbSAnLi4vYWN0aW9ucy9tb2RlbC1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBzZXRBY3Rpb25UeXBlIH0gZnJvbSAnLi4vYWN0aW9ucy91dGlsJztcbmltcG9ydCB7IGNhY2hlT25UeXBlLCBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbiwgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZFByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gIGtleXM/OiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkQWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIExvYWRQcm9wcz4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IExvYWRQcm9wcykgPT4gTG9hZDxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkLCBUeXBlKSxcbiAgICAgICh7IGtleXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRQcm9wcykgPT4gbmV3IExvYWQoVHlwZSwga2V5cywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpXG4gICAgKVxuICApO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRJZk5lY2Vzc2FyeVByb3BzIGV4dGVuZHMgTG9hZFByb3BzIHtcbiAgbWF4QWdlPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZElmTmVjZXNzYXJ5QWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIExvYWRJZk5lY2Vzc2FyeVByb3BzPihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogTG9hZElmTmVjZXNzYXJ5UHJvcHMpID0+IExvYWRJZk5lY2Vzc2FyeTxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkSWZOZWNlc3NhcnksICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkxvYWRJZk5lY2Vzc2FyeSwgVHlwZSksXG4gICAgICAoeyBrZXlzLCBtYXhBZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRJZk5lY2Vzc2FyeVByb3BzID0ge30pID0+XG4gICAgICAgIG5ldyBMb2FkSWZOZWNlc3NhcnkoVHlwZSwga2V5cywgbWF4QWdlLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZFN1Y2Nlc3NQcm9wczxUTW9kZWw+IGV4dGVuZHMgTG9hZFByb3BzIHtcbiAgZW50aXR5OiBUTW9kZWw7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkU3VjY2Vzc0FjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkU3VjY2Vzc1Byb3BzPFRNb2RlbD4+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkU3VjY2Vzc1Byb3BzPFRNb2RlbD4pID0+IExvYWRTdWNjZXNzPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRTdWNjZXNzLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkU3VjY2VzcywgVHlwZSksXG4gICAgICAoeyBlbnRpdHksIGtleXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRTdWNjZXNzUHJvcHM8VE1vZGVsPikgPT4gbmV3IExvYWRTdWNjZXNzKFR5cGUsIGVudGl0eSwga2V5cywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpXG4gICAgKVxuICApO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRGYWlsdXJlUHJvcHM8VE1vZGVsPiBleHRlbmRzIExvYWRQcm9wcyB7XG4gIGVycm9yOiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkRmFpbHVyZUFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkRmFpbHVyZVByb3BzPFRNb2RlbD4+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkRmFpbHVyZVByb3BzPFRNb2RlbD4pID0+IExvYWRGYWlsdXJlPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRGYWlsdXJlLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkRmFpbHVyZSwgVHlwZSksXG4gICAgICAoeyBlcnJvciwga2V5cywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZEZhaWx1cmVQcm9wczxUTW9kZWw+KSA9PiBuZXcgTG9hZEZhaWx1cmUoVHlwZSwgZXJyb3IsIGtleXMsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcbiJdfQ==