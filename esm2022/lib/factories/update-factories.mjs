import { EntityActionTypes } from '../actions/action-types';
import { Update, UpdateFailure, UpdateMany, UpdateManyFailure, UpdateManySuccess, UpdateSuccess } from '../actions/update-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createUpdateAction = (Type) => cacheOnType(Type, EntityActionTypes.Update, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Update, Type), ({ entity, criteria, correlationId }) => new Update(Type, entity, criteria, correlationId)));
export const createUpdateSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.UpdateSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpdateSuccess, Type), ({ entity, criteria, correlationId }) => new UpdateSuccess(Type, entity, criteria, correlationId)));
export const createUpdateFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.UpdateFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpdateFailure, Type), ({ error, entity, criteria, correlationId }) => new UpdateFailure(Type, error, entity, criteria, correlationId)));
export const createUpdateManyAction = (Type) => cacheOnType(Type, EntityActionTypes.UpdateMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpdateMany, Type), ({ entities, criteria, correlationId }) => new UpdateMany(Type, entities, criteria, correlationId)));
export const createUpdateManySuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.UpdateManySuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpdateManySuccess, Type), ({ entities, criteria, correlationId }) => new UpdateManySuccess(Type, entities, criteria, correlationId)));
export const createUpdateManyFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.UpdateManyFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.UpdateManyFailure, Type), ({ error, entities, criteria, correlationId }) => new UpdateManyFailure(Type, error, entities, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,