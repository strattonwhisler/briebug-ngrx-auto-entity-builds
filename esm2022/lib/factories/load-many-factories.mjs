import { EntityActionTypes } from '../actions/action-types';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
import { LoadMany, LoadManyFailure, LoadManyIfNecessary, LoadManySuccess } from '../actions/load-many-actions';
export const createLoadManyAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadMany, Type), ({ criteria, correlationId } = {}) => new LoadMany(Type, criteria, correlationId)));
export const createLoadManyIfNecessaryAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadManyIfNecessary, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadManyIfNecessary, Type), ({ maxAge, criteria, correlationId } = {}) => new LoadManyIfNecessary(Type, maxAge, criteria, correlationId)));
export const createLoadManySuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadManySuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadManySuccess, Type), ({ entities, criteria, correlationId }) => new LoadManySuccess(Type, entities, criteria, correlationId)));
export const createLoadManyFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadManyFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadManyFailure, Type), ({ error, criteria, correlationId }) => new LoadManyFailure(Type, error, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1tYW55LWZhY3Rvcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncngtYXV0by1lbnRpdHkvc3JjL2xpYi9mYWN0b3JpZXMvbG9hZC1tYW55LWZhY3Rvcmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBaUIsTUFBTSxRQUFRLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFL0csTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FDbEMsSUFBa0IsRUFDNEMsRUFBRSxDQUNoRSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FDakQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQy9DLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxLQUFvQixFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQ2pHLENBQ0YsQ0FBQztBQU1KLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLENBQzdDLElBQWtCLEVBQ2tFLEVBQUUsQ0FDdEYsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsQ0FDNUQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsRUFDMUQsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxLQUErQixFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksbUJBQW1CLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQ3ZJLENBQ0YsQ0FBQztBQU1KLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLElBQWtCLEVBQ2tFLEVBQUUsQ0FDdEYsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLENBQ3hELDBCQUEwQixDQUN4QixhQUFhLENBQUMsaUJBQWlCLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUN0RCxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWdDLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUN0SSxDQUNGLENBQUM7QUFNSixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUN6QyxJQUFrQixFQUNrRSxFQUFFLENBQ3RGLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUN4RCwwQkFBMEIsQ0FDeEIsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFDdEQsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFnQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDaEksQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uQ3JlYXRvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgVE5ldyB9IGZyb20gJy4uL2FjdGlvbnMvbW9kZWwtY29uc3RydWN0b3InO1xuaW1wb3J0IHsgc2V0QWN0aW9uVHlwZSB9IGZyb20gJy4uL2FjdGlvbnMvdXRpbCc7XG5pbXBvcnQgeyBjYWNoZU9uVHlwZSwgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24sIFN0YW5kYXJkUHJvcHMgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgTG9hZE1hbnksIExvYWRNYW55RmFpbHVyZSwgTG9hZE1hbnlJZk5lY2Vzc2FyeSwgTG9hZE1hbnlTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLW1hbnktYWN0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkTWFueUFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBTdGFuZGFyZFByb3BzPihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogU3RhbmRhcmRQcm9wcykgPT4gTG9hZE1hbnk8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuTG9hZE1hbnksICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkxvYWRNYW55LCBUeXBlKSxcbiAgICAgICh7IGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IFN0YW5kYXJkUHJvcHMgPSB7fSkgPT4gbmV3IExvYWRNYW55KFR5cGUsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkTWFueUlmTmVjZXNzYXJ5UHJvcHMgZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgbWF4QWdlPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZE1hbnlJZk5lY2Vzc2FyeUFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkTWFueUlmTmVjZXNzYXJ5UHJvcHM+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkTWFueUlmTmVjZXNzYXJ5UHJvcHMpID0+IExvYWRNYW55SWZOZWNlc3Nhcnk8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuTG9hZE1hbnlJZk5lY2Vzc2FyeSwgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZE1hbnlJZk5lY2Vzc2FyeSwgVHlwZSksXG4gICAgICAoeyBtYXhBZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRNYW55SWZOZWNlc3NhcnlQcm9wcyA9IHt9KSA9PiBuZXcgTG9hZE1hbnlJZk5lY2Vzc2FyeShUeXBlLCBtYXhBZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkTWFueVN1Y2Nlc3NQcm9wczxUTW9kZWw+IGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gIGVudGl0aWVzOiBUTW9kZWxbXTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvYWRNYW55U3VjY2Vzc0FjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkTWFueVN1Y2Nlc3NQcm9wczxUTW9kZWw+PihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogTG9hZE1hbnlTdWNjZXNzUHJvcHM8VE1vZGVsPikgPT4gTG9hZE1hbnlTdWNjZXNzPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRNYW55U3VjY2VzcywgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZE1hbnlTdWNjZXNzLCBUeXBlKSxcbiAgICAgICh7IGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9OiBMb2FkTWFueVN1Y2Nlc3NQcm9wczxUTW9kZWw+KSA9PiBuZXcgTG9hZE1hbnlTdWNjZXNzKFR5cGUsIGVudGl0aWVzLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZE1hbnlGYWlsdXJlUHJvcHM8VE1vZGVsPiBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICBlcnJvcjogYW55O1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZE1hbnlGYWlsdXJlQWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIExvYWRNYW55RmFpbHVyZVByb3BzPFRNb2RlbD4+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBMb2FkTWFueUZhaWx1cmVQcm9wczxUTW9kZWw+KSA9PiBMb2FkTWFueUZhaWx1cmU8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuTG9hZE1hbnlGYWlsdXJlLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkTWFueUZhaWx1cmUsIFR5cGUpLFxuICAgICAgKHsgZXJyb3IsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkIH06IExvYWRNYW55RmFpbHVyZVByb3BzPFRNb2RlbD4pID0+IG5ldyBMb2FkTWFueUZhaWx1cmUoVHlwZSwgZXJyb3IsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcbiJdfQ==