import { EntityActionTypes } from '../actions/action-types';
import { DeleteByKey, DeleteByKeyFailure, DeleteManyByKeys, DeleteManyByKeysFailure, DeleteManyByKeysSuccess, DeleteByKeySuccess } from '../actions/delete-by-key-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createDeleteByKeyAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteByKey, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteByKey, Type), ({ key, criteria, correlationId }) => new DeleteByKey(Type, key, criteria, correlationId)));
export const createDeleteByKeySuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteByKeySuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteByKeySuccess, Type), ({ key, criteria, correlationId }) => new DeleteByKeySuccess(Type, key, criteria, correlationId)));
export const createDeleteByKeyFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteByKeyFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteByKeyFailure, Type), ({ error, key, criteria, correlationId }) => new DeleteByKeyFailure(Type, error, key, criteria, correlationId)));
export const createDeleteManyByKeysAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteManyByKeys, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteManyByKeys, Type), ({ keys, criteria, correlationId }) => new DeleteManyByKeys(Type, keys, criteria, correlationId)));
export const createDeleteManyByKeysSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteManyByKeysSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteManyByKeysSuccess, Type), ({ keys, criteria, correlationId }) => new DeleteManyByKeysSuccess(Type, keys, criteria, correlationId)));
export const createDeleteManyByKeysFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.DeleteManyByKeysFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeleteManyByKeysFailure, Type), ({ error, keys, criteria, correlationId }) => new DeleteManyByKeysFailure(Type, error, keys, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,