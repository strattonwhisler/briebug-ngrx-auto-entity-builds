import { EntityActionTypes } from '../actions/action-types';
import { Deselect, DeselectAll, Deselected, DeselectedMany, DeselectMany, DeselectManyByKeys } from '../actions/deselection-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createDeselectAction = (Type) => cacheOnType(Type, EntityActionTypes.Deselect, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Deselect, Type), ({ correlationId } = {}) => new Deselect(Type, correlationId)));
export const createDeselectManyAction = (Type) => cacheOnType(Type, EntityActionTypes.DeselectMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeselectMany, Type), ({ entities, correlationId }) => new DeselectMany(Type, entities, correlationId)));
export const createDeselectManyByKeysAction = (Type) => cacheOnType(Type, EntityActionTypes.DeselectManyByKeys, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeselectManyByKeys, Type), ({ keys, correlationId }) => new DeselectManyByKeys(Type, keys, correlationId)));
export const createDeselectAllAction = (Type) => cacheOnType(Type, EntityActionTypes.DeselectAll, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeselectAll, Type), ({ correlationId } = {}) => new DeselectAll(Type, correlationId)));
export const createDeselectedAction = (Type) => cacheOnType(Type, EntityActionTypes.Deselected, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Deselected, Type), ({ correlationId } = {}) => new Deselected(Type, correlationId)));
export const createDeselectedManyAction = (Type) => cacheOnType(Type, EntityActionTypes.DeselectedMany, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.DeselectedMany, Type), ({ entities, correlationId }) => new DeselectedMany(Type, entities, correlationId)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzZWxlY3Rpb24tZmFjdG9yaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL2ZhY3Rvcmllcy9kZXNlbGVjdGlvbi1mYWN0b3JpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVySSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFdBQVcsRUFBbUIsMEJBQTBCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FDbEMsSUFBa0IsRUFDOEMsRUFBRSxDQUNsRSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FDakQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQy9DLENBQUMsRUFBRSxhQUFhLEtBQXNCLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUMvRSxDQUNGLENBQUM7QUFNSixNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxDQUN0QyxJQUFrQixFQUM0RCxFQUFFLENBQ2hGLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUNyRCwwQkFBMEIsQ0FDeEIsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsRUFDbkQsQ0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQTZCLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQzVHLENBQ0YsQ0FBQztBQU1KLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQzVDLElBQWtCLEVBQ2dFLEVBQUUsQ0FDcEYsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FDM0QsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFDekQsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQTJCLEVBQUUsRUFBRSxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FDeEcsQ0FDRixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDckMsSUFBa0IsRUFDaUQsRUFBRSxDQUNyRSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FDcEQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQ2xELENBQUMsRUFBRSxhQUFhLEtBQXNCLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUNsRixDQUNGLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUNwQyxJQUFrQixFQUNnRCxFQUFFLENBQ3BFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUNuRCwwQkFBMEIsQ0FDeEIsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFDakQsQ0FBQyxFQUFFLGFBQWEsS0FBc0IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQ2pGLENBQ0YsQ0FBQztBQU1KLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQ3hDLElBQWtCLEVBQ2dFLEVBQUUsQ0FDcEYsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLENBQ3ZELDBCQUEwQixDQUN4QixhQUFhLENBQUMsaUJBQWlCLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUNyRCxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBK0IsRUFBRSxFQUFFLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDaEgsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uQ3JlYXRvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgRGVzZWxlY3QsIERlc2VsZWN0QWxsLCBEZXNlbGVjdGVkLCBEZXNlbGVjdGVkTWFueSwgRGVzZWxlY3RNYW55LCBEZXNlbGVjdE1hbnlCeUtleXMgfSBmcm9tICcuLi9hY3Rpb25zL2Rlc2VsZWN0aW9uLWFjdGlvbnMnO1xuaW1wb3J0IHsgVE5ldyB9IGZyb20gJy4uL2FjdGlvbnMvbW9kZWwtY29uc3RydWN0b3InO1xuaW1wb3J0IHsgc2V0QWN0aW9uVHlwZSB9IGZyb20gJy4uL2FjdGlvbnMvdXRpbCc7XG5pbXBvcnQgeyBFbnRpdHlJZGVudGl0eSB9IGZyb20gJy4uL3R5cGVzL2VudGl0eS1pZGVudGl0eSc7XG5pbXBvcnQgeyBjYWNoZU9uVHlwZSwgQ29ycmVsYXRlZFByb3BzLCBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbiB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEZXNlbGVjdEFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBDb3JyZWxhdGVkUHJvcHM+KFxuICBUeXBlOiBUTmV3PFRNb2RlbD5cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBDb3JyZWxhdGVkUHJvcHMpID0+IERlc2VsZWN0PFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0LCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5EZXNlbGVjdCwgVHlwZSksXG4gICAgICAoeyBjb3JyZWxhdGlvbklkIH06IENvcnJlbGF0ZWRQcm9wcyA9IHt9KSA9PiBuZXcgRGVzZWxlY3QoVHlwZSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzZWxlY3RNYW55UHJvcHM8VE1vZGVsPiBleHRlbmRzIENvcnJlbGF0ZWRQcm9wcyB7XG4gIGVudGl0aWVzOiBUTW9kZWxbXTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlc2VsZWN0TWFueUFjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBEZXNlbGVjdE1hbnlQcm9wczxUTW9kZWw+PihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogRGVzZWxlY3RNYW55UHJvcHM8VE1vZGVsPikgPT4gRGVzZWxlY3RNYW55PFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0TWFueSwgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuRGVzZWxlY3RNYW55LCBUeXBlKSxcbiAgICAgICh7IGVudGl0aWVzLCBjb3JyZWxhdGlvbklkIH06IERlc2VsZWN0TWFueVByb3BzPFRNb2RlbD4pID0+IG5ldyBEZXNlbGVjdE1hbnkoVHlwZSwgZW50aXRpZXMsIGNvcnJlbGF0aW9uSWQpXG4gICAgKVxuICApO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlc2VsZWN0TWFueUJ5S2V5c1Byb3BzIGV4dGVuZHMgQ29ycmVsYXRlZFByb3BzIHtcbiAga2V5czogRW50aXR5SWRlbnRpdHlbXTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlc2VsZWN0TWFueUJ5S2V5c0FjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBEZXNlbGVjdE1hbnlCeUtleXNQcm9wcz4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IERlc2VsZWN0TWFueUJ5S2V5c1Byb3BzKSA9PiBEZXNlbGVjdE1hbnlCeUtleXM8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuRGVzZWxlY3RNYW55QnlLZXlzLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5EZXNlbGVjdE1hbnlCeUtleXMsIFR5cGUpLFxuICAgICAgKHsga2V5cywgY29ycmVsYXRpb25JZCB9OiBEZXNlbGVjdE1hbnlCeUtleXNQcm9wcykgPT4gbmV3IERlc2VsZWN0TWFueUJ5S2V5cyhUeXBlLCBrZXlzLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlc2VsZWN0QWxsQWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIENvcnJlbGF0ZWRQcm9wcz4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IENvcnJlbGF0ZWRQcm9wcykgPT4gRGVzZWxlY3RBbGw8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuRGVzZWxlY3RBbGwsICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0QWxsLCBUeXBlKSxcbiAgICAgICh7IGNvcnJlbGF0aW9uSWQgfTogQ29ycmVsYXRlZFByb3BzID0ge30pID0+IG5ldyBEZXNlbGVjdEFsbChUeXBlLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlc2VsZWN0ZWRBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgQ29ycmVsYXRlZFByb3BzPihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogQ29ycmVsYXRlZFByb3BzKSA9PiBEZXNlbGVjdGVkPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0ZWQsICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0ZWQsIFR5cGUpLFxuICAgICAgKHsgY29ycmVsYXRpb25JZCB9OiBDb3JyZWxhdGVkUHJvcHMgPSB7fSkgPT4gbmV3IERlc2VsZWN0ZWQoVHlwZSwgY29ycmVsYXRpb25JZClcbiAgICApXG4gICk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzZWxlY3RlZE1hbnlQcm9wczxUTW9kZWw+IGV4dGVuZHMgQ29ycmVsYXRlZFByb3BzIHtcbiAgZW50aXRpZXM6IEFycmF5PFRNb2RlbCB8IEVudGl0eUlkZW50aXR5Pjtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlc2VsZWN0ZWRNYW55QWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIERlc2VsZWN0ZWRNYW55UHJvcHM8VE1vZGVsPj4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IERlc2VsZWN0ZWRNYW55UHJvcHM8VE1vZGVsPikgPT4gRGVzZWxlY3RlZE1hbnk8VE1vZGVsPj4gPT5cbiAgY2FjaGVPblR5cGUoVHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuRGVzZWxlY3RlZE1hbnksICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0ZWRNYW55LCBUeXBlKSxcbiAgICAgICh7IGVudGl0aWVzLCBjb3JyZWxhdGlvbklkIH06IERlc2VsZWN0ZWRNYW55UHJvcHM8VE1vZGVsPikgPT4gbmV3IERlc2VsZWN0ZWRNYW55KFR5cGUsIGVudGl0aWVzLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcbiJdfQ==