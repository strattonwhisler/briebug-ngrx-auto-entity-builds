import { EntityActionTypes } from '../actions/action-types';
import { Change, Changed, Edit, EditByKey, Edited, EditedByKey, EditEnded, EditNew, EndEdit } from '../actions/edit-actions';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
export const createEditNewAction = (Type) => cacheOnType(Type, EntityActionTypes.EditNew, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.EditNew, Type), ({ entity, correlationId }) => new EditNew(Type, entity, correlationId)));
export const createEditAction = (Type) => cacheOnType(Type, EntityActionTypes.Edit, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Edit, Type), ({ entity, correlationId }) => new Edit(Type, entity, correlationId)));
export const createEditByKeyAction = (Type) => cacheOnType(Type, EntityActionTypes.EditByKey, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.EditByKey, Type), ({ key, correlationId }) => new EditByKey(Type, key, correlationId)));
export const createEditedAction = (Type) => cacheOnType(Type, EntityActionTypes.Edited, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Edited, Type), ({ entity, correlationId }) => new Edited(Type, entity, correlationId)));
export const createEditedByKeyAction = (Type) => cacheOnType(Type, EntityActionTypes.EditedByKey, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.EditedByKey, Type), ({ key, correlationId }) => new EditedByKey(Type, key, correlationId)));
export const createChangeAction = (Type) => cacheOnType(Type, EntityActionTypes.Change, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Change, Type), ({ entity, correlationId }) => new Change(Type, entity, correlationId)));
export const createChangedAction = (Type) => cacheOnType(Type, EntityActionTypes.Changed, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.Changed, Type), ({ entity, correlationId }) => new Changed(Type, entity, correlationId)));
export const createEndEditAction = (Type) => cacheOnType(Type, EntityActionTypes.EndEdit, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.EndEdit, Type), ({ correlationId } = {}) => new EndEdit(Type, correlationId)));
export const createEditEndedAction = (Type) => cacheOnType(Type, EntityActionTypes.EditEnded, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.EditEnded, Type), ({ correlationId } = {}) => new EditEnded(Type, correlationId)));
//# sourceMappingURL=data:application/json;base64,