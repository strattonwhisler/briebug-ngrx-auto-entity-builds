import { EntityActionTypes } from '../actions/action-types';
import { setActionType } from '../actions/util';
import { cacheOnType, defineTypedFactoryFunction } from './util';
import { LoadPage, LoadPageFailure, LoadPageIfNecessary, LoadPageSuccess } from '../actions/load-page-actions';
export const createLoadPageAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadPage, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadPage, Type), ({ page, criteria, correlationId }) => new LoadPage(Type, page, criteria, correlationId)));
export const createLoadPageIfNecessaryAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadPageIfNecessary, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadPageIfNecessary, Type), ({ page, maxAge, criteria, correlationId }) => new LoadPageIfNecessary(Type, page, maxAge, criteria, correlationId)));
export const createLoadPageSuccessAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadPageSuccess, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadPageSuccess, Type), ({ entities, pageInfo, criteria, correlationId }) => new LoadPageSuccess(Type, entities, pageInfo, criteria, correlationId)));
export const createLoadPageFailureAction = (Type) => cacheOnType(Type, EntityActionTypes.LoadPageFailure, () => defineTypedFactoryFunction(setActionType(EntityActionTypes.LoadPageFailure, Type), ({ error, page, criteria, correlationId }) => new LoadPageFailure(Type, error, criteria, correlationId)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1wYWdlLWZhY3Rvcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncngtYXV0by1lbnRpdHkvc3JjL2xpYi9mYWN0b3JpZXMvbG9hZC1wYWdlLWZhY3Rvcmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBaUIsTUFBTSxRQUFRLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFNL0csTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FDbEMsSUFBa0IsRUFDNEMsRUFBRSxDQUNoRSxXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FDakQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQy9DLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBaUIsRUFBRSxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQ3hHLENBQ0YsQ0FBQztBQU1KLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLENBQzdDLElBQWtCLEVBQ2tFLEVBQUUsQ0FDdEYsV0FBVyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsQ0FDNUQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsRUFDMUQsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBNEIsRUFBRSxFQUFFLENBQ3RFLElBQUksbUJBQW1CLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUN2RSxDQUNGLENBQUM7QUFPSixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUN6QyxJQUFrQixFQUNrRSxFQUFFLENBQ3RGLFdBQVcsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUN4RCwwQkFBMEIsQ0FDeEIsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFDdEQsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBZ0MsRUFBRSxFQUFFLENBQ2hGLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDekUsQ0FDRixDQUFDO0FBT0osTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsQ0FDekMsSUFBa0IsRUFDa0UsRUFBRSxDQUN0RixXQUFXLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FDeEQsMEJBQTBCLENBQ3hCLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEVBQ3RELENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWdDLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUN0SSxDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25DcmVhdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9uVHlwZXMgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbi10eXBlcyc7XG5pbXBvcnQgeyBUTmV3IH0gZnJvbSAnLi4vYWN0aW9ucy9tb2RlbC1jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBzZXRBY3Rpb25UeXBlIH0gZnJvbSAnLi4vYWN0aW9ucy91dGlsJztcbmltcG9ydCB7IElQYWdlSW5mbywgUGFnZSB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBjYWNoZU9uVHlwZSwgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24sIFN0YW5kYXJkUHJvcHMgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgTG9hZFBhZ2UsIExvYWRQYWdlRmFpbHVyZSwgTG9hZFBhZ2VJZk5lY2Vzc2FyeSwgTG9hZFBhZ2VTdWNjZXNzIH0gZnJvbSAnLi4vYWN0aW9ucy9sb2FkLXBhZ2UtYWN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZFBhZ2VQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICBwYWdlOiBQYWdlO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9hZFBhZ2VBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgU3RhbmRhcmRQcm9wcz4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IExvYWRQYWdlUHJvcHMpID0+IExvYWRQYWdlPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRQYWdlLCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUGFnZSwgVHlwZSksXG4gICAgICAoeyBwYWdlLCBjcml0ZXJpYSwgY29ycmVsYXRpb25JZCB9OiBMb2FkUGFnZVByb3BzKSA9PiBuZXcgTG9hZFBhZ2UoVHlwZSwgcGFnZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpXG4gICAgKVxuICApO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRQYWdlSWZOZWNlc3NhcnlQcm9wcyBleHRlbmRzIExvYWRQYWdlUHJvcHMge1xuICBtYXhBZ2U/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkUGFnZUlmTmVjZXNzYXJ5QWN0aW9uID0gPFRNb2RlbCwgVCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIExvYWRQYWdlSWZOZWNlc3NhcnlQcm9wcz4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IExvYWRQYWdlSWZOZWNlc3NhcnlQcm9wcykgPT4gTG9hZFBhZ2VJZk5lY2Vzc2FyeTxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUGFnZUlmTmVjZXNzYXJ5LCAoKSA9PlxuICAgIGRlZmluZVR5cGVkRmFjdG9yeUZ1bmN0aW9uKFxuICAgICAgc2V0QWN0aW9uVHlwZShFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUGFnZUlmTmVjZXNzYXJ5LCBUeXBlKSxcbiAgICAgICh7IHBhZ2UsIG1heEFnZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZFBhZ2VJZk5lY2Vzc2FyeVByb3BzKSA9PlxuICAgICAgICBuZXcgTG9hZFBhZ2VJZk5lY2Vzc2FyeShUeXBlLCBwYWdlLCBtYXhBZ2UsIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkUGFnZVN1Y2Nlc3NQcm9wczxUTW9kZWw+IGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gIGVudGl0aWVzOiBUTW9kZWxbXTtcbiAgcGFnZUluZm86IElQYWdlSW5mbztcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvYWRQYWdlU3VjY2Vzc0FjdGlvbiA9IDxUTW9kZWwsIFQgZXh0ZW5kcyBzdHJpbmcsIFAgZXh0ZW5kcyBMb2FkUGFnZVN1Y2Nlc3NQcm9wczxUTW9kZWw+PihcbiAgVHlwZTogVE5ldzxUTW9kZWw+XG4pOiBBY3Rpb25DcmVhdG9yPFQsIChwcm9wczogTG9hZFBhZ2VTdWNjZXNzUHJvcHM8VE1vZGVsPikgPT4gTG9hZFBhZ2VTdWNjZXNzPFRNb2RlbD4+ID0+XG4gIGNhY2hlT25UeXBlKFR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkxvYWRQYWdlU3VjY2VzcywgKCkgPT5cbiAgICBkZWZpbmVUeXBlZEZhY3RvcnlGdW5jdGlvbihcbiAgICAgIHNldEFjdGlvblR5cGUoRW50aXR5QWN0aW9uVHlwZXMuTG9hZFBhZ2VTdWNjZXNzLCBUeXBlKSxcbiAgICAgICh7IGVudGl0aWVzLCBwYWdlSW5mbywgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZFBhZ2VTdWNjZXNzUHJvcHM8VE1vZGVsPikgPT5cbiAgICAgICAgbmV3IExvYWRQYWdlU3VjY2VzcyhUeXBlLCBlbnRpdGllcywgcGFnZUluZm8sIGNyaXRlcmlhLCBjb3JyZWxhdGlvbklkKVxuICAgIClcbiAgKTtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkUGFnZUZhaWx1cmVQcm9wczxUTW9kZWw+IGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gIGVycm9yOiBhbnk7XG4gIHBhZ2U6IFBhZ2U7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMb2FkUGFnZUZhaWx1cmVBY3Rpb24gPSA8VE1vZGVsLCBUIGV4dGVuZHMgc3RyaW5nLCBQIGV4dGVuZHMgTG9hZFBhZ2VGYWlsdXJlUHJvcHM8VE1vZGVsPj4oXG4gIFR5cGU6IFROZXc8VE1vZGVsPlxuKTogQWN0aW9uQ3JlYXRvcjxULCAocHJvcHM6IExvYWRQYWdlRmFpbHVyZVByb3BzPFRNb2RlbD4pID0+IExvYWRQYWdlRmFpbHVyZTxUTW9kZWw+PiA9PlxuICBjYWNoZU9uVHlwZShUeXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5Mb2FkUGFnZUZhaWx1cmUsICgpID0+XG4gICAgZGVmaW5lVHlwZWRGYWN0b3J5RnVuY3Rpb24oXG4gICAgICBzZXRBY3Rpb25UeXBlKEVudGl0eUFjdGlvblR5cGVzLkxvYWRQYWdlRmFpbHVyZSwgVHlwZSksXG4gICAgICAoeyBlcnJvciwgcGFnZSwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQgfTogTG9hZFBhZ2VGYWlsdXJlUHJvcHM8VE1vZGVsPikgPT4gbmV3IExvYWRQYWdlRmFpbHVyZShUeXBlLCBlcnJvciwgY3JpdGVyaWEsIGNvcnJlbGF0aW9uSWQpXG4gICAgKVxuICApO1xuIl19