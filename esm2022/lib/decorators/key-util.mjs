import { NAE_KEYS } from './entity-tokens';
export function checkKeyName(type, modelName) {
    const keys = type.prototype[NAE_KEYS];
    if (keys === undefined) {
        console.error(`[NGRX-AE] Entity model '${modelName}' does not have a key specified!`);
        return false;
    }
    return true;
}
export function getKeyNames(action) {
    const keys = action && action.info && action.info.modelType.prototype[NAE_KEYS];
    if (keys === undefined) {
        console.error(`[NGRX-AE] [getKeyNames()] Entity model '${action && action.info && action.info.modelName}' does not have a key specified!`);
    }
    return keys || [];
}
export function getKeyNamesFromModel(type) {
    if (type === undefined) {
        console.error('[NGRX-AE] [getKeyNamesFromModel()] Specified type does not exist! Please provide a valid auto-entity model type.');
        return [];
    }
    const keys = type.prototype[NAE_KEYS];
    return keys || [];
}
export function getKeyNamesFromEntity(entity) {
    if (!entity) {
        console.error('[NGRX-AE] [getKeyNamesFromEntity()] Specified entity does not exist! Please provide a valid auto-entity entity object.');
        return [];
    }
    const keys = entity[NAE_KEYS] || Object.getPrototypeOf(entity)[NAE_KEYS];
    return keys || [];
}
function _getKey(entity, keyNames) {
    if (!entity) {
        console.error(`[NGRX-AE] Specified entity does not exist! Please provide a valid auto-entity entity object.`);
        return undefined;
    }
    if (!keyNames || !keyNames.length) {
        console.error(`[NGRX-AE] Specified entity does not have any properties decorated as keys.`);
        return undefined;
    }
    if (keyNames.length === 1) {
        return entity[keyNames[0]];
    }
    // Combine composite key values into underscore-separated string
    const compositeKey = keyNames.map(key => entity[key]).reduce((ck, key) => ck + '_' + key.toString(), '');
    return compositeKey.substr(1);
}
export function getKey(action, entity) {
    const keyNames = getKeyNames(action);
    return _getKey(entity, keyNames);
}
export function getKeyFromModel(type, entity) {
    const keyNames = getKeyNamesFromModel(type);
    return _getKey(entity, keyNames);
}
export function getKeyFromEntity(entity) {
    const keyNames = getKeyNamesFromEntity(entity);
    return _getKey(entity, keyNames);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvZGVjb3JhdG9ycy9rZXktdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFTLEVBQUUsU0FBaUI7SUFDdkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUEyQixTQUFTLGtDQUFrQyxDQUFDLENBQUM7UUFDdEYsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFxQjtJQUMvQyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEYsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDdkIsT0FBTyxDQUFDLEtBQUssQ0FDWCwyQ0FBMkMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLGtDQUFrQyxDQUM1SCxDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFTLElBQXNCO0lBQ2pFLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0hBQWtILENBQUMsQ0FBQztRQUNsSSxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFTLE1BQWM7SUFDMUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyx3SEFBd0gsQ0FBQyxDQUFDO1FBQ3hJLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pFLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsTUFBVyxFQUFFLFFBQWtCO0lBQzlDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztRQUM5RyxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQyxPQUFPLENBQUMsS0FBSyxDQUFDLDRFQUE0RSxDQUFDLENBQUM7UUFDNUYsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUMxQixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsZ0VBQWdFO0lBQ2hFLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RyxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsTUFBcUIsRUFBRSxNQUFXO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQVMsSUFBc0IsRUFBRSxNQUFjO0lBQzVFLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVDLE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFTLE1BQWM7SUFDckQsTUFBTSxRQUFRLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsT0FBTyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRW50aXR5QWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9lbnRpdHktYWN0aW9uJztcbmltcG9ydCB7IEVudGl0eUlkZW50aXR5IH0gZnJvbSAnLi4vdHlwZXMvZW50aXR5LWlkZW50aXR5JztcbmltcG9ydCB7IE5BRV9LRVlTIH0gZnJvbSAnLi9lbnRpdHktdG9rZW5zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrS2V5TmFtZSh0eXBlOiBhbnksIG1vZGVsTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGtleXMgPSB0eXBlLnByb3RvdHlwZVtOQUVfS0VZU107XG4gIGlmIChrZXlzID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLmVycm9yKGBbTkdSWC1BRV0gRW50aXR5IG1vZGVsICcke21vZGVsTmFtZX0nIGRvZXMgbm90IGhhdmUgYSBrZXkgc3BlY2lmaWVkIWApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleU5hbWVzKGFjdGlvbjogSUVudGl0eUFjdGlvbik6IHN0cmluZ1tdIHtcbiAgY29uc3Qga2V5cyA9IGFjdGlvbiAmJiBhY3Rpb24uaW5mbyAmJiBhY3Rpb24uaW5mby5tb2RlbFR5cGUucHJvdG90eXBlW05BRV9LRVlTXTtcbiAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgW05HUlgtQUVdIFtnZXRLZXlOYW1lcygpXSBFbnRpdHkgbW9kZWwgJyR7YWN0aW9uICYmIGFjdGlvbi5pbmZvICYmIGFjdGlvbi5pbmZvLm1vZGVsTmFtZX0nIGRvZXMgbm90IGhhdmUgYSBrZXkgc3BlY2lmaWVkIWBcbiAgICApO1xuICB9XG4gIHJldHVybiBrZXlzIHx8IFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5TmFtZXNGcm9tTW9kZWw8VE1vZGVsPih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsKTogc3RyaW5nW10ge1xuICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcignW05HUlgtQUVdIFtnZXRLZXlOYW1lc0Zyb21Nb2RlbCgpXSBTcGVjaWZpZWQgdHlwZSBkb2VzIG5vdCBleGlzdCEgUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBhdXRvLWVudGl0eSBtb2RlbCB0eXBlLicpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSB0eXBlLnByb3RvdHlwZVtOQUVfS0VZU107XG4gIHJldHVybiBrZXlzIHx8IFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5TmFtZXNGcm9tRW50aXR5PFRNb2RlbD4oZW50aXR5OiBUTW9kZWwpOiBzdHJpbmdbXSB7XG4gIGlmICghZW50aXR5KSB7XG4gICAgY29uc29sZS5lcnJvcignW05HUlgtQUVdIFtnZXRLZXlOYW1lc0Zyb21FbnRpdHkoKV0gU3BlY2lmaWVkIGVudGl0eSBkb2VzIG5vdCBleGlzdCEgUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBhdXRvLWVudGl0eSBlbnRpdHkgb2JqZWN0LicpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBlbnRpdHlbTkFFX0tFWVNdIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihlbnRpdHkpW05BRV9LRVlTXTtcbiAgcmV0dXJuIGtleXMgfHwgW107XG59XG5cbmZ1bmN0aW9uIF9nZXRLZXkoZW50aXR5OiBhbnksIGtleU5hbWVzOiBzdHJpbmdbXSk6IEVudGl0eUlkZW50aXR5IHtcbiAgaWYgKCFlbnRpdHkpIHtcbiAgICBjb25zb2xlLmVycm9yKGBbTkdSWC1BRV0gU3BlY2lmaWVkIGVudGl0eSBkb2VzIG5vdCBleGlzdCEgUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBhdXRvLWVudGl0eSBlbnRpdHkgb2JqZWN0LmApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWtleU5hbWVzIHx8ICFrZXlOYW1lcy5sZW5ndGgpIHtcbiAgICBjb25zb2xlLmVycm9yKGBbTkdSWC1BRV0gU3BlY2lmaWVkIGVudGl0eSBkb2VzIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzIGRlY29yYXRlZCBhcyBrZXlzLmApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoa2V5TmFtZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGVudGl0eVtrZXlOYW1lc1swXV07XG4gIH1cblxuICAvLyBDb21iaW5lIGNvbXBvc2l0ZSBrZXkgdmFsdWVzIGludG8gdW5kZXJzY29yZS1zZXBhcmF0ZWQgc3RyaW5nXG4gIGNvbnN0IGNvbXBvc2l0ZUtleSA9IGtleU5hbWVzLm1hcChrZXkgPT4gZW50aXR5W2tleV0pLnJlZHVjZSgoY2ssIGtleSkgPT4gY2sgKyAnXycgKyBrZXkudG9TdHJpbmcoKSwgJycpO1xuICByZXR1cm4gY29tcG9zaXRlS2V5LnN1YnN0cigxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleShhY3Rpb246IElFbnRpdHlBY3Rpb24sIGVudGl0eTogYW55KTogRW50aXR5SWRlbnRpdHkge1xuICBjb25zdCBrZXlOYW1lcyA9IGdldEtleU5hbWVzKGFjdGlvbik7XG4gIHJldHVybiBfZ2V0S2V5KGVudGl0eSwga2V5TmFtZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5RnJvbU1vZGVsPFRNb2RlbD4odHlwZTogbmV3ICgpID0+IFRNb2RlbCwgZW50aXR5OiBUTW9kZWwpOiBFbnRpdHlJZGVudGl0eSB7XG4gIGNvbnN0IGtleU5hbWVzID0gZ2V0S2V5TmFtZXNGcm9tTW9kZWwodHlwZSk7XG4gIHJldHVybiBfZ2V0S2V5KGVudGl0eSwga2V5TmFtZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5RnJvbUVudGl0eTxUTW9kZWw+KGVudGl0eTogVE1vZGVsKTogRW50aXR5SWRlbnRpdHkge1xuICBjb25zdCBrZXlOYW1lcyA9IGdldEtleU5hbWVzRnJvbUVudGl0eShlbnRpdHkpO1xuICByZXR1cm4gX2dldEtleShlbnRpdHksIGtleU5hbWVzKTtcbn1cbiJdfQ==