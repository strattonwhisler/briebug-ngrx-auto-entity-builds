import { camelCase } from '../../util/case';
import { compose } from '../../util/func';
import { ENTITY_OPTS_PROP } from './entity-tokens';
export const EMPTY_OBJECT = {};
export const getEntity = (entityOrType) => Array.isArray(entityOrType) ? entityOrType[0] : entityOrType;
export const ensureObject = value => value || EMPTY_OBJECT;
export const getEntityOptions = (entityOrType) => (entityOrType[ENTITY_OPTS_PROP] ||
    (entityOrType.constructor ? entityOrType.constructor[ENTITY_OPTS_PROP] : EMPTY_OBJECT) ||
    EMPTY_OBJECT);
export const entityOptions = (entityOrType) => compose(getEntity, ensureObject, getEntityOptions)(entityOrType);
export const entityStateName = (modelName) => camelCase(modelName);
export const nameOfEntity = (entityOrType) => entityOptions(entityOrType).modelName;
export const uriNameOfEntity = (entityOrType) => entityOptions(entityOrType).uriName;
export const pluralNameOfEntity = (entityOrType) => entityOptions(entityOrType).pluralName;
export const stateNameOfEntity = (entityOrType) => entityStateName(entityOptions(entityOrType).modelName);
export const mapComparer = (options, name) => !!options.comparers
    ? typeof options.comparers[name] === 'string'
        ? options.comparers[options.comparers[name]]
        : options.comparers[name]
    : undefined;
export const defaultComparer = (options) => options.comparer || mapComparer(options, 'default');
export const namedComparer = (options, name) => !!options.comparers
    ? options.comparers[name] || mapComparer(options, name)
    : name === 'default'
        ? defaultComparer(options)
        : undefined;
export const getComparer = (options, name) => !!options ? (!!name ? namedComparer(options, name) : defaultComparer(options)) : undefined;
export const entityComparer = (entityOrType, name) => getComparer(entityOptions(entityOrType), name);
export const entityTransforms = (entityOrType) => entityOptions(entityOrType).transform;
export const entityMaxAge = (entityOrType) => entityOptions(entityOrType).defaultMaxAge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvZGVjb3JhdG9ycy9lbnRpdHktdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7QUFFL0IsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQVMsWUFBOEMsRUFBeUIsRUFBRSxDQUN6RyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUUvRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksWUFBWSxDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQVMsWUFBOEMsRUFBa0IsRUFBRSxDQUN6RyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztJQUM3QixDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3RGLFlBQVksQ0FBbUIsQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBUyxZQUE4QyxFQUFrQixFQUFFLENBQ3RHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFbkUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsU0FBaUIsRUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRW5GLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFTLFlBQW1DLEVBQXNCLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBRXZJLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFTLFlBQW1DLEVBQTZCLEVBQUUsQ0FDeEcsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFTLFlBQW1DLEVBQTZCLEVBQUUsQ0FDM0csYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUV6QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFTLFlBQW1DLEVBQTZCLEVBQUUsQ0FDMUcsZUFBZSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV6RCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUF1QixFQUFFLElBQVksRUFBa0IsRUFBRSxDQUNuRixDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVM7SUFDakIsQ0FBQyxDQUFDLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRO1FBQzNDLENBQUMsQ0FBRSxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFXLENBQW9CO1FBQzFFLENBQUMsQ0FBRSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBb0I7SUFDL0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUVoQixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxPQUF1QixFQUFrQixFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRWhJLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQXVCLEVBQUUsSUFBWSxFQUFrQixFQUFFLENBQ3JGLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUztJQUNqQixDQUFDLENBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQW9CLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7SUFDM0UsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTO1FBQ3BCLENBQUMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFFaEIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsT0FBdUIsRUFBRSxJQUFhLEVBQWtCLEVBQUUsQ0FDcEYsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBRTdGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFTLFlBQThDLEVBQUUsSUFBYSxFQUFxQyxFQUFFLENBQ3pJLFdBQVcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFakQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBUyxZQUFtQyxFQUEyQyxFQUFFLENBQ3ZILGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFFeEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQVMsWUFBOEMsRUFBVSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsQ2FzZSB9IGZyb20gJy4uLy4uL3V0aWwvY2FzZSc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnLi4vLi4vdXRpbC9mdW5jJztcbmltcG9ydCB7IFROZXcgfSBmcm9tICcuLi9hY3Rpb25zL21vZGVsLWNvbnN0cnVjdG9yJztcbmltcG9ydCB7IEVudGl0eUNvbXBhcmVyLCBJRW50aXR5T3B0aW9ucywgSUVudGl0eVRyYW5zZm9ybWVyIH0gZnJvbSAnLi9lbnRpdHktb3B0aW9ucyc7XG5pbXBvcnQgeyBFTlRJVFlfT1BUU19QUk9QIH0gZnJvbSAnLi9lbnRpdHktdG9rZW5zJztcblxuZXhwb3J0IGNvbnN0IEVNUFRZX09CSkVDVCA9IHt9O1xuXG5leHBvcnQgY29uc3QgZ2V0RW50aXR5ID0gPFRNb2RlbD4oZW50aXR5T3JUeXBlOiBUTmV3PFRNb2RlbD4gfCBUTW9kZWwgfCBUTW9kZWxbXSk6IFROZXc8VE1vZGVsPiB8IFRNb2RlbCA9PlxuICBBcnJheS5pc0FycmF5KGVudGl0eU9yVHlwZSkgPyBlbnRpdHlPclR5cGVbMF0gOiBlbnRpdHlPclR5cGU7XG5cbmV4cG9ydCBjb25zdCBlbnN1cmVPYmplY3QgPSB2YWx1ZSA9PiB2YWx1ZSB8fCBFTVBUWV9PQkpFQ1Q7XG5cbmV4cG9ydCBjb25zdCBnZXRFbnRpdHlPcHRpb25zID0gPFRNb2RlbD4oZW50aXR5T3JUeXBlOiBUTmV3PFRNb2RlbD4gfCBUTW9kZWwgfCBUTW9kZWxbXSk6IElFbnRpdHlPcHRpb25zID0+XG4gIChlbnRpdHlPclR5cGVbRU5USVRZX09QVFNfUFJPUF0gfHxcbiAgICAoZW50aXR5T3JUeXBlLmNvbnN0cnVjdG9yID8gZW50aXR5T3JUeXBlLmNvbnN0cnVjdG9yW0VOVElUWV9PUFRTX1BST1BdIDogRU1QVFlfT0JKRUNUKSB8fFxuICAgIEVNUFRZX09CSkVDVCkgYXMgSUVudGl0eU9wdGlvbnM7XG5cbmV4cG9ydCBjb25zdCBlbnRpdHlPcHRpb25zID0gPFRNb2RlbD4oZW50aXR5T3JUeXBlOiBUTmV3PFRNb2RlbD4gfCBUTW9kZWwgfCBUTW9kZWxbXSk6IElFbnRpdHlPcHRpb25zID0+XG4gIGNvbXBvc2UoZ2V0RW50aXR5LCBlbnN1cmVPYmplY3QsIGdldEVudGl0eU9wdGlvbnMpKGVudGl0eU9yVHlwZSk7XG5cbmV4cG9ydCBjb25zdCBlbnRpdHlTdGF0ZU5hbWUgPSAobW9kZWxOYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4gY2FtZWxDYXNlKG1vZGVsTmFtZSk7XG5cbmV4cG9ydCBjb25zdCBuYW1lT2ZFbnRpdHkgPSA8VE1vZGVsPihlbnRpdHlPclR5cGU6IFROZXc8VE1vZGVsPiB8IFRNb2RlbCk6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiBlbnRpdHlPcHRpb25zKGVudGl0eU9yVHlwZSkubW9kZWxOYW1lO1xuXG5leHBvcnQgY29uc3QgdXJpTmFtZU9mRW50aXR5ID0gPFRNb2RlbD4oZW50aXR5T3JUeXBlOiBUTmV3PFRNb2RlbD4gfCBUTW9kZWwpOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkID0+XG4gIGVudGl0eU9wdGlvbnMoZW50aXR5T3JUeXBlKS51cmlOYW1lO1xuXG5leHBvcnQgY29uc3QgcGx1cmFsTmFtZU9mRW50aXR5ID0gPFRNb2RlbD4oZW50aXR5T3JUeXBlOiBUTmV3PFRNb2RlbD4gfCBUTW9kZWwpOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkID0+XG4gIGVudGl0eU9wdGlvbnMoZW50aXR5T3JUeXBlKS5wbHVyYWxOYW1lO1xuXG5leHBvcnQgY29uc3Qgc3RhdGVOYW1lT2ZFbnRpdHkgPSA8VE1vZGVsPihlbnRpdHlPclR5cGU6IFROZXc8VE1vZGVsPiB8IFRNb2RlbCk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQgPT5cbiAgZW50aXR5U3RhdGVOYW1lKGVudGl0eU9wdGlvbnMoZW50aXR5T3JUeXBlKS5tb2RlbE5hbWUpO1xuXG5leHBvcnQgY29uc3QgbWFwQ29tcGFyZXIgPSAob3B0aW9uczogSUVudGl0eU9wdGlvbnMsIG5hbWU6IHN0cmluZyk6IEVudGl0eUNvbXBhcmVyID0+XG4gICEhb3B0aW9ucy5jb21wYXJlcnNcbiAgICA/IHR5cGVvZiBvcHRpb25zLmNvbXBhcmVyc1tuYW1lXSA9PT0gJ3N0cmluZydcbiAgICAgID8gKG9wdGlvbnMuY29tcGFyZXJzW29wdGlvbnMuY29tcGFyZXJzW25hbWVdIGFzIHN0cmluZ10gYXMgRW50aXR5Q29tcGFyZXIpXG4gICAgICA6IChvcHRpb25zLmNvbXBhcmVyc1tuYW1lXSBhcyBFbnRpdHlDb21wYXJlcilcbiAgICA6IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb21wYXJlciA9IChvcHRpb25zOiBJRW50aXR5T3B0aW9ucyk6IEVudGl0eUNvbXBhcmVyID0+IG9wdGlvbnMuY29tcGFyZXIgfHwgbWFwQ29tcGFyZXIob3B0aW9ucywgJ2RlZmF1bHQnKTtcblxuZXhwb3J0IGNvbnN0IG5hbWVkQ29tcGFyZXIgPSAob3B0aW9uczogSUVudGl0eU9wdGlvbnMsIG5hbWU6IHN0cmluZyk6IEVudGl0eUNvbXBhcmVyID0+XG4gICEhb3B0aW9ucy5jb21wYXJlcnNcbiAgICA/IChvcHRpb25zLmNvbXBhcmVyc1tuYW1lXSBhcyBFbnRpdHlDb21wYXJlcikgfHwgbWFwQ29tcGFyZXIob3B0aW9ucywgbmFtZSlcbiAgICA6IG5hbWUgPT09ICdkZWZhdWx0J1xuICAgID8gZGVmYXVsdENvbXBhcmVyKG9wdGlvbnMpXG4gICAgOiB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBnZXRDb21wYXJlciA9IChvcHRpb25zOiBJRW50aXR5T3B0aW9ucywgbmFtZT86IHN0cmluZyk6IEVudGl0eUNvbXBhcmVyID0+XG4gICEhb3B0aW9ucyA/ICghIW5hbWUgPyBuYW1lZENvbXBhcmVyKG9wdGlvbnMsIG5hbWUpIDogZGVmYXVsdENvbXBhcmVyKG9wdGlvbnMpKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IGVudGl0eUNvbXBhcmVyID0gPFRNb2RlbD4oZW50aXR5T3JUeXBlOiBUTmV3PFRNb2RlbD4gfCBUTW9kZWwgfCBUTW9kZWxbXSwgbmFtZT86IHN0cmluZyk6IEVudGl0eUNvbXBhcmVyIHwgbnVsbCB8IHVuZGVmaW5lZCA9PlxuICBnZXRDb21wYXJlcihlbnRpdHlPcHRpb25zKGVudGl0eU9yVHlwZSksIG5hbWUpO1xuXG5leHBvcnQgY29uc3QgZW50aXR5VHJhbnNmb3JtcyA9IDxUTW9kZWw+KGVudGl0eU9yVHlwZTogVE5ldzxUTW9kZWw+IHwgVE1vZGVsKTogSUVudGl0eVRyYW5zZm9ybWVyW10gfCBudWxsIHwgdW5kZWZpbmVkID0+XG4gIGVudGl0eU9wdGlvbnMoZW50aXR5T3JUeXBlKS50cmFuc2Zvcm07XG5cbmV4cG9ydCBjb25zdCBlbnRpdHlNYXhBZ2UgPSA8VE1vZGVsPihlbnRpdHlPclR5cGU6IFROZXc8VE1vZGVsPiB8IFRNb2RlbCB8IFRNb2RlbFtdKTogbnVtYmVyID0+IGVudGl0eU9wdGlvbnMoZW50aXR5T3JUeXBlKS5kZWZhdWx0TWF4QWdlO1xuIl19