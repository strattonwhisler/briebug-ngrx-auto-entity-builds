import { EntityActionTypes } from './action-types';
import { EntityAction } from './entity-action';
/**
 * Updates a single entity, corresponding to HTTP PATCH operation.
 *
 * PATCH: Update just the supplied attributes of the entity
 */
export class Update extends EntityAction {
    constructor(type, entity, criteria, correlationId) {
        super(type, EntityActionTypes.Update, correlationId);
        this.entity = entity;
        this.criteria = criteria;
    }
}
export class UpdateSuccess extends EntityAction {
    constructor(type, entity, criteria, correlationId) {
        super(type, EntityActionTypes.UpdateSuccess, correlationId);
        this.entity = entity;
        this.criteria = criteria;
    }
}
export class UpdateFailure extends EntityAction {
    constructor(type, error, entity, criteria, correlationId) {
        super(type, EntityActionTypes.UpdateFailure, correlationId);
        this.error = error;
        this.entity = entity;
        this.criteria = criteria;
    }
}
/**
 * Updates many entities, corresponding to HTTP PATCH operation.
 *
 * PATCH: Update just the supplied attributes of the entities
 */
export class UpdateMany extends EntityAction {
    constructor(type, entities, criteria, correlationId) {
        super(type, EntityActionTypes.UpdateMany, correlationId);
        this.entities = entities;
        this.criteria = criteria;
    }
}
export class UpdateManySuccess extends EntityAction {
    constructor(type, entities, criteria, correlationId) {
        super(type, EntityActionTypes.UpdateManySuccess, correlationId);
        this.entities = entities;
        this.criteria = criteria;
    }
}
export class UpdateManyFailure extends EntityAction {
    constructor(type, error, entities, criteria, correlationId) {
        super(type, EntityActionTypes.UpdateManyFailure, correlationId);
        this.error = error;
        this.entities = entities;
        this.criteria = criteria;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3J4LWF1dG8tZW50aXR5L3NyYy9saWIvYWN0aW9ucy91cGRhdGUtYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0M7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxNQUFlLFNBQVEsWUFBb0I7SUFDdEQsWUFBWSxJQUFzQixFQUFTLE1BQWMsRUFBUyxRQUFjLEVBQUUsYUFBc0I7UUFDdEcsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEWixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBTTtJQUVoRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sYUFBc0IsU0FBUSxZQUFvQjtJQUM3RCxZQUFZLElBQXNCLEVBQVMsTUFBYyxFQUFTLFFBQWMsRUFBRSxhQUFzQjtRQUN0RyxLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQURuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBTTtJQUVoRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sYUFBc0IsU0FBUSxZQUFvQjtJQUM3RCxZQUFZLElBQXNCLEVBQVMsS0FBVSxFQUFTLE1BQWMsRUFBUyxRQUFjLEVBQUUsYUFBc0I7UUFDekgsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEbkIsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUFTLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFNO0lBRW5HLENBQUM7Q0FDRjtBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sVUFBbUIsU0FBUSxZQUFvQjtJQUMxRCxZQUFZLElBQXNCLEVBQVMsUUFBa0IsRUFBUyxRQUFjLEVBQUUsYUFBc0I7UUFDMUcsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEaEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQU07SUFFcEYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlCQUEwQixTQUFRLFlBQW9CO0lBQ2pFLFlBQVksSUFBc0IsRUFBUyxRQUFrQixFQUFTLFFBQWMsRUFBRSxhQUFzQjtRQUMxRyxLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRHZCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFNO0lBRXBGLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxpQkFBMEIsU0FBUSxZQUFvQjtJQUNqRSxZQUFZLElBQXNCLEVBQVMsS0FBVSxFQUFTLFFBQWtCLEVBQVMsUUFBYyxFQUFFLGFBQXNCO1FBQzdILEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEdkIsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFNO0lBRXZHLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9uIH0gZnJvbSAnLi9lbnRpdHktYWN0aW9uJztcblxuLyoqXG4gKiBVcGRhdGVzIGEgc2luZ2xlIGVudGl0eSwgY29ycmVzcG9uZGluZyB0byBIVFRQIFBBVENIIG9wZXJhdGlvbi5cbiAqXG4gKiBQQVRDSDogVXBkYXRlIGp1c3QgdGhlIHN1cHBsaWVkIGF0dHJpYnV0ZXMgb2YgdGhlIGVudGl0eVxuICovXG5leHBvcnQgY2xhc3MgVXBkYXRlPFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBlbnRpdHk6IFRNb2RlbCwgcHVibGljIGNyaXRlcmlhPzogYW55LCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuVXBkYXRlLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlU3VjY2VzczxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXR5OiBUTW9kZWwsIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlVwZGF0ZVN1Y2Nlc3MsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVGYWlsdXJlPFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBlcnJvcjogYW55LCBwdWJsaWMgZW50aXR5OiBUTW9kZWwsIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlVwZGF0ZUZhaWx1cmUsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbi8qKlxuICogVXBkYXRlcyBtYW55IGVudGl0aWVzLCBjb3JyZXNwb25kaW5nIHRvIEhUVFAgUEFUQ0ggb3BlcmF0aW9uLlxuICpcbiAqIFBBVENIOiBVcGRhdGUganVzdCB0aGUgc3VwcGxpZWQgYXR0cmlidXRlcyBvZiB0aGUgZW50aXRpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFVwZGF0ZU1hbnk8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVudGl0aWVzOiBUTW9kZWxbXSwgcHVibGljIGNyaXRlcmlhPzogYW55LCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuVXBkYXRlTWFueSwgY29ycmVsYXRpb25JZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZU1hbnlTdWNjZXNzPFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBlbnRpdGllczogVE1vZGVsW10sIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlVwZGF0ZU1hbnlTdWNjZXNzLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTWFueUZhaWx1cmU8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVycm9yOiBhbnksIHB1YmxpYyBlbnRpdGllczogVE1vZGVsW10sIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlVwZGF0ZU1hbnlGYWlsdXJlLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuIl19