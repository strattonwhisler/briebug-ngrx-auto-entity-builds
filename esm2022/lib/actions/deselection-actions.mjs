import { EntityActionTypes } from './action-types';
import { EntityAction } from './entity-action';
/**
 * De-selects a single entity in the store
 */
export class Deselect extends EntityAction {
    constructor(type, correlationId) {
        super(type, EntityActionTypes.Deselect, correlationId);
    }
}
/**
 * De-selects many entities in the store
 */
export class DeselectMany extends EntityAction {
    constructor(type, entities, correlationId) {
        super(type, EntityActionTypes.DeselectMany, correlationId);
        this.entities = entities;
        if (!Array.isArray(entities)) {
            throw new Error('[NGRX-AE] ! DeselectMany action requires an array of entities.');
        }
    }
}
/**
 * De-selects many entities in the store by entity keys
 */
export class DeselectManyByKeys extends EntityAction {
    constructor(type, entitiesKeys, correlationId) {
        super(type, EntityActionTypes.DeselectManyByKeys, correlationId);
        this.entitiesKeys = entitiesKeys;
        if (!Array.isArray(entitiesKeys)) {
            throw new Error('[NGRX-AE] ! DeselectManyByKeys action requires an array of entity keys.');
        }
    }
}
/**
 * De-selects all entities in the store
 */
export class DeselectAll extends EntityAction {
    constructor(type, correlationId) {
        super(type, EntityActionTypes.DeselectAll, correlationId);
    }
}
/**
 * Indicates the de-selection of a single entity in the store
 */
export class Deselected extends EntityAction {
    constructor(type, correlationId) {
        super(type, EntityActionTypes.Deselected, correlationId);
    }
}
/**
 * Indicates the de-selection of many entities in the store
 */
export class DeselectedMany extends EntityAction {
    constructor(type, entities, correlationId) {
        super(type, EntityActionTypes.DeselectedMany, correlationId);
        this.entities = entities;
        if (!Array.isArray(entities) && entities !== null) {
            throw new Error('[NGRX-AE] ! DeselectedMany action requires an array of entities or keys.');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzZWxlY3Rpb24tYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncngtYXV0by1lbnRpdHkvc3JjL2xpYi9hY3Rpb25zL2Rlc2VsZWN0aW9uLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFFBQWlCLFNBQVEsWUFBb0I7SUFDeEQsWUFBWSxJQUFzQixFQUFFLGFBQXNCO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQXFCLFNBQVEsWUFBb0I7SUFDNUQsWUFBWSxJQUFzQixFQUFTLFFBQWtCLEVBQUUsYUFBc0I7UUFDbkYsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUczRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztRQUNwRixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQTJCLFNBQVEsWUFBb0I7SUFDbEUsWUFBWSxJQUFzQixFQUFTLFlBQThCLEVBQUUsYUFBc0I7UUFDL0YsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUR4QixpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFHdkUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLHlFQUF5RSxDQUFDLENBQUM7UUFDN0YsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFdBQW9CLFNBQVEsWUFBb0I7SUFDM0QsWUFBWSxJQUFzQixFQUFFLGFBQXNCO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQW1CLFNBQVEsWUFBb0I7SUFDMUQsWUFBWSxJQUFzQixFQUFFLGFBQXNCO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQXVCLFNBQVEsWUFBb0I7SUFDOUQsWUFBWSxJQUFzQixFQUFTLFFBQStDLEVBQUUsYUFBc0I7UUFDaEgsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEcEIsYUFBUSxHQUFSLFFBQVEsQ0FBdUM7UUFHeEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsMEVBQTBFLENBQUMsQ0FBQztRQUM5RixDQUFDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5SWRlbnRpdHkgfSBmcm9tICcuLi90eXBlcy9lbnRpdHktaWRlbnRpdHknO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9uVHlwZXMgfSBmcm9tICcuL2FjdGlvbi10eXBlcyc7XG5pbXBvcnQgeyBFbnRpdHlBY3Rpb24gfSBmcm9tICcuL2VudGl0eS1hY3Rpb24nO1xuXG4vKipcbiAqIERlLXNlbGVjdHMgYSBzaW5nbGUgZW50aXR5IGluIHRoZSBzdG9yZVxuICovXG5leHBvcnQgY2xhc3MgRGVzZWxlY3Q8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0LCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG4vKipcbiAqIERlLXNlbGVjdHMgbWFueSBlbnRpdGllcyBpbiB0aGUgc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIERlc2VsZWN0TWFueTxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXRpZXM6IFRNb2RlbFtdLCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuRGVzZWxlY3RNYW55LCBjb3JyZWxhdGlvbklkKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW05HUlgtQUVdICEgRGVzZWxlY3RNYW55IGFjdGlvbiByZXF1aXJlcyBhbiBhcnJheSBvZiBlbnRpdGllcy4nKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEZS1zZWxlY3RzIG1hbnkgZW50aXRpZXMgaW4gdGhlIHN0b3JlIGJ5IGVudGl0eSBrZXlzXG4gKi9cbmV4cG9ydCBjbGFzcyBEZXNlbGVjdE1hbnlCeUtleXM8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVudGl0aWVzS2V5czogRW50aXR5SWRlbnRpdHlbXSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0TWFueUJ5S2V5cywgY29ycmVsYXRpb25JZCk7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXNLZXlzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbTkdSWC1BRV0gISBEZXNlbGVjdE1hbnlCeUtleXMgYWN0aW9uIHJlcXVpcmVzIGFuIGFycmF5IG9mIGVudGl0eSBrZXlzLicpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERlLXNlbGVjdHMgYWxsIGVudGl0aWVzIGluIHRoZSBzdG9yZVxuICovXG5leHBvcnQgY2xhc3MgRGVzZWxlY3RBbGw8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0QWxsLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGUgZGUtc2VsZWN0aW9uIG9mIGEgc2luZ2xlIGVudGl0eSBpbiB0aGUgc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIERlc2VsZWN0ZWQ8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0ZWQsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoZSBkZS1zZWxlY3Rpb24gb2YgbWFueSBlbnRpdGllcyBpbiB0aGUgc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIERlc2VsZWN0ZWRNYW55PFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBlbnRpdGllczogQXJyYXk8VE1vZGVsIHwgRW50aXR5SWRlbnRpdHk+IHwgbnVsbCwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkRlc2VsZWN0ZWRNYW55LCBjb3JyZWxhdGlvbklkKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykgJiYgZW50aXRpZXMgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW05HUlgtQUVdICEgRGVzZWxlY3RlZE1hbnkgYWN0aW9uIHJlcXVpcmVzIGFuIGFycmF5IG9mIGVudGl0aWVzIG9yIGtleXMuJyk7XG4gICAgfVxuICB9XG59XG4iXX0=