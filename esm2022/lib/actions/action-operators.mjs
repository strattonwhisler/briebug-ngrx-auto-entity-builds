import { merge } from 'rxjs';
import { filter } from 'rxjs/operators';
import { isEntityActionInstance } from './entity-actions-union';
import { setType } from './util';
/**
 * Operator to filter actions by an entity action type or multiple action types.
 *
 * @param allowedActionTypes One or more action type string constants
 */
export function ofEntityAction(...allowedActionTypes) {
    return filter((action) => {
        return isEntityActionInstance(action) ? allowedActionTypes.some(type => setType(type, action.info) === action.type) : false;
    });
}
/**
 * Operator to filter actions by an entity and action type or multiple action types.
 *
 * @param entity The entity class
 * @param allowedActionTypes One or more action type string constants
 */
export function ofEntityType(entity, ...allowedActionTypes) {
    return filter((action) => {
        return isEntityActionInstance(action)
            ? action.info.modelType === entity && allowedActionTypes.some(type => setType(type, action.info) === action.type)
            : false;
    });
}
/**
 * Operator to filter many actions by entity type and entity action types.
 *
 * @param actions$ The NgRx effects Actions stream
 * @param entity The entity types to filter for
 * @param allowedActionTypes The entity actions to filter for
 */
export function fromEntityActions(actions$, entity, ...allowedActionTypes) {
    const entityActions = entity.map(e => actions$.pipe(ofEntityType(e, ...allowedActionTypes)));
    return merge(...entityActions);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLW9wZXJhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncngtYXV0by1lbnRpdHkvc3JjL2xpYi9hY3Rpb25zL2FjdGlvbi1vcGVyYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBZ0MsTUFBTSxNQUFNLENBQUM7QUFDM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXhDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFakM7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQTBCLEdBQUcsa0JBQXVDO0lBQ2hHLE9BQU8sTUFBTSxDQUFDLENBQUMsTUFBcUIsRUFBZSxFQUFFO1FBQ25ELE9BQU8sc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzlILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FDMUIsTUFBd0IsRUFDeEIsR0FBRyxrQkFBdUM7SUFFMUMsT0FBTyxNQUFNLENBQUMsQ0FBQyxNQUE0QixFQUFlLEVBQUU7UUFDMUQsT0FBTyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7WUFDbkMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLE1BQU0sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2pILENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLFFBQWlCLEVBQ2pCLE1BQTRCLEVBQzVCLEdBQUcsa0JBQXVDO0lBRTFDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RixPQUFPLEtBQUssQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBFbnRpdHlBY3Rpb25UeXBlcyB9IGZyb20gJy4vYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7IEVudGl0eUFjdGlvbiwgSUVudGl0eUFjdGlvbiB9IGZyb20gJy4vZW50aXR5LWFjdGlvbic7XG5pbXBvcnQgeyBpc0VudGl0eUFjdGlvbkluc3RhbmNlIH0gZnJvbSAnLi9lbnRpdHktYWN0aW9ucy11bmlvbic7XG5pbXBvcnQgeyBzZXRUeXBlIH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBPcGVyYXRvciB0byBmaWx0ZXIgYWN0aW9ucyBieSBhbiBlbnRpdHkgYWN0aW9uIHR5cGUgb3IgbXVsdGlwbGUgYWN0aW9uIHR5cGVzLlxuICpcbiAqIEBwYXJhbSBhbGxvd2VkQWN0aW9uVHlwZXMgT25lIG9yIG1vcmUgYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50c1xuICovXG5leHBvcnQgZnVuY3Rpb24gb2ZFbnRpdHlBY3Rpb248VCBleHRlbmRzIElFbnRpdHlBY3Rpb24+KC4uLmFsbG93ZWRBY3Rpb25UeXBlczogRW50aXR5QWN0aW9uVHlwZXNbXSk6IE9wZXJhdG9yRnVuY3Rpb248QWN0aW9uLCBUPiB7XG4gIHJldHVybiBmaWx0ZXIoKGFjdGlvbjogSUVudGl0eUFjdGlvbik6IGFjdGlvbiBpcyBUID0+IHtcbiAgICByZXR1cm4gaXNFbnRpdHlBY3Rpb25JbnN0YW5jZShhY3Rpb24pID8gYWxsb3dlZEFjdGlvblR5cGVzLnNvbWUodHlwZSA9PiBzZXRUeXBlKHR5cGUsIGFjdGlvbi5pbmZvKSA9PT0gYWN0aW9uLnR5cGUpIDogZmFsc2U7XG4gIH0pO1xufVxuXG4vKipcbiAqIE9wZXJhdG9yIHRvIGZpbHRlciBhY3Rpb25zIGJ5IGFuIGVudGl0eSBhbmQgYWN0aW9uIHR5cGUgb3IgbXVsdGlwbGUgYWN0aW9uIHR5cGVzLlxuICpcbiAqIEBwYXJhbSBlbnRpdHkgVGhlIGVudGl0eSBjbGFzc1xuICogQHBhcmFtIGFsbG93ZWRBY3Rpb25UeXBlcyBPbmUgb3IgbW9yZSBhY3Rpb24gdHlwZSBzdHJpbmcgY29uc3RhbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZkVudGl0eVR5cGU8VE1vZGVsLCBUIGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4+KFxuICBlbnRpdHk6IG5ldyAoKSA9PiBUTW9kZWwsXG4gIC4uLmFsbG93ZWRBY3Rpb25UeXBlczogRW50aXR5QWN0aW9uVHlwZXNbXVxuKTogT3BlcmF0b3JGdW5jdGlvbjxBY3Rpb24sIFQ+IHtcbiAgcmV0dXJuIGZpbHRlcigoYWN0aW9uOiBFbnRpdHlBY3Rpb248VE1vZGVsPik6IGFjdGlvbiBpcyBUID0+IHtcbiAgICByZXR1cm4gaXNFbnRpdHlBY3Rpb25JbnN0YW5jZShhY3Rpb24pXG4gICAgICA/IGFjdGlvbi5pbmZvLm1vZGVsVHlwZSA9PT0gZW50aXR5ICYmIGFsbG93ZWRBY3Rpb25UeXBlcy5zb21lKHR5cGUgPT4gc2V0VHlwZSh0eXBlLCBhY3Rpb24uaW5mbykgPT09IGFjdGlvbi50eXBlKVxuICAgICAgOiBmYWxzZTtcbiAgfSk7XG59XG5cbi8qKlxuICogT3BlcmF0b3IgdG8gZmlsdGVyIG1hbnkgYWN0aW9ucyBieSBlbnRpdHkgdHlwZSBhbmQgZW50aXR5IGFjdGlvbiB0eXBlcy5cbiAqXG4gKiBAcGFyYW0gYWN0aW9ucyQgVGhlIE5nUnggZWZmZWN0cyBBY3Rpb25zIHN0cmVhbVxuICogQHBhcmFtIGVudGl0eSBUaGUgZW50aXR5IHR5cGVzIHRvIGZpbHRlciBmb3JcbiAqIEBwYXJhbSBhbGxvd2VkQWN0aW9uVHlwZXMgVGhlIGVudGl0eSBhY3Rpb25zIHRvIGZpbHRlciBmb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FbnRpdHlBY3Rpb25zPFQgZXh0ZW5kcyBFbnRpdHlBY3Rpb248YW55Pj4oXG4gIGFjdGlvbnMkOiBBY3Rpb25zLFxuICBlbnRpdHk6IEFycmF5PG5ldyAoKSA9PiBhbnk+LFxuICAuLi5hbGxvd2VkQWN0aW9uVHlwZXM6IEVudGl0eUFjdGlvblR5cGVzW11cbik6IE9ic2VydmFibGU8QWN0aW9uPiB7XG4gIGNvbnN0IGVudGl0eUFjdGlvbnMgPSBlbnRpdHkubWFwKGUgPT4gYWN0aW9ucyQucGlwZShvZkVudGl0eVR5cGUoZSwgLi4uYWxsb3dlZEFjdGlvblR5cGVzKSkpO1xuICByZXR1cm4gbWVyZ2UoLi4uZW50aXR5QWN0aW9ucyk7XG59XG4iXX0=