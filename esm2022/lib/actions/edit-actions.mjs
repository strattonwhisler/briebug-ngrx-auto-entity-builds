import { EntityActionTypes } from './action-types';
import { EntityAction } from './entity-action';
/**
 * Tracks a new entity as being edited in the store
 */
export class EditNew extends EntityAction {
    constructor(type, entity, correlationId) {
        super(type, EntityActionTypes.EditNew, correlationId);
        this.entity = entity;
    }
}
/**
 * Tracks an entity as being edited in the store
 */
export class Edit extends EntityAction {
    constructor(type, entity, correlationId) {
        super(type, EntityActionTypes.Edit, correlationId);
        this.entity = entity;
    }
}
/**
 * Tracks an entity (by its key) as being edited in the store
 */
export class EditByKey extends EntityAction {
    constructor(type, key, correlationId) {
        super(type, EntityActionTypes.EditByKey, correlationId);
        this.key = key;
    }
}
/**
 * Indicates an entity is being tracked as edited in the store
 */
export class Edited extends EntityAction {
    constructor(type, entity, correlationId) {
        super(type, EntityActionTypes.Edited, correlationId);
        this.entity = entity;
    }
}
/**
 * Indicates an entity (by its key) is being tracked as edited in the store
 */
export class EditedByKey extends EntityAction {
    constructor(type, key, correlationId) {
        super(type, EntityActionTypes.EditedByKey, correlationId);
        this.key = key;
    }
}
/**
 * Indicates a change is occurring to the edited entity in the store
 */
export class Change extends EntityAction {
    constructor(type, entity, correlationId) {
        super(type, EntityActionTypes.Change, correlationId);
        this.entity = entity;
    }
}
/**
 * Indicates a change has occurred to the edited entity in the store
 */
export class Changed extends EntityAction {
    constructor(type, entity, correlationId) {
        super(type, EntityActionTypes.Changed, correlationId);
        this.entity = entity;
    }
}
/**
 * Ends editing of currently edited entity and clears it from state
 */
export class EndEdit extends EntityAction {
    constructor(type, correlationId) {
        super(type, EntityActionTypes.EndEdit, correlationId);
    }
}
/**
 * Indicates editing of currently edited entity has ended
 */
export class EditEnded extends EntityAction {
    constructor(type, correlationId) {
        super(type, EntityActionTypes.EditEnded, correlationId);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL2FjdGlvbnMvZWRpdC1hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQzs7R0FFRztBQUNILE1BQU0sT0FBTyxPQUFnQixTQUFRLFlBQW9CO0lBQ3ZELFlBQVksSUFBc0IsRUFBUyxNQUF3QixFQUFFLGFBQXNCO1FBQ3pGLEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRGIsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7SUFFbkUsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sSUFBYSxTQUFRLFlBQW9CO0lBQ3BELFlBQVksSUFBc0IsRUFBUyxNQUF1QixFQUFFLGFBQXNCO1FBQ3hGLEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRFYsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFFbEUsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sU0FBa0IsU0FBUSxZQUFvQjtJQUN6RCxZQUFZLElBQXNCLEVBQVMsR0FBbUIsRUFBRSxhQUFzQjtRQUNwRixLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQURmLFFBQUcsR0FBSCxHQUFHLENBQWdCO0lBRTlELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLE1BQWUsU0FBUSxZQUFvQjtJQUN0RCxZQUFZLElBQXNCLEVBQVMsTUFBdUIsRUFBRSxhQUFzQjtRQUN4RixLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztRQURaLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBRWxFLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFdBQW9CLFNBQVEsWUFBb0I7SUFDM0QsWUFBWSxJQUFzQixFQUFTLEdBQW1CLEVBQUUsYUFBc0I7UUFDcEYsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEakIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7SUFFOUQsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sTUFBZSxTQUFRLFlBQW9CO0lBQ3RELFlBQVksSUFBc0IsRUFBUyxNQUF1QixFQUFFLGFBQXNCO1FBQ3hGLEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRFosV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFFbEUsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sT0FBZ0IsU0FBUSxZQUFvQjtJQUN2RCxZQUFZLElBQXNCLEVBQVMsTUFBdUIsRUFBRSxhQUFzQjtRQUN4RixLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztRQURiLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBRWxFLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLE9BQWdCLFNBQVEsWUFBb0I7SUFDdkQsWUFBWSxJQUFzQixFQUFFLGFBQXNCO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFNBQWtCLFNBQVEsWUFBb0I7SUFDekQsWUFBWSxJQUFzQixFQUFFLGFBQXNCO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUlkZW50aXR5IH0gZnJvbSAnLi4vdHlwZXMvZW50aXR5LWlkZW50aXR5JztcbmltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9uIH0gZnJvbSAnLi9lbnRpdHktYWN0aW9uJztcblxuLyoqXG4gKiBUcmFja3MgYSBuZXcgZW50aXR5IGFzIGJlaW5nIGVkaXRlZCBpbiB0aGUgc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEVkaXROZXc8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVudGl0eT86IFBhcnRpYWw8VE1vZGVsPiwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkVkaXROZXcsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbi8qKlxuICogVHJhY2tzIGFuIGVudGl0eSBhcyBiZWluZyBlZGl0ZWQgaW4gdGhlIHN0b3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGl0PFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBlbnRpdHk6IFBhcnRpYWw8VE1vZGVsPiwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkVkaXQsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbi8qKlxuICogVHJhY2tzIGFuIGVudGl0eSAoYnkgaXRzIGtleSkgYXMgYmVpbmcgZWRpdGVkIGluIHRoZSBzdG9yZVxuICovXG5leHBvcnQgY2xhc3MgRWRpdEJ5S2V5PFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBrZXk6IEVudGl0eUlkZW50aXR5LCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuRWRpdEJ5S2V5LCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyBhbiBlbnRpdHkgaXMgYmVpbmcgdHJhY2tlZCBhcyBlZGl0ZWQgaW4gdGhlIHN0b3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGl0ZWQ8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVudGl0eTogUGFydGlhbDxUTW9kZWw+LCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuRWRpdGVkLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyBhbiBlbnRpdHkgKGJ5IGl0cyBrZXkpIGlzIGJlaW5nIHRyYWNrZWQgYXMgZWRpdGVkIGluIHRoZSBzdG9yZVxuICovXG5leHBvcnQgY2xhc3MgRWRpdGVkQnlLZXk8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGtleTogRW50aXR5SWRlbnRpdHksIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmcpIHtcbiAgICBzdXBlcih0eXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5FZGl0ZWRCeUtleSwgY29ycmVsYXRpb25JZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBjaGFuZ2UgaXMgb2NjdXJyaW5nIHRvIHRoZSBlZGl0ZWQgZW50aXR5IGluIHRoZSBzdG9yZVxuICovXG5leHBvcnQgY2xhc3MgQ2hhbmdlPFRNb2RlbD4gZXh0ZW5kcyBFbnRpdHlBY3Rpb248VE1vZGVsPiB7XG4gIGNvbnN0cnVjdG9yKHR5cGU6IG5ldyAoKSA9PiBUTW9kZWwsIHB1YmxpYyBlbnRpdHk6IFBhcnRpYWw8VE1vZGVsPiwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkNoYW5nZSwgY29ycmVsYXRpb25JZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBjaGFuZ2UgaGFzIG9jY3VycmVkIHRvIHRoZSBlZGl0ZWQgZW50aXR5IGluIHRoZSBzdG9yZVxuICovXG5leHBvcnQgY2xhc3MgQ2hhbmdlZDxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXR5OiBQYXJ0aWFsPFRNb2RlbD4sIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmcpIHtcbiAgICBzdXBlcih0eXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5DaGFuZ2VkLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuZHMgZWRpdGluZyBvZiBjdXJyZW50bHkgZWRpdGVkIGVudGl0eSBhbmQgY2xlYXJzIGl0IGZyb20gc3RhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEVuZEVkaXQ8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkVuZEVkaXQsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIGVkaXRpbmcgb2YgY3VycmVudGx5IGVkaXRlZCBlbnRpdHkgaGFzIGVuZGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGl0RW5kZWQ8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLkVkaXRFbmRlZCwgY29ycmVsYXRpb25JZCk7XG4gIH1cbn1cbiJdfQ==