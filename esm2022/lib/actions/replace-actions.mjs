import { EntityActionTypes } from './action-types';
import { EntityAction } from './entity-action';
/**
 * Replaces a single entity, corresponding to HTTP PUT operation.
 *
 * PUT: Replace the entity with the one supplied in the request
 */
export class Replace extends EntityAction {
    constructor(type, entity, criteria, correlationId) {
        super(type, EntityActionTypes.Replace, correlationId);
        this.entity = entity;
        this.criteria = criteria;
    }
}
export class ReplaceSuccess extends EntityAction {
    constructor(type, entity, criteria, correlationId) {
        super(type, EntityActionTypes.ReplaceSuccess, correlationId);
        this.entity = entity;
        this.criteria = criteria;
    }
}
export class ReplaceFailure extends EntityAction {
    constructor(type, error, entity, criteria, correlationId) {
        super(type, EntityActionTypes.ReplaceFailure, correlationId);
        this.error = error;
        this.entity = entity;
        this.criteria = criteria;
    }
}
/**
 * Replaces many entities, corresponding to HTTP PUT operation.
 *
 * PUT: Replace the entities with the ones supplied in the request
 */
export class ReplaceMany extends EntityAction {
    constructor(type, entities, criteria, correlationId) {
        super(type, EntityActionTypes.ReplaceMany, correlationId);
        this.entities = entities;
        this.criteria = criteria;
    }
}
export class ReplaceManySuccess extends EntityAction {
    constructor(type, entities, criteria, correlationId) {
        super(type, EntityActionTypes.ReplaceManySuccess, correlationId);
        this.entities = entities;
        this.criteria = criteria;
    }
}
export class ReplaceManyFailure extends EntityAction {
    constructor(type, error, entities, criteria, correlationId) {
        super(type, EntityActionTypes.ReplaceManyFailure, correlationId);
        this.error = error;
        this.entities = entities;
        this.criteria = criteria;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGFjZS1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdyeC1hdXRvLWVudGl0eS9zcmMvbGliL2FjdGlvbnMvcmVwbGFjZS1hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLE9BQWdCLFNBQVEsWUFBb0I7SUFDdkQsWUFBWSxJQUFzQixFQUFTLE1BQWMsRUFBUyxRQUFjLEVBQUUsYUFBc0I7UUFDdEcsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEYixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBTTtJQUVoRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sY0FBdUIsU0FBUSxZQUFvQjtJQUM5RCxZQUFZLElBQXNCLEVBQVMsTUFBYyxFQUFTLFFBQWMsRUFBRSxhQUFzQjtRQUN0RyxLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQURwQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBTTtJQUVoRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sY0FBdUIsU0FBUSxZQUFvQjtJQUM5RCxZQUFZLElBQXNCLEVBQVMsS0FBVSxFQUFTLE1BQWMsRUFBUyxRQUFjLEVBQUUsYUFBc0I7UUFDekgsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEcEIsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUFTLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFNO0lBRW5HLENBQUM7Q0FDRjtBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sV0FBb0IsU0FBUSxZQUFvQjtJQUMzRCxZQUFZLElBQXNCLEVBQVMsUUFBa0IsRUFBUyxRQUFjLEVBQUUsYUFBc0I7UUFDMUcsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEakIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQU07SUFFcEYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtCQUEyQixTQUFRLFlBQW9CO0lBQ2xFLFlBQVksSUFBc0IsRUFBUyxRQUFrQixFQUFTLFFBQWMsRUFBRSxhQUFzQjtRQUMxRyxLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRHhCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFNO0lBRXBGLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxrQkFBMkIsU0FBUSxZQUFvQjtJQUNsRSxZQUFZLElBQXNCLEVBQVMsS0FBVSxFQUFTLFFBQWtCLEVBQVMsUUFBYyxFQUFFLGFBQXNCO1FBQzdILEtBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFEeEIsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFNO0lBRXZHLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvblR5cGVzIH0gZnJvbSAnLi9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0IHsgRW50aXR5QWN0aW9uIH0gZnJvbSAnLi9lbnRpdHktYWN0aW9uJztcblxuLyoqXG4gKiBSZXBsYWNlcyBhIHNpbmdsZSBlbnRpdHksIGNvcnJlc3BvbmRpbmcgdG8gSFRUUCBQVVQgb3BlcmF0aW9uLlxuICpcbiAqIFBVVDogUmVwbGFjZSB0aGUgZW50aXR5IHdpdGggdGhlIG9uZSBzdXBwbGllZCBpbiB0aGUgcmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUmVwbGFjZTxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXR5OiBUTW9kZWwsIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlJlcGxhY2UsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXBsYWNlU3VjY2VzczxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXR5OiBUTW9kZWwsIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlJlcGxhY2VTdWNjZXNzLCBjb3JyZWxhdGlvbklkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVwbGFjZUZhaWx1cmU8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVycm9yOiBhbnksIHB1YmxpYyBlbnRpdHk6IFRNb2RlbCwgcHVibGljIGNyaXRlcmlhPzogYW55LCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKSB7XG4gICAgc3VwZXIodHlwZSwgRW50aXR5QWN0aW9uVHlwZXMuUmVwbGFjZUZhaWx1cmUsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbi8qKlxuICogUmVwbGFjZXMgbWFueSBlbnRpdGllcywgY29ycmVzcG9uZGluZyB0byBIVFRQIFBVVCBvcGVyYXRpb24uXG4gKlxuICogUFVUOiBSZXBsYWNlIHRoZSBlbnRpdGllcyB3aXRoIHRoZSBvbmVzIHN1cHBsaWVkIGluIHRoZSByZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBSZXBsYWNlTWFueTxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXRpZXM6IFRNb2RlbFtdLCBwdWJsaWMgY3JpdGVyaWE/OiBhbnksIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmcpIHtcbiAgICBzdXBlcih0eXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5SZXBsYWNlTWFueSwgY29ycmVsYXRpb25JZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlcGxhY2VNYW55U3VjY2VzczxUTW9kZWw+IGV4dGVuZHMgRW50aXR5QWN0aW9uPFRNb2RlbD4ge1xuICBjb25zdHJ1Y3Rvcih0eXBlOiBuZXcgKCkgPT4gVE1vZGVsLCBwdWJsaWMgZW50aXRpZXM6IFRNb2RlbFtdLCBwdWJsaWMgY3JpdGVyaWE/OiBhbnksIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmcpIHtcbiAgICBzdXBlcih0eXBlLCBFbnRpdHlBY3Rpb25UeXBlcy5SZXBsYWNlTWFueVN1Y2Nlc3MsIGNvcnJlbGF0aW9uSWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXBsYWNlTWFueUZhaWx1cmU8VE1vZGVsPiBleHRlbmRzIEVudGl0eUFjdGlvbjxUTW9kZWw+IHtcbiAgY29uc3RydWN0b3IodHlwZTogbmV3ICgpID0+IFRNb2RlbCwgcHVibGljIGVycm9yOiBhbnksIHB1YmxpYyBlbnRpdGllczogVE1vZGVsW10sIHB1YmxpYyBjcml0ZXJpYT86IGFueSwgY29ycmVsYXRpb25JZD86IHN0cmluZykge1xuICAgIHN1cGVyKHR5cGUsIEVudGl0eUFjdGlvblR5cGVzLlJlcGxhY2VNYW55RmFpbHVyZSwgY29ycmVsYXRpb25JZCk7XG4gIH1cbn1cbiJdfQ==